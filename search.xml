<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>個人部落格工具 - Hexo</title>
    <url>/2021/10/10/tools-blog-hexo-install/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為之前都是使用 Word 或 Power Point 方式整理筆記，但是隨著筆記越來越多，當又出現之前踩到的雷時，想要去找到之前的筆記變得越來越困難，雖然中間嘗試著用目錄進行筆記分類，但是有些筆記內容是屬於多個分類的，導致在分類上難以進行一個很明確的分類．<br>再者因為硬碟的損毀導致部份筆記遺失，所以一直想要將筆記放在網路上，一方面做為備份，另一方面也可以隨時隨地查閱筆記．<br>今天在 Youtube 看教學時，Youtube 突然推薦了一個關於 Ｈexo 搭配 Github 建立一個 blog 的影片引起我的注意，看完之後雖然不完全是我心目中記錄筆記的方式，但是也相去不遠了，所以才有這篇文章的產生．</p>
<span id="more"></span>
<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><h2 id="安裝-Nodej"><a href="#安裝-Nodej" class="headerlink" title="安裝 Nodej"></a>安裝 Nodej</h2><img src="/2021/10/10/tools-blog-hexo-install/download_nodejs.png" class="" title="download_nodejs">
<p>下載網址 : <a href="https://nodejs.org/zh-tw/download/">Nodejs</a><br>安裝方式 : 無腦安裝法</p>
<ol>
<li>點擊下載的 nodejs<img src="/2021/10/10/tools-blog-hexo-install/double_click_nodejs.png" class="" title="double_click_nodejs"></li>
<li>進行安裝<img src="/2021/10/10/tools-blog-hexo-install/install_nodejs.png" class="" title="install_nodejs"></li>
<li>完成安裝<img src="/2021/10/10/tools-blog-hexo-install/install_nodejs_done.png" class="" title="install_nodejs_done"></li>
</ol>
<h2 id="安裝-Git"><a href="#安裝-Git" class="headerlink" title="安裝 Git"></a>安裝 Git</h2><img src="/2021/10/10/tools-blog-hexo-install/download_git.png" class="" title="download_git">
<p>下載網址 : <a href="https://git-scm.com/downloads">Git</a><br>安裝方式 : 無腦安裝法</p>
<ol>
<li>點擊下載的 git<img src="/2021/10/10/tools-blog-hexo-install/double_click_git.png" class="" title="double_click_git"></li>
<li>進行安裝<img src="/2021/10/10/tools-blog-hexo-install/install_git.png" class="" title="install_git"></li>
<li>完成安裝<img src="/2021/10/10/tools-blog-hexo-install/install_git_done.png" class="" title="install_git_done"></li>
</ol>
<h1 id="安裝-Hexo-CLI"><a href="#安裝-Hexo-CLI" class="headerlink" title="安裝 Hexo CLI"></a>安裝 Hexo CLI</h1><p>輸入底下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<h1 id="建立-Blog-目錄並初始化"><a href="#建立-Blog-目錄並初始化" class="headerlink" title="建立 Blog 目錄並初始化"></a>建立 Blog 目錄並初始化</h1><p>建立一個目錄放置 blog<br>我是建立一個 Blog 目錄，進入 Blog 目錄中，並進行初始化．<br>命令如下 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir Blog</span><br><span class="line">$ <span class="built_in">cd</span> Blog</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<ul>
<li>建立 Blog 目錄<img src="/2021/10/10/tools-blog-hexo-install/create_blog.png" class="" title="create_blog"></li>
<li>初始化<img src="/2021/10/10/tools-blog-hexo-install/init_hexo.png" class="" title="init_hexo"></li>
</ul>
<h1 id="將-Blog-目錄下的東西上傳到-GitHub-Optional"><a href="#將-Blog-目錄下的東西上傳到-GitHub-Optional" class="headerlink" title="將 Blog 目錄下的東西上傳到 GitHub (Optional)"></a>將 Blog 目錄下的東西上傳到 GitHub (Optional)</h1><p>因為 Hexo 在部署上會先自動產生文章相關的網頁並進行部署，但是對於外掛套件、主題安裝和修改設定檔是不會一起部署到 GitHub 的，對於曾經因為沒有版本控制而吃上大虧的我，對於在沒版控的情況下進行修改，著實讓我感到不安．<br>這部分進行的步驟跟一般專案將程式碼上 GitHub 一樣，所以我就不詳述了．</p>
<ol>
<li>在 GitHub 上建立一個 Repository</li>
<li>將 Blog 目錄下的東西全部上傳到 GitHub</li>
</ol>
<h1 id="安裝部署套件"><a href="#安裝部署套件" class="headerlink" title="安裝部署套件"></a>安裝部署套件</h1><p>此套件是用來將產生的 blog 靜態網頁部署到 GitHub 上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/10/tools-blog-hexo-install/install_hexo_git_package.png" class="" title="install_hexo_git_package">

<h1 id="部署網頁空間"><a href="#部署網頁空間" class="headerlink" title="部署網頁空間"></a>部署網頁空間</h1><p>GitHub 提供了一個網頁空間，因為免費的，所以我就拿它來當 blog 使用<br>網路上有許多教學，這邊就不再詳述，可以參考底下網站的教學 :<br><a href="https://pages.github.com/">GitHub Pages</a></p>
<h1 id="部署設定"><a href="#部署設定" class="headerlink" title="部署設定"></a>部署設定</h1><p>修改 _config.yml 檔案中的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: your_repository (ex: https://github.com/username/username.github.io.git，其中 username 需要替換成自己的)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h1 id="進行部署"><a href="#進行部署" class="headerlink" title="進行部署"></a>進行部署</h1><p>使用以下命令進行部署 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Theme</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加關鍵字搜尋</title>
    <url>/2021/10/16/tools-blog-hexo-next-search/</url>
    <content><![CDATA[<h1 id="安裝-hexo-generator-searchdb"><a href="#安裝-hexo-generator-searchdb" class="headerlink" title="安裝 hexo-generator-searchdb"></a>安裝 hexo-generator-searchdb</h1><p>在終端機上輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-search/01.png" class="" title="install hexo-generator-searchdb">
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes/next/_config.yml<br>將 local_search 的 enable 設為 true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-search/02.png" class="" title="enable local_search">

<h1 id="效果呈現"><a href="#效果呈現" class="headerlink" title="效果呈現"></a>效果呈現</h1><img src="/2021/10/16/tools-blog-hexo-next-search/03.png" class="" title="result">]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加字數與閱讀時間統計</title>
    <url>/2021/10/16/tools-blog-hexo-next-symbol-count/</url>
    <content><![CDATA[<h1 id="安裝-hexo-symbols-count-time"><a href="#安裝-hexo-symbols-count-time" class="headerlink" title="安裝 hexo-symbols-count-time"></a>安裝 hexo-symbols-count-time</h1><p>在終端機上輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-symbol-count/01.png" class="" title="install hexo-symbols-count-time">
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes/next/_config.yml<br>將 item_text_total 設為 true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-symbol-count/02.png" class="" title="enable item_text_total">

<h1 id="效果呈現"><a href="#效果呈現" class="headerlink" title="效果呈現"></a>效果呈現</h1><img src="/2021/10/16/tools-blog-hexo-next-symbol-count/03.png" class="" title="result">]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 001 Hello React</title>
    <url>/2021/10/17/frontend-react-001-hello-react/</url>
    <content><![CDATA[<h1 id="使用-VS-Code-建立一個專案"><a href="#使用-VS-Code-建立一個專案" class="headerlink" title="使用 VS Code 建立一個專案"></a>使用 VS Code 建立一個專案</h1><p>打開 VS Code 並點選 Open Folder…</p>
<img src="/2021/10/17/frontend-react-001-hello-react/01.png" class="" title="click Open-Folder">
<span id="more"></span>
<p>建立一個工作目錄 React</p>
<img src="/2021/10/17/frontend-react-001-hello-react/02.png" class="" title="create a folder React">
<p>建立完成</p>
<img src="/2021/10/17/frontend-react-001-hello-react/03.png" class="" title="create a React project">

<h1 id="建立一個實驗目錄並建立一個-html-檔案"><a href="#建立一個實驗目錄並建立一個-html-檔案" class="headerlink" title="建立一個實驗目錄並建立一個 html 檔案"></a>建立一個實驗目錄並建立一個 html 檔案</h1><p>在 React 目錄中按下滑鼠右鍵，點選 New Folder 並建立 React 01 目錄</p>
<img src="/2021/10/17/frontend-react-001-hello-react/04.png" class="" title="create a folder for experiment 1">
<p>在 React 01 上按下滑鼠右鍵，點選 New File 建立 hello_react.html</p>
<img src="/2021/10/17/frontend-react-001-hello-react/05.png" class="" title="create a file">
<p>最終目錄結構如下:</p>
<img src="/2021/10/17/frontend-react-001-hello-react/06.png" class="" title="folder and file result">

<h1 id="引入相關設定並展示結果"><a href="#引入相關設定並展示結果" class="headerlink" title="引入相關設定並展示結果"></a>引入相關設定並展示結果</h1><p>編輯 hello_react.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_reactjs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 準備好一個容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心庫 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom，用於 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel，用於將 jsx 轉為 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        此處 type 一定要設為 text/babel</span></span><br><span class="line"><span class="comment">        這樣 babel 才知道要將此處的 jsx 編譯成 js</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>  <span class="comment">// 此處一定不要寫引號，因為不是字串</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">        ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意 : </p>
<ol>
<li>三個 js 包的引入順序</li>
<li>在使用 jsx 時，一定用宣告成 <code>&lt;script type=&quot;text/babel&quot;&gt;&lt;/script&gt;</code></li>
<li>此為開始學習 Ract 的最簡單方式，之後還會介紹比較正式複雜的方式</li>
</ol>
<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><p>首先在 VS Code 中需安裝延伸套件 Live Server</p>
<img src="/2021/10/17/frontend-react-001-hello-react/07.png" class="" title="install Live Server">
<p>在該檔案上按下滑鼠右鍵點選 Open with Live Server</p>
<img src="/2021/10/17/frontend-react-001-hello-react/08.png" class="" title="Open with Live Server">
<p>最終在瀏覽器上呈現出以下畫面:</p>
<img src="/2021/10/17/frontend-react-001-hello-react/09.png" class="" title="result in browser">

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://reactjs.org/docs/add-react-to-a-website.html">https://reactjs.org/docs/add-react-to-a-website.html</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 002 Jsx 的一些規則</title>
    <url>/2021/10/19/frontend-react-002-jsx-rule/</url>
    <content><![CDATA[<ol>
<li><p>定義虛擬 DOM 時，不要有引號<br>創建虛擬 DOM 時，注意不會將標籤內容加上引號<br>即不需要將下圖黃色區塊額外加上引號</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/01.png" class="" title="create virtual DOM NG">
<p>正確的方式是可以用 <code>&#123; &#125;</code> 將標籤框住</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/02.png" class="" title="create virtual DOM OK">
<span id="more"></span></li>
<li><p>標籤中混入 js 表達式時，要用 <code>&#123; &#125;</code><br>比如說在 <code>&lt;h1&gt;&lt;/h1&gt;</code>內容要由變數 myData 中取得，<br>則需要寫成底下圖片中的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/03.png" class="" title="js"></li>
<li><p>樣式的類名指定不要用 class，要用 className<br>錯誤的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/04.png" class="" title="class"></li>
</ol>
<p>正確的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/05.png" class="" title="className">

<ol start="4">
<li><p>內聯樣式要用 <code>style=&#123;&#123;key:value&#125;&#125;</code> 形式書寫<br>如下所示 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/06.png" class="" title="style"></li>
<li><p>虛擬 DOM 必須只有一個根標籤<br>不能存在兩個根標籤</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/07.png" class="" title="two roots"></li>
</ol>
<p>可以用 <code>&lt;div&gt;&lt;/div&gt;</code> 包裹住</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/08.png" class="" title="the root">

<ol start="6">
<li><p>標籤必須閉合<br>即像在 html 中 <code>&lt;input type=&quot;text&quot;&gt;</code> 的寫法是可以的，<br>但是在 jsx 中必須要有結束標籤 <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code> 或 <code>&lt;input type=&quot;text&quot;/&gt;</code></p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/09.png" class="" title="the close"></li>
<li><p>標籤首字母的意義<br>(1) 若小寫字母開頭，則將改標籤轉為 html 同名元素．若 html 中無該標籤對應的同名元素則報錯．<br>(2) 若大寫字母開頭，React 就會去渲染對應的組件，若組件沒有定義則會報錯．</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 003 jsx 中只能混入 js 表達式</title>
    <url>/2021/10/19/frontend-react-003-jsx-tag/</url>
    <content><![CDATA[<p>考量底下的代碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若我們想用一個模擬數據 <code>[&#39;Angular&#39;, &#39;React&#39;, &#39;Vue&#39;]</code><br>用來替換掉代碼中寫死的部分，將代碼修改成 :</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#123;data&#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>則在頁面呈現的結果如下 : </p>
<img src="/2021/10/19/frontend-react-003-jsx-tag/01.png" class="" title="wrong">
<p>會發現 React 會把 <code>[&#39;Angular&#39;, &#39;React&#39;, &#39;Vue&#39;]</code> 數據一個一個讀出<br>此時若能在裡面寫一個 for 語句將所有的資料一個一個讀出來，如下所示 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                for (var i = 0; i &lt; data.length; i++) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>data[i]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面結果會出現語法錯誤，因為此處只能寫 js 表達式，不可以寫 js 語句(代碼)</p>
<ol>
<li>表達式 :<br> (1) 變數 a<br> (2) a+b<br> (3) demo(1)<br> (4) arr.map()<br> (5) function test() {}</li>
<li>語句<br> (1) if 語句<br> (2) for 語句<br> (3) switch 語句</li>
</ol>
<p>所以用另一個方法 : 使用 arr.map()</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                data.map((item, index)=&gt;&#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最後結果如下圖所示 :</p>
<img src="/2021/10/19/frontend-react-003-jsx-tag/02.png" class="" title="correct">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 004 使用函數建立組件</title>
    <url>/2021/10/19/frontend-react-004-create-component-by-function/</url>
    <content><![CDATA[<ol>
<li><p>創建一個函數<br>底下是錯誤的寫法 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color=#FF0000>注意</font> : 首字母必須大寫，否則在標籤引用時會出錯，<br>因為 React 對小寫開頭的標籤會直接對應去找 html 語法中有提供的標籤．</p>
<span id="more"></span>
<p>正確的寫法如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>渲染到頁面上<br>錯誤的寫法 1 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(Demo, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>錯誤的寫法 2 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(&lt;Demo&gt;, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color=#FF0000>注意</font> : 要使用標籤形式，且必須是要閉合的<br>正確的寫法如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><img src="/2021/10/19/frontend-react-004-create-component-by-function/01.png" class="" title="result">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加訪客與訪問量統計</title>
    <url>/2021/10/19/tools-blog-hexo-next-statistics-visitor/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在網路上找了一下有關於為 Hexo 添加訪客與訪問量統計，發現蠻混亂的，<br>一下子說 busuanzi 有問題不可以用，也有人說要修改一些東西，結果我修改完也沒有效果，<br>所以我這一篇就是來記錄一下我最後找到並是成功的方法。<br>我是參考這篇<a href="https://www.lcd1024.xyz/2020/05/31/busuanzi/">文章</a></p>
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes\next_config.yml，確認底下的設定是有關閉的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>設定 valine</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>

<h1 id="在頁腳添加統計"><a href="#在頁腳添加統計" class="headerlink" title="在頁腳添加統計"></a>在頁腳添加統計</h1><p>打開 themes\next\layout_partials\footer.swig，<br>在 <code>&#123;%- endif %&#125;</code> 和 <code>&#123;&#123;- next_inject('footer') &#125;&#125;</code> 之間添加底下代碼 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>總訪客：&amp;nbsp<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>總訪問量：&amp;nbsp<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/01.png" class="" title="modify footer.swig">

<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><p>若是在本地端上看到的會是底下情況 :</p>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/02.png" class="" title="local">

<p>放到 GitHub 後才會有作用 :</p>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/03.png" class="" title="server">

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.lcd1024.xyz/2020/05/31/busuanzi/">Lcd1024|上善若水</a></p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 005 使用類別建立組件</title>
    <url>/2021/10/20/frontend-react-005-create-component-by-class/</url>
    <content><![CDATA[<h1 id="創建一個類別繼承-React-Component"><a href="#創建一個類別繼承-React-Component" class="headerlink" title="創建一個類別繼承 React.Component"></a>創建一個類別繼承 React.Component</h1><p><font color=#FF0000>注意 :</font></p>
<ol>
<li>組件類別必須繼承 React.Component</li>
<li>必須定義 render() </li>
<li>render() 必須有返回值</li>
</ol>
<p>底下是一個簡單的示例 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建類式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用類定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 006 初始化並使用 state</title>
    <url>/2021/10/20/frontend-react-006-use-state/</url>
    <content><![CDATA[<h1 id="組件的三大屬性-state"><a href="#組件的三大屬性-state" class="headerlink" title="組件的三大屬性 - state"></a>組件的三大屬性 - state</h1><p>React 透過 state 屬性的資訊，改變頁面呈現結果<br>首先寫一個簡單的類別組件如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建類式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣炎熱<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>觀察一下 Console 輸出 :</p>
<img src="/2021/10/20/frontend-react-006-use-state/01.png" class="" title="console1">
<p>可以發現 React 已經有建立好 state 屬性了</p>
<span id="more"></span>

<h1 id="state-賦值"><a href="#state-賦值" class="headerlink" title="state 賦值"></a>state 賦值</h1><p>一般自己寫的 js 類別可以利用以下方式達到讓繼承的類別，<br>可以在創建時將值賦給新的屬性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;steven&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>
<p>但是在 React 中新增物件是由 React 所控制的，即是由 React 調用 new 方法創建物件<br>所以無法由外部傳值給 state，但是可以通過創建方法 constructor() 對 state 賦值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;this.state.isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>賦值成功</p>
<img src="/2021/10/20/frontend-react-006-use-state/02.png" class="" title="console2">

<p>另一種寫法取值 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 007 原生事件綁定</title>
    <url>/2021/10/21/frontend-react-007-binding-evvent/</url>
    <content><![CDATA[<p>推薦在標籤上進行原生事件綁定，代碼如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;標題被點擊了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意 :</font></p>
<ol>
<li>一般 js 在標籤中設定點擊事件是使用 onclick，但是 React 中需使用 onClick</li>
<li>在設定 onClick 時，必須要用這樣的格式 :<br>&emsp;onClick={function}<br>底下的寫法都是有問題的 :<br>&emsp;onClick=function<br>&emsp;onClick={function()}</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 008 透過事件改變 state</title>
    <url>/2021/10/21/frontend-react-008-change-state-by-event/</url>
    <content><![CDATA[<p>要如何透過點擊事件達到改 state 的值，讓瀏覽器重新渲染畫面？<br>考慮底下代碼，在點擊事件 myClick() 中讀取 state :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在事件中取得 state</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/01.png" class="" title="error1">
<p>這是因為 myClick() 在 Weather 類別之外，所以根本讀不到 state，<br>而此處的 this，在嚴格模式下是 undefine，正常模式下指向 window，所以會出錯誤</p>
<p>將 myClick() 移到 Weather 類別內，如下代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// myClick() 放在 Weather 原型對象上(只有一份)，以提供實例使用</span></span><br><span class="line">            <span class="comment">// 必須通過 Weather 實例去調用 myClick() 時，myClick() 內的 this 才是 Weather 實例</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/02.png" class="" title="error2">
<p>因為在<code>&lt;h2 onClick=&#123;myClick&#125;&gt;</code>，只有 Weather 實例才可以調用 myClick()<br>所以將<code>&lt;h2 onClick=&#123;myClick&#125;&gt;</code>改成<code>&lt;h2 onClick=&#123;this.myClick&#125;&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// myClick() 放在 Weather 原型對象上(只有一份)，以提供實例使用</span></span><br><span class="line">            <span class="comment">// 必須通過 Weather 實例去調用 myClick() 時，myClick() 內的 this 才是 Weather 實例</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/03.png" class="" title="error3">
<p>一開始可以顯示正常，但是一點擊後就出現錯誤了．<br>因為<code>&lt;h2 onClick=&#123;this.myClick&#125;&gt;</code>只是賦值給 onClick，<br>等到點擊 h2 標籤時，是直接調用被賦值的方法 myClick()，<br>可以想做是 window 調用 myClick() 方法，而此方法的本體是指向 Weather 的 myClick()，<br>所以在 myClick() 中的 this 其實是 window，而 window 中並沒有 state 屬性</p>
<h1 id="可以正確地在回調函數中取得-state-的寫法"><a href="#可以正確地在回調函數中取得-state-的寫法" class="headerlink" title="可以正確地在回調函數中取得 state 的寫法"></a>可以正確地在回調函數中取得 state 的寫法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">            <span class="built_in">this</span>.changeWeather = <span class="built_in">this</span>.myClick.bind(<span class="built_in">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>輸出結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/04.png" class="" title="correct">

<h1 id="進行-state-內容的更改"><a href="#進行-state-內容的更改" class="headerlink" title="進行 state 內容的更改"></a>進行 state 內容的更改</h1><p>直接在 myClick() 中更改 state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">    <span class="built_in">this</span>.state.isHot = !isHot</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.isHot)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可是輸出結果，console 中有改變，但是頁面卻沒有變化</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/05.png" class="" title="change state 1">
<p>這是因為 React 並不允許直接更改 state 的值．<br>打開 react devlopment tool 可以發現，不管怎樣點擊<code>&lt;h2&gt;</code>標籤，<br>在開發者工具中的 state 都不會改變</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/06.png" class="" title="devlopment tool">
<h2 id="注意"><a href="#注意" class="headerlink" title="注意 :"></a><font color="#FF000">注意 :</font></h2><p>狀態必須透過 setState() 進行更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="最後精簡總結"><a href="#最後精簡總結" class="headerlink" title="最後精簡總結"></a>最後精簡總結</h1><ol>
<li>更改 state 初始方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
改成<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="comment">//this.state = &#123;isHot:false&#125;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改事件回調方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">this</span>.changeWeather = <span class="built_in">this</span>.myClick.bind(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
改成<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//this.changeWeather = this.myClick.bind(this)</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*myClick() &#123;</span></span><br><span class="line"><span class="comment">        const isHot = this.state.isHot</span></span><br><span class="line"><span class="comment">        this.setState(&#123;isHot:!isHot&#125;)</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font color="#FF0000">注意 :</font><br>一定要用匿名函數的方式對回調函數做設定</li>
</ol>
<h2 id="最終的代碼"><a href="#最終的代碼" class="headerlink" title="最終的代碼"></a>最終的代碼</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 初始化 state</span></span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 重新編寫</span></span><br><span class="line">        changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 010 對組件的標籤屬性進行檢查與限制</title>
    <url>/2021/10/21/frontend-react-010-check-props/</url>
    <content><![CDATA[<p>首先引入 prop-types.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.0/prop-types.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>編寫限制條件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    People.propTypes = &#123;</span><br><span class="line">        <span class="attr">name</span>: PropTypes.string</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="number">12</span>, <span class="attr">sex</span>:<span class="string">&quot;Man&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>因為上述代碼會將檢查<code>name</code>必須是字串，所以當傳入數值時會發出警告</p>
<img src="/2021/10/21/frontend-react-010-check-props/01.png" class="" title="warning">

<p>若要限制不為空，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/02.png" class="" title="check null">

<p>若要設定預設值，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">&#125;</span><br><span class="line">People.defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/03.png" class="" title="default value">

<p>若要設定 age 為數值，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">    <span class="attr">age</span>: PropTypes.number</span><br><span class="line">&#125;</span><br><span class="line">People.defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/04.png" class="" title="check number">

<p>若要限制傳入的為函數，注意要用<code>func</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">    <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">    <span class="attr">say</span>: PropTypes.func</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/05.png" class="" title="check function">

<h1 id="精簡代碼"><a href="#精簡代碼" class="headerlink" title="精簡代碼"></a>精簡代碼</h1><p>將 propTypes 和 defaultProps 都放置於類中<br><font color="#FF000">注意 :</font><br>不需要用 <code>People.propTypes</code> 方式，則是用 <code>static propTypes</code><br><font color="#FF000">static 必須要寫</font>，否則就會變成對實例添加一個屬性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">            <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">            <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">            <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">            <span class="attr">say</span>: PropTypes.func</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">say</span>:<span class="string">&quot;hello&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 009 props 基礎使用</title>
    <url>/2021/10/21/frontend-react-009-props-basic/</url>
    <content><![CDATA[<p>主要的目的是讓我們可以在建構實例時，由外部傳遞一些資訊給該實例使用，而且是唯讀的</p>
<h1 id="一般傳遞方式"><a href="#一般傳遞方式" class="headerlink" title="一般傳遞方式"></a>一般傳遞方式</h1><p>就是在<code>&lt;People/&gt;</code>內改成<code>&lt;People name=&quot;Steven&quot; sex=&quot;Man&quot; age=&quot;18&quot;/&gt;</code>，之後在實例中就可以透過 props 取的，如以下的寫法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;this.props.sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> <span class="attr">name</span>=<span class="string">&quot;Steven&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;Man&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>呈現畫面</p>
<img src="/2021/10/21/frontend-react-009-props-basic/01.png" class="" title="result">
<span id="more"></span>

<h1 id="批量傳遞方式"><a href="#批量傳遞方式" class="headerlink" title="批量傳遞方式"></a>批量傳遞方式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;Steven&quot;</span>, <span class="attr">sex</span>:<span class="string">&quot;Man&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 011 函數式組件使用 props</title>
    <url>/2021/10/21/frontend-react-011-functional-component-use-props/</url>
    <content><![CDATA[<p>透過函數可以傳參數的特性，React 也會將標籤屬性包成 props 傳給函數．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, sex, age&#125; = props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    People.propTypes = &#123;</span><br><span class="line">        <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">        <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">        <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">        <span class="attr">say</span>: PropTypes.func</span><br><span class="line">    &#125;</span><br><span class="line">    People.defaultProps = &#123;</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">say</span>:<span class="string">&quot;hello&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 012 字串 ref 的使用</title>
    <url>/2021/10/22/frontend-react-012-string-ref-use/</url>
    <content><![CDATA[<p>官方不推薦使用，因為有其效率問題且未來版本會移除．考慮以前要從<code>&lt;input&gt;</code>中取得資料，會類似底下的寫法 : </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;input id=<span class="string">&quot;input1&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> value = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input1&quot;</span>).value;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>寫 React 雖然也可以用這樣的方式取得數據，但是提供另一種方式取數據，如底下的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span>.refs</span><br><span class="line">            alert(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.refs.input2.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>利用標籤上的屬性<code>ref</code> React 會幫我把這些元素，以鍵值對的方式收集到```refs``中</p>
<img src="/2021/10/22/frontend-react-012-string-ref-use/01.png" class="" title="refs">
<p>然後就可以在實例中使用<code>this.refs.input1.value</code>方式取值</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 013 回調函數形式 ref 的使用</title>
    <url>/2021/10/22/frontend-react-013-callback-ref-use/</url>
    <content><![CDATA[<h1 id="內聯方式回調函數"><a href="#內聯方式回調函數" class="headerlink" title="內聯方式回調函數"></a>內聯方式回調函數</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;console.log(input1Element);&#125;&#125; type=&quot;text&quot; value=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>如果在標籤上的<code>ref</code>設定一個回調函數，則傳入的參數就是元素自身．</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/01.png" class="" title="test callback ref">

<p>所以我們可以透過將自身元素<code>input1Element</code>設給實例中的一個屬性<code>input1</code>，接著在回調函數<code>myClick()</code>中，透過屬性<code>input1</code>就可以取得給該元素．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;this.input1=input1Element;&#125;&#125; type=&quot;text&quot; defaultValue=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/02.png" class="" title="get value by callback ref">

<p>精簡代碼</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function">(<span class="params">input1Element</span>) =&gt;</span> &#123;<span class="built_in">this</span>.input1=input1Element;&#125;&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>因為函數參數只有一個，且函數主體代碼只有一個，所以括號可省落寫成 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function"><span class="params">input1Element</span> =&gt;</span> <span class="built_in">this</span>.input1=input1Element&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>因為<code>input1Element</code>幾乎不會用到，可以再省略 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">this</span>.input1=c&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="每次更新時會呼叫兩次"><a href="#每次更新時會呼叫兩次" class="headerlink" title="每次更新時會呼叫兩次"></a>每次更新時會呼叫兩次</h2><p>以底下的例子說明 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        changeWeather = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                        this.input1=input1Element;</span></span><br><span class="line"><span class="xml">                        console.log(&quot;@&quot;, input1Element);</span></span><br><span class="line"><span class="xml">                    &#125;&#125; type=&quot;text&quot; defaultValue=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>Change Weather<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>一開始只會印出一行</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/03.png" class="" title="first time">
<p>當按下 Change Weather 按鈕後，會更新頁面，<br>就會看到印出兩行，第一行是用來清空之前的數據，第二行是重新設定數據</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/04.png" class="" title="update">

<h1 id="類方式回調函數"><a href="#類方式回調函數" class="headerlink" title="類方式回調函數"></a>類方式回調函數</h1><p>就是將回調函數寫在類中，如底下代碼所示 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        changeWeather = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        saveInput = <span class="function">(<span class="params">input1Element</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.input1 = input1Element;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;@&quot;</span>, input1Element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;test callback&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>Change Weather<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/05.png" class="" title="class callback">
<p>這樣的話就算頁面更新也不會呼叫</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>因為官方說兩者差異不大，所以一般大多數還是使用內聯方式居多．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 015 非受控組件</title>
    <url>/2021/10/22/frontend-react-015-uncontrolled-component/</url>
    <content><![CDATA[<p>簡單地說就是當要取用數值時，才從輸入元素<code>&lt;input&gt;</code>中取用，代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span></span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username.value&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password.value&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上面登入資料的取用，是等到按下登入按鈕時，才會觸發<code>handleSubmit()</code>回調函數，而在回調函數中才從元素中去取值出來．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 014 createRef 函數</title>
    <url>/2021/10/22/frontend-react-014-create-ref/</url>
    <content><![CDATA[<p>目前官方最推薦的方式，步驟如下 :</p>
<ol>
<li>使用<code>React.createRef()</code>建立所需的 ref 容器，如 : <code>ref1 = React.createRef()</code></li>
<li>原本使用字串或回調函數設定的地方，都改設成 ref 容器，如 : <code>&lt;input ref=&#123;this.ref1&#125; type=&quot;text&quot;/&gt;</code></li>
<li>取值方式，如 : <code>alert(this.ref1.current.value)</code><br>完整代碼如下 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        ref1 = React.createRef()</span><br><span class="line">        ref2 = React.createRef()</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.ref1.current.value)</span><br><span class="line">        &#125;</span><br><span class="line">        showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.ref2.current.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref1&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref2&#125;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 016 受控組件</title>
    <url>/2021/10/22/frontend-react-016-controlled-component/</url>
    <content><![CDATA[<p>簡單地說就是把數值放在 state 中，當要使用數值時，直接由 state 中取用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveUsername = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">username</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        savePassword = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">password</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>如上代碼會在每次輸入框有改變時，會透過回調函數將輸入值儲存到 state 中，等到要提交時，就直接由 state 中取用</p>
<img src="/2021/10/22/frontend-react-016-controlled-component/01.png" class="" title="controlled component">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 017 高階函數與柯里化</title>
    <url>/2021/10/22/frontend-react-017-currying/</url>
    <content><![CDATA[<p>考慮前一篇的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveUsername = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">username</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        savePassword = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">password</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>此時表單只有兩個輸入框，所以僅需要兩個回調函數即可，萬一表單有幾十個輸入框，那不是就要寫幾十個回調函數．<br>再者，每個回調函數都大同小異，那是不是可以用一個函數透過傳參數的方式就好了?</p>
<span id="more"></span>
<p>修改代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(dataType)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>結果呈現</p>
<img src="/2021/10/22/frontend-react-017-currying/01.png" class="" title="wrong">
<p>可以看出當頁面載入時，React 就會呼叫<code>this.saveFormData(&#39;username&#39;)</code>和<code>this.saveFormData(&#39;password&#39;)</code>分別在 console 輸出字串 username 和 password．<br>當有用戶名輸入框有改變時，因為 onChange 被設為函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值，該返回值就是 undefine，所以 React 根本不會去呼叫，則 console 就不會有任何輸出．<br>所以想法就是如果函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值也是函數，這樣當輸入框有變化時，React 不就可以呼叫了嗎? 依據此想法修改了代碼如下 :<br><font color="#FF0000">注意 :</font><br>當要取用變數值當成 key 值時，變數要用 [ ] 包含，如 : <code>&#123;[dataType]:event.target.value&#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>我們將 onChange 設為函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值，該返回值是一個函數，其代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(event) =&gt; &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以當輸入框有變化時，React 就會呼叫上面這個函數並把 event 放到參數中，後續就可以取值<br>輸出結果 :</p>
<img src="/2021/10/22/frontend-react-017-currying/02.png" class="" title="correct">

<h1 id="高階函數"><a href="#高階函數" class="headerlink" title="高階函數"></a>高階函數</h1><p>符合以下兩者條件之一稱為之 :</p>
<ol>
<li>該函數的參數之一是接收函數</li>
<li>該函數的返回值是一個函數</li>
</ol>
<p>而柯里化 (Currying) 就是通過函數調用，返回一個函數後又被調用，經過一連串的調用與參數接收後，最後統一處理結果，如下代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由 React 頁面初始化時呼叫一次並返回函數，當輸入框變化時又呼叫返回函數，並且進行統一處理呼叫過程中接收的參數．</p>
<h1 id="不用柯里化"><a href="#不用柯里化" class="headerlink" title="不用柯里化"></a>不用柯里化</h1><p>直接給 onChange 一個函數，該函數主體中會再呼另一個函數處理資料，代碼如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType, event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;, event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;, event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>用與不用柯里化都沒什麼差別，都是有人在使用的．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Currying</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 018 為什麼需要組件生命週期</title>
    <url>/2021/10/23/frontend-react-018-why-need-life-cycle/</url>
    <content><![CDATA[<p>考慮一個場景就是要在頁面上顯示一個計數器的數值，當頁面顯示在瀏覽器時，計數器就以每秒加一的方式開始計數，還有一個移除按鈕會將該計數器停止並把頁面上所有元件移除。<br>首先先完成頁面元件的顯示，代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>頁面顯示如下 :</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/01.png" class="" title="init">
<span id="more"></span>
<p>接著先考慮如何移除計數器，ReactDom 提供了一個 API <code>unmountComponentAtNode()</code>用來卸載組件，<br>代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">    ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後寫一個定時器<code>setInterval()</code>每隔一秒就累加一，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><code>this.setState(&#123;count:count&#125;)</code>當 key 的名稱與變數名稱相同時，可以簡寫為<code>this.setState(&#123;count&#125;)</code><br>結果會看到計數器的值不會是每秒累加一，這是因為每次呼叫 <code>setState()</code>後就會呼叫一次<code>render()</code>，而呼叫一次<code>render()</code>就會創建一個定時器，所以到最後創建多個定時器同時對 state 進行更新。</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/02.png" class="" title="begin">
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/03.png" class="" title="next">

<p>所以希望 React 可以在一個時間點，即在頁面掛載時，調用一次設定定時器的函數。<br>React 提供一個回調函數<code>componentDidMount()</code>，在頁面掛載完成後進行呼叫．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/04.png" class="" title="ok">
<p>一切如設計的，定時器只會被呼叫一次，每一秒累加一，但是當我們按下移除按鈕時，出現錯誤如下 :</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/05.png" class="" title="when click button">
<p>這是因為組件被移除了，但是定時器卻沒有關閉，所以我們在按下移除按鈕時要把定時器給關了．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/06.png" class="" title="done">

<p>另外 React 也提供另一個時間點，就是當頁面將要被移除前會先調用該函數<code>componentWillUnmount()</code><br>所以代碼可以寫成 : </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>這兩種寫法都是可以的．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 019 組件的生命週期(舊)-掛載</title>
    <url>/2021/10/23/frontend-react-019-mount-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-019-mount-life-cycle/01.png" class="" title="life cycle">
<p>首先先演示第一種當組件掛載到頁面時的生命週期</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要掛載前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-019-mount-life-cycle/02.png" class="" title="mount life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 020 組件的生命週期(舊)-狀態更新</title>
    <url>/2021/10/23/frontend-react-020-state-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-020-state-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第二種，當組件的狀態有更新時的生命週期，當按下計數增加的按鈕後會觸發<code>setState()</code>進行組件更新。</p>
<span id="more"></span>
<p><font color="#FF0000">注意 :</font><code>shouldComponentUpdate()</code>用來檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</span></span><br><span class="line">        <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - shouldComponentUpdate&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>強制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-020-state-update-life-cycle/02.png" class="" title="state update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 021 組件的生命週期(舊)-父組件 render 更新</title>
    <url>/2021/10/23/frontend-react-021-parent-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-021-parent-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第三種，當父組件更新時會呼叫<code>render()</code>，而子組件也會一併進行更新，在此觀察子組件的更新生命週期，當按下父組件的換CPU按鈕時，會觸發<code>setState()</code>更改狀態，進而進行更新，並且也會使得子組件接收到新的 props，也會呼叫更新．</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">cpu</span>:<span class="string">&#x27;AMD&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">        changeCpu = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">cpu</span>:<span class="string">&#x27;Intel&#x27;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>電腦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCpu&#125;</span>&gt;</span>換CPU<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Cpu</span> <span class="attr">cpu</span>=<span class="string">&#123;this.state.cpu&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Cpu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 接收到新的 props 時</span></span><br><span class="line">        <span class="function"><span class="title">componentWillReceiveProps</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentWillReceiveProps&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</span></span><br><span class="line">        <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - shouldComponentUpdate&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>CPU: &#123;this.props.cpu&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Computer</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>```</p>
<img src="/2021/10/23/frontend-react-021-parent-update-life-cycle/02.png" class="" title="parent update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 022 組件的生命週期(舊)-強制更新</title>
    <url>/2021/10/23/frontend-react-022-force-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-022-force-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第四種，當按下強制更新按鈕時就會直接呼叫<code>forceUpdate()</code>進行更新。</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        force = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.forceUpdate()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>強制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-022-force-update-life-cycle/02.png" class="" title="force update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 023 新版組件生命週期簡介</title>
    <url>/2021/10/24/frontend-react-023-new-life-cycle1/</url>
    <content><![CDATA[<p>自從 React 17.0 版本之後將要逐漸廢除底下三個 API :</p>
<ol>
<li>componentWillMount</li>
<li>componentWillReceiveProps</li>
<li>componentWillUpdate<img src="/2021/10/24/frontend-react-023-new-life-cycle1/01.png" class="" title="deprecated">
<span id="more"></span>
若是使用的話會出現底下警告 :<img src="/2021/10/24/frontend-react-023-new-life-cycle1/02.png" class="" title="warning">
新版的生命週期如下 :<img src="/2021/10/24/frontend-react-023-new-life-cycle1/03.png" class="" title="new life cycle">
新增了兩個 API :</li>
</ol>
<ul>
<li>getDerivedStateFromProps</li>
<li>getSnapshotBeforeUpdate</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 024 新版組件生命週期-getDerivedStateFromProps</title>
    <url>/2021/10/24/frontend-react-024-new-life-cycle2/</url>
    <content><![CDATA[<p>新版本組件生命週期 :</p>
<img src="/2021/10/24/frontend-react-024-new-life-cycle2/01.png" class="" title="new life cycle">
<p>本篇文章將會介紹新的 API : <code>getDerivedStateFromProps()</code></p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 極為罕用，只有當 state 的值總是取決於 props 時才使用，</span></span><br><span class="line">        <span class="comment">// 一經使用後，就無法使用 state 進行更新</span></span><br><span class="line">        <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromProps</span>(<span class="params">props, state</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - getDerivedStateFromProps&#x27;</span>, props, state)</span><br><span class="line">            <span class="keyword">return</span> props</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">count</span>=<span class="string">&#123;199&#125;/</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>此 API 極為罕用，只有當 state 的值總是取決於 props 時才使用，<font color="#FF0000">一經使用後，就無法使用 state 進行更新</font>，所以一掛載組件後就直接被設為 props 的值，而且後續按計數增加按鈕也不會更新計數</p>
<img src="/2021/10/24/frontend-react-024-new-life-cycle2/02.png" class="" title="result">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 025 新版組件生命週期-getSnapshotBeforeUpdate</title>
    <url>/2021/10/24/frontend-react-025-new-life-cycle3/</url>
    <content><![CDATA[<p>新版本組件生命週期 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/01.png" class="" title="new life cycle">
<p>本篇文章將會介紹新的 API : <code>getSnapshotBeforeUpdate()</code></p>
<span id="more"></span>
<p>假設場景是要寫一個可閱讀推播訊息的應用，該應用的推播訊息會一直發送(假設每秒發送一則)，而最新的消息要放在清單最上面．<br>客戶可以透過訊息列表一一查看訊息，一次只可見五條訊息，其餘的訊息則需透過捲軸瀏覽，但是客戶如果不滾動捲軸的話則當前看到的訊息不會滾動．<br>就是沒有使用<code>getSnapshotBeforeUpdate()</code>時的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MessageList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">messageArr</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 獲取元狀態</span></span><br><span class="line">                <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                <span class="comment">// 模擬取得一條訊息</span></span><br><span class="line">                <span class="keyword">const</span> message = <span class="string">&#x27;訊息&#x27;</span> + (messageArr.length + <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 更新狀態</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;<span class="attr">messageArr</span>:[message, ...messageArr]&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.messageArr.map((message, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MessageList</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>比如說這一秒使用者看到[訊息9]，下一秒[訊息10]進來，若使用者沒有捲動時，應該要維持[訊息9]在最頂．<br>這一秒使用者看到[訊息9] :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/02.png" class="" title="message 9">
<p>下一秒[訊息10]進來 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/03.png" class="" title="message 10">

<p>所以要達到這樣維持不變的話，就必須在新訊息進來後，在更新訊息清單之前先記錄一下目前捲軸的高度，在更新完清單後，調整捲軸頂部位置，所以我們可以在<code>getSnapshotBeforeUpdate()</code>紀錄(快照)一下<code>scrollHeight</code>，而在<code>componentDidUpdate()</code>取出快照後調整<code>scrollTop</code><br>完整代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MessageList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">messageArr</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 獲取元狀態</span></span><br><span class="line">                <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                <span class="comment">// 模擬取得一條訊息</span></span><br><span class="line">                <span class="keyword">const</span> message = <span class="string">&#x27;訊息&#x27;</span> + (messageArr.length + <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 更新狀態</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;<span class="attr">messageArr</span>:[message, ...messageArr]&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可建立快照供 componentDidUpdate() 使用</span></span><br><span class="line">        <span class="function"><span class="title">getSnapshotBeforeUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.refs.list.scrollHeight</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可由第三個參數取得快照資訊</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState, height</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.refs.list.scrollTop += <span class="built_in">this</span>.refs.list.scrollHeight - height</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.messageArr.map((message, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MessageList</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注意 :<br><code>componentDidUpdate(prevProps, prevState, snapshot)</code>此 API 可以傳入三個參數，<br>第一個<code>prevProps</code>是前次的 props 值<br>第二個<code>prevState</code>是前次的 state 值<br>第三個<code>snapshot</code>是<code>getSnapshotBeforeUpdate()</code>的返回值<br>這一秒使用者看到[訊息9] :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/02.png" class="" title="message 9">
<p>之後新訊息進來，還是維持[訊息9]在頂部 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/04.png" class="" title="new message">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 026 Diffing 演算法與 key 的作用</title>
    <url>/2021/10/24/frontend-react-026-diffing-key/</url>
    <content><![CDATA[<p>Diffing 演算法是 React 用來比較新舊虛擬 DOM 之間是否有差異，而 React 只會針對有不同的標籤進行頁面更新．而比較的方式就是透過標籤上的 key 屬性進行第一次比對，若是相等則繼續看其內容是否也一樣，否則當作不一樣．<br>詳細說明一下動作流程 :<br>&emsp;&emsp;當 state 中的數據發生改變時，React 會根據新的 state 產生『新虛擬 DOM』，隨後透過 Diffing 演算法進行『新虛擬 DOM』和『舊虛擬 DOM』的比較．<br>比較的規則如下 :<br>&emsp;&emsp;依序拿『新虛擬 DOM』的標籤中的 key 值，到『舊虛擬 DOM』中尋找是否有相同的 key 值:<br>&emsp;&emsp;&emsp;&emsp;(1) 若有找到相同者 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;進行虛擬 DOM 內容比較 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;(1) 若相同，直接使用之前的真實 DOM<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;(2) 不相同，生成新的真實 DOM 替換掉之前的<br>&emsp;&emsp;&emsp;&emsp;(2) 沒有者到相同者 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;生成新的真實 DOM<br>因為標籤是有套嵌的，所以要一直遞迴地往下比較．</p>
<span id="more"></span>
<p>分析一下底下代碼，一個是以 index 作為 key，另一個是以 id 作為 key :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;steven&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;amy&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.name.value)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.age.value)</span><br><span class="line">            <span class="keyword">const</span> &#123;persons&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">const</span> person = &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="built_in">this</span>.refs.name.value, <span class="attr">age</span>:<span class="built_in">this</span>.refs.age.value&#125;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">persons</span>:[person, ...persons]&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    新增人員: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    年齡: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人員列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 index 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 id 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/24/frontend-react-026-diffing-key/01.png" class="">
<p>此時若新增人員後會變成</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/02.png" class="">
<p>中間兩者發生哪些動作？</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/03.png" class="">
<p>由上圖的分析結果發現，<br>使用 index 作為 key 的會生成 3 次新的真實 DOM，<br>而使用 id 作為 key 的只會生成 1 次新的真實 DOM．<br>所以資料若採用逆序添加、逆序刪除等會破壞原本順序的操作時，<br>以 index 作為 key 的就需要新生成較多的真實 DOM，進而影響效能．</p>
<h1 id="另一個議題"><a href="#另一個議題" class="headerlink" title="另一個議題"></a>另一個議題</h1><p>另外當展示結構中有輸入類時，考慮底下的代碼，每筆展示資料後面都有一個輸入框 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;steven&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;amy&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.name.value)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.age.value)</span><br><span class="line">            <span class="keyword">const</span> &#123;persons&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">const</span> person = &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="built_in">this</span>.refs.name.value, <span class="attr">age</span>:<span class="built_in">this</span>.refs.age.value&#125;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">persons</span>:[person, ...persons]&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    新增人員: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    年齡: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人員列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 index 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 id 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>顯示結果 :</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/04.png" class="">
<p>此時若先在輸入框中輸入一些訊息後，在新增人員時．發現以 index 作為 key 的會發生錯亂</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/05.png" class="">
<p>分析姐果如下，最主要的原因就是新舊混用錯位 :</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/06.png" class="">

<p>所以用 index 作為 key 時可能有以下的問題 :</p>
<ol>
<li>若有破壞順序的操作時，會產生效能低下問題</li>
<li>若結構中有輸入類時，會導致產生錯誤的 DOM，頁面顯示出問題．<br>所以一般以 index 作為 key，只用於資料不變更的展示用</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Diffing</tag>
        <tag>Key</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 027 使用 create-react-app 搭建 React 與目錄說明</title>
    <url>/2021/10/29/frontend-react-027-create-react-app/</url>
    <content><![CDATA[<h1 id="使用-create-react-app-搭建專案"><a href="#使用-create-react-app-搭建專案" class="headerlink" title="使用 create-react-app 搭建專案"></a>使用 create-react-app 搭建專案</h1><ul>
<li>使用 npm 安裝 create-react-app :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g create-react-app</span><br></pre></td></tr></table></figure>
<img src="/2021/10/29/frontend-react-027-create-react-app/01.png" class="">
<span id="more"></span></li>
<li>建立專案<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ create-react-app hello_react</span><br></pre></td></tr></table></figure>
當出現以下訊息時，則表示創建成功 :<img src="/2021/10/29/frontend-react-027-create-react-app/02.png" class=""></li>
<li>啟動專案<br>使用以下命令啟動 react :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hello_react</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure>
等到底下訊息出現時，會在 port 3000 起一個伺服器 :<img src="/2021/10/29/frontend-react-027-create-react-app/03.png" class="">
然後會自動幫你打開瀏覽器，顯示一個頁面如下 :<img src="/2021/10/29/frontend-react-027-create-react-app/04.png" class=""></li>
</ul>
<h1 id="檔案及目錄說明"><a href="#檔案及目錄說明" class="headerlink" title="檔案及目錄說明"></a>檔案及目錄說明</h1><img src="/2021/10/29/frontend-react-027-create-react-app/05.png" class="">
<ul>
<li>public : 靜態資源文件目錄<br>&emsp;&emsp;favicon.icon : 網站頁籤圖示<br>&emsp;&emsp;index.html : 主頁面, react 默認檔名不可以變更<br>&emsp;&emsp;logo192.png : logo 圖示, app 使用<br>&emsp;&emsp;logo512.png : logo 圖示, app 使用<br>&emsp;&emsp;manifest.json : 應用加殼的配置文件, app 使用<br>&emsp;&emsp;robots.txt : 爬蟲協議文件</li>
<li>scr : 代碼目錄<br>&emsp;&emsp;App.css : App 組件樣式檔<br>&emsp;&emsp;App.js : App 組件檔<br>&emsp;&emsp;App.test.js : 用於 App 組件測試用<br>&emsp;&emsp;index.css : 主頁面樣式檔<br>&emsp;&emsp;index.js : 入口文件<br>&emsp;&emsp;logo.svg : 主頁面中間的 logo 圖<br>&emsp;&emsp;reportWebVitals.js : 頁面性能分析文件, 需搭配 web-vitals 庫</li>
</ul>
<h1 id="一個最簡單的範例"><a href="#一個最簡單的範例" class="headerlink" title="一個最簡單的範例"></a>一個最簡單的範例</h1><p>將一些開發手機端才需要用到的東西刪除，則會只剩下 :</p>
<img src="/2021/10/29/frontend-react-027-create-react-app/06.png" class="">
<ul>
<li>index.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>App.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                Hello, react!</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure></li>
<li>index.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 react 核心庫</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入 react-dom 庫</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App 組件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 App 到頁面上</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="最後調整優化"><a href="#最後調整優化" class="headerlink" title="最後調整優化"></a>最後調整優化</h1><img src="/2021/10/29/frontend-react-027-create-react-app/07.png" class="">
<p>建立一個 components 目錄，用來收納組件，將 App.js 中的 <code>Hello, react!</code> 提取為一個 Component 放在 components 下的 Hello 目錄中，並且寫一個樣式檔 Hello.css<br>Hello.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Hello.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>Hello, react!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;./components/Hello/Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而關於組件的副檔名 js 也都改成副檔名為 jsx，所以原本應該取名為 Hello.js 的組件，改取名為 Hello.jsx</p>
<h1 id="另一種目錄結構"><a href="#另一種目錄結構" class="headerlink" title="另一種目錄結構"></a>另一種目錄結構</h1>
<p>將是將 Hello 組件內原本命名為 Hello.jsx 改為 index.jsx，Hello.css 改為 index.css，這樣的話，原本在 App.jsx 中的<code>import Hello from &#39;./components/Hello/Hello&#39;</code>就只會變成<code>import Hello from &#39;./components/Hello&#39;</code>，看起來相對清爽．</p>
<ul>
<li>scr/App.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;./components/Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>src/components/Hello/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>Hello, react!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li>
<li>src/components/Hello/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="vs-code-套件"><a href="#vs-code-套件" class="headerlink" title="vs code 套件"></a>vs code 套件</h1><img src="/2021/10/29/frontend-react-027-create-react-app/09.png" class="">
<p><code>ES7 React/Redux/GraphQL/React-Native snippets</code> 是一個 vs code 的延伸套件，只要在新增檔案中輸入<code>rcc</code>或<code>rfc</code>後按下 Enter 就會自動生成代碼模塊，還有一些實用的代碼提示．</p>
<img src="/2021/10/29/frontend-react-027-create-react-app/10.png" class="">
<img src="/2021/10/29/frontend-react-027-create-react-app/11.png" class="">
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>create-react-app</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - axios 學習 - 001 Promise based 的 HTTP 請求工具</title>
    <url>/2021/11/08/frontend-axios-001-basic-usage/</url>
    <content><![CDATA[<p>axios 是一個輕量級的 ajax 請求工具，是基於 Promise 開發而成的。在一些非 JQuery 的框架中，如 : React、VUE … 等，是一個非常好的工具。</p>
<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>因為需要與後端伺服器互動，所以我們先需要準備一個模擬伺服器，讓我們傳送 hTTP 請求時，可以傳回一些假資料讓我們互動測試，所以我們使用 Json Server。<br><a href="https://github.com/typicode/json-server">Json Server</a></p>
<span id="more"></span>
<ul>
<li>安裝方式<br>在一個工作目錄中，輸入底下命令安裝 :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g json-server</span><br></pre></td></tr></table></figure>
<img src="/2021/11/08/frontend-axios-001-basic-usage/01.png" class=""></li>
<li>建立模擬資料<br>在該工作目錄中，建立一個 db.json 其內容如下 :<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;posts&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;json-server&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;typicode&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;comments&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;some comment&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;postId&quot;</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;profile&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;typicode&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>啟動 json server<br>在該工作目錄下，輸入底下命令啟動 :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server --watch db.json</span><br></pre></td></tr></table></figure>
<img src="/2021/11/08/frontend-axios-001-basic-usage/02.png" class=""></li>
<li>驗證<br>在瀏覽器中輸入 <a href="http://localhost:3000/posts">http://localhost:3000/posts</a><img src="/2021/11/08/frontend-axios-001-basic-usage/03.png" class=""></li>
</ul>
<h1 id="axios-基本用法介紹"><a href="#axios-基本用法介紹" class="headerlink" title="axios 基本用法介紹"></a>axios 基本用法介紹</h1><ul>
<li>安裝方式<br>如果是在項目中使用的話，建議用安裝的方式 :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure>
現在我們只是要試玩，所以用 CDN 方式是最方便的，其方式在 html 中嵌入底下程式嗎 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
另外準備一個網頁上有四個按鈕分別發送 GET、POST、PUT 及 DELETE 請求，以供我們測試 axios。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>axios 基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>基本使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送 GET 請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送 POST 請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送 PUT 請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送 DELETE 請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
網頁呈現如下 :<img src="/2021/11/08/frontend-axios-001-basic-usage/04.png" class=""></li>
</ul>
<ol>
<li>使用方式一 - 使用 axios()<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 獲取全部按鈕</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 GET 請求</span></span><br><span class="line">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,  <span class="comment">// 請求類型</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>,  <span class="comment">// 請求路徑</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 POST 請求</span></span><br><span class="line">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,  <span class="comment">// 請求類型</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,  <span class="comment">// 請求路徑</span></span><br><span class="line">            <span class="comment">// 設置請求體</span></span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;Axios 基本請求使用&quot;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&quot;Steven&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 PUT 請求</span></span><br><span class="line">    btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,  <span class="comment">// 請求類型</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,  <span class="comment">// 請求路徑</span></span><br><span class="line">            <span class="comment">// 設置請求體</span></span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;基本資料處理&quot;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&quot;Amy&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 DELETE 請求</span></span><br><span class="line">    btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,  <span class="comment">// 請求類型</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,  <span class="comment">// 請求路徑</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li>使用方式二 - aliases<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 獲取全部按鈕</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 GET 請求</span></span><br><span class="line">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios.get(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span></span><br><span class="line">            ).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123; </span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 POST 請求</span></span><br><span class="line">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios.post(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>, </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;Axios 基本請求使用&quot;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&quot;Steven&quot;</span></span><br><span class="line">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 PUT 請求</span></span><br><span class="line">    btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios.put(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;基本資料處理&quot;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&quot;Amy&quot;</span></span><br><span class="line">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 DELETE 請求</span></span><br><span class="line">    btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios.delete(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span></span><br><span class="line">            ).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li>使用方式三 - 創建實例對象<br>適用場景會是在需要對兩個不同請求位置發送 AJAX 請求。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="comment">// 第一個 axios 實例</span></span><br><span class="line">    <span class="keyword">const</span> axiosObj = axios.create(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 第二個 axios 實例，設定對另一個路徑發送請求</span></span><br><span class="line">    <span class="keyword">const</span> otherObj = axios.create(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:3000&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 呼叫方式一</span></span><br><span class="line">    axiosObj(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/comments/1&#x27;</span>,</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 呼叫方式二</span></span><br><span class="line">    otherObj.get(<span class="string">&#x27;/posts/1&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>Request Config<br>一些重要的配置項，詳細的請參考<a href="https://github.com/axios/axios#request-config">axios</a><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: &#x27;/posts/<span class="number">1</span>&#x27;,  <span class="comment">// 請求路徑，常用</span></span><br><span class="line">  method: &#x27;get&#x27;,  <span class="comment">// 請求類型，常用</span></span><br><span class="line">  baseURL: &#x27;http:<span class="comment">//localhost:3000&#x27;,  // 請求的基礎路徑，常用</span></span><br><span class="line">  transformRequest: [function (data, headers) &#123;  <span class="comment">// 先對請求的數據做處理，處理後再對服務器發送</span></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line">  transformResponse: [function (data) &#123;  <span class="comment">// 對響應的結果做處理，處理完再用自定義的回調函數處理</span></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line">  headers: &#123;&#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;&#125;,  <span class="comment">// 對請求頭訊息進行配置，常用</span></span><br><span class="line">  params: &#123;  <span class="comment">// 設定 URL 上的參數, ex: http://localhost/posts?ID=12345，常用</span></span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line">  paramsSerializer: function (params) &#123;  </span><br><span class="line">    <span class="comment">// 對請求的參數定義序列化字串，ex: http://localhost/posts?ID=12345 可自定義改成 http://localhost/posts/ID/12345</span></span><br><span class="line">    return Qs.stringify(params, &#123;arrayFormat: &#x27;brackets&#x27;&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;  <span class="comment">// 將參數放置在請求體(request body)中，常用</span></span><br><span class="line">    firstName: &#x27;Fred&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;,  <span class="comment">// 將參數放在 URL 上進行傳送，常用</span></span><br><span class="line">  timeout: <span class="number">1000</span>, <span class="comment">// 設定請求超時，常用</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// 設定跨域請求時是否攜帶 cookie</span></span><br><span class="line">  responseType: &#x27;json&#x27;, <span class="comment">// 設定響應資料格式</span></span><br><span class="line">  responseEncoding: &#x27;utf8&#x27;, <span class="comment">// 設定響應資料編碼格式</span></span><br><span class="line">  xsrfCookieName: &#x27;XSRF-TOKEN&#x27;, <span class="comment">// 跨域時的 cookie 名稱</span></span><br><span class="line">  xsrfHeaderName: &#x27;X-XSRF-TOKEN&#x27;, <span class="comment">// 跨域時的頭訊息名稱</span></span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;  <span class="comment">// 上傳時進行回調</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;  <span class="comment">// 下載時進行回調</span></span><br><span class="line">  &#125;,</span><br><span class="line">  validateStatus: function (status) &#123;  <span class="comment">// 設定響應成功的條件</span></span><br><span class="line">    return status &gt;= 200 &amp;&amp; status &lt; 300;</span><br><span class="line">  &#125;,</span><br><span class="line">  httpAgent: new http.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),  <span class="comment">// keepAlive 設定 </span></span><br><span class="line">  httpsAgent: new https.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),  <span class="comment">// keepAlive 設定 </span></span><br><span class="line">  cancelToken: new CancelToken(function (cancel) &#123;  <span class="comment">// 設定取消請求</span></span><br><span class="line">  &#125;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>改變預設值的方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    axios.defaults.method = <span class="string">&#x27;GET&#x27;</span>;  <span class="comment">//設置預設請求類型為 GET</span></span><br><span class="line">    axios.defaults.baseURL = <span class="string">&#x27;http://localhost:3000&#x27;</span>; <span class="comment">// 設置預設基礎 URL</span></span><br><span class="line">    axios.defaults.timeout = <span class="number">3000</span>;  <span class="comment">// 設置超時時間</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>Axios</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
        <tag>Json Server</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - axios 學習 - 002 取消請求和攔截器的使用</title>
    <url>/2021/11/09/frontend-axios-002-request-cancel-interceptor/</url>
    <content><![CDATA[<h1 id="取消請求"><a href="#取消請求" class="headerlink" title="取消請求"></a>取消請求</h1><p>首先使用<code>new axios.CancelToken()</code>讓一個全局變數<code>cancel</code>接收取消函數，並將其返回值設定給<code>axios()</code>中的<code>cancelToken</code>屬性。<br>當需要取消請求時，可以藉由全局變數<code>cancel</code>取消。</p>
<span id="more"></span>
<p>底下為完整的程式碼:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>axios 請求取消<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>axios 請求取消<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>取消請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 聲明一個全局變量用來放取消請求的回調函數</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 發送請求</span></span></span><br><span class="line"><span class="javascript">            btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 檢查上次發送的請求是否已經響應完成</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(cancel !== <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 取消上次的請求</span></span></span><br><span class="line"><span class="javascript">                    cancel();</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 創建 cancelToken，讓 axios 調用設定取消函數給 cancel</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> cancelToken = <span class="keyword">new</span> axios.CancelToken(</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        cancel = c;</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                axios(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 添加配置對象的 cancelToken 屬性</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">cancelToken</span>: cancelToken</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 響應完成後將 cancel 全局變數設為 null，以便讓我們辨別是否可以調用取消</span></span></span><br><span class="line"><span class="javascript">                    cancel = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 發送取消請求</span></span></span><br><span class="line"><span class="javascript">            btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                cancel();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="攔截器"><a href="#攔截器" class="headerlink" title="攔截器"></a>攔截器</h1><p>分為兩大類 : </p>
<ol>
<li>請求攔截器 : 用來在發送前對資料做檢查，如果檢查不過就不發送請求。使用<code>axios.interceptors.request.use()</code>設定。</li>
<li>響應攔截器 : 用來對響應數據做檢查，如果檢查不過就不回調使用者定義的處理函數。<code>axios.interceptors.response.use()</code>設定。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>攔截器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 設置請求攔截器</span></span></span><br><span class="line"><span class="javascript">            axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;1號 - 請求攔截器_請求訊息檢驗成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 模擬檢驗失敗</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> <span class="string">&#x27;參數異常&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> config;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;1號 - 請求攔截器_請求訊息檢驗失敗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;2號 - 請求攔截器_請求訊息檢驗成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> config;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;2號 - 請求攔截器_請求訊息檢驗失敗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 設置響應攔截器</span></span></span><br><span class="line"><span class="javascript">            axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;1號 - 響應攔截器_請求訊息檢驗成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> response;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;1號 - 響應攔截器_請求訊息檢驗失敗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;2號 - 響應攔截器_請求訊息檢驗成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> response;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;2號 - 響應攔截器_請求訊息檢驗失敗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 發送請求</span></span></span><br><span class="line"><span class="javascript">            axios(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
控制台輸出結果如下 :<img src="/2021/11/09/frontend-axios-002-request-cancel-interceptor/01.png" class="">
<font color="#FF0000">注意 :</font> 請求攔截器的書寫順序與執行順序相反。</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>Axios</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Tip - Java Annotation processing is not supported for module cycles.</title>
    <url>/2021/11/11/tip-maven-module-cycles/</url>
    <content><![CDATA[<h1 id="Java-Annotation-processing-is-not-supported-for-module-cycles"><a href="#Java-Annotation-processing-is-not-supported-for-module-cycles" class="headerlink" title="Java: Annotation processing is not supported for module cycles."></a>Java: Annotation processing is not supported for module cycles.</h1><p>這是因為 Maven Module 中出現依賴循環問題，可以用以下方式檢查並解決。</p>
<h1 id="檢查方式"><a href="#檢查方式" class="headerlink" title="檢查方式"></a>檢查方式</h1><p>點選【Analyze】下的【Module Dependencies…】打開模組相依視窗。</p>
<span id="more"></span>
<img src="/2021/11/11/tip-maven-module-cycles/01.png" class="" title="01.png">
<p>依據需求挑選要檢驗的範圍。</p>
<img src="/2021/11/11/tip-maven-module-cycles/02.png" class="" title="02.png">
<p>之後可以在右上角的地方看到每個模組各是相依那些模組，此時可以看到兩個紅色的模組，這兩個模組就是有問題的地方。</p>
<img src="/2021/11/11/tip-maven-module-cycles/03.png" class="" title="03.png">
<p>我們將他們展開來看一下，就可以知道互為依賴。</p>
<img src="/2021/11/11/tip-maven-module-cycles/04.png" class="" title="04.png">

<h1 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h1><p>在專案上按下滑鼠右鍵後選擇【Open Module Settings】</p>
<img src="/2021/11/11/tip-maven-module-cycles/05.png" class="" title="05.png">
<p>此時會打開 Project Structure 視窗</p>
<img src="/2021/11/11/tip-maven-module-cycles/06.png" class="" title="06.png">
<p>選擇第一個模組<code>abstract_factory</code>，在右邊視窗可以看到他相依第二個模組<code>builder</code>。</p>
<img src="/2021/11/11/tip-maven-module-cycles/07.png" class="" title="07.png">
<p>而選擇第二個模組<code>builder</code>，在右邊視窗可以看到他相依第一個模組<code>abstract_factory</code>。</p>
<img src="/2021/11/11/tip-maven-module-cycles/08.png" class="" title="08.png">
<p>這邊就是他們循環相依的問題所在。<br>我們選擇第一個模組<code>abstract_factory</code>，將他相依的模組<code>builder</code>移除。</p>
<img src="/2021/11/11/tip-maven-module-cycles/09.png" class="" title="09.png">
<p>同理，選擇第二個模組<code>builder</code>，將他相依的模組<code>abstract_factory</code>移除。</p>
<img src="/2021/11/11/tip-maven-module-cycles/10.png" class="" title="10.png">
<p>此時就沒有循環相依問題，就可以順利執行程式。</p>
]]></content>
      <categories>
        <category>Tip</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Intellij</tag>
      </tags>
  </entry>
  <entry>
    <title>Tip - &#39;react-scripts&#39; 不是內部或外部命令、可執行的程式或批次檔。</title>
    <url>/2021/11/11/tip-react-scripts-is-not-a-Command/</url>
    <content><![CDATA[<p>當我們由 Git 庫下載 React 源碼後，第一次啟動<code>npm start</code>會發現以下錯誤 :</p>
<img src="/2021/11/11/tip-react-scripts-is-not-a-Command/01.png" class="">
<span id="more"></span>
<p>這是因為一般上傳 React 專案時，是不會連該專案所安裝的模組 (下圖黃色框部分) 都上傳，而只是上傳該專案所用的模組設定檔(<code>package.json</code>下圖紅色框部分)，所以我們需要在重新安裝一下。</p>
<img src="/2021/11/11/tip-react-scripts-is-not-a-Command/02.png" class="">
<p>解決方式 : 在終端機上輸入<code>npm install</code>進行安裝。</p>
<img src="/2021/11/11/tip-react-scripts-is-not-a-Command/03.png" class="">
]]></content>
      <categories>
        <category>Tip</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 029 Github Search</title>
    <url>/2021/11/14/frontend-react-029-github-search/</url>
    <content><![CDATA[<h1 id="使用-axios-對-GitHib-發起-Ajax-請求"><a href="#使用-axios-對-GitHib-發起-Ajax-請求" class="headerlink" title="使用 axios 對 GitHib 發起 Ajax 請求"></a>使用 axios 對 GitHib 發起 Ajax 請求</h1><p>若不熟悉者，請參考前篇文章【前端 - React 學習 - 028 To Do List】的實作步驟．這邊有引入<code>bootstrap.css</code>，一般這種第三方 CSS，最好的方式就是在 public 下建立一個 css 目錄統一擺放，然後在<code>index.html</code>引入．</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Github Search<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&quot;./components/Search&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>components/Search/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron-heading&quot;</span>&gt;</span>Search Github Users<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;enter the name you search&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>components/List/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>components/List/index.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.album</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">50rem</span>; <span class="comment">/* Can be removed; just added for demo purposes */</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.333%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">75rem</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.card</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">75rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.card-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">85%</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<ul>
<li><p>設定 Search 按鈕回調函數<br>components/Search/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 獲取用戶的輸入</span></span><br><span class="line">        <span class="comment">//const &#123;value&#125; = this.keyWordElement</span></span><br><span class="line">        <span class="comment">//const &#123;keyWordElement:&#123;value&#125;&#125; = this  // 連續解構賦值</span></span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;<span class="attr">value</span>:keyWord&#125;&#125; = <span class="built_in">this</span>  <span class="comment">// 連續解構賦值並重命名為 keyWord</span></span><br><span class="line">        <span class="built_in">console</span>.log(keyWord)</span><br><span class="line">        <span class="comment">// 發送網路請求</span></span><br><span class="line">        axios.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).then(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>, response.data)&#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;失敗&#x27;</span>, error)&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron-heading&quot;</span>&gt;</span>Search Github Users<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.keyWordElement = c&#125; type=&quot;text&quot; placeholder=&quot;enter the name you search&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.search&#125;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>將搜索出的資料透過父組件 App 傳遞給子組件 List<br>在 App.jsx 中初始化狀態，設定回呼函數給 Search 組件更新狀態，並透過 props 傳遞給 List 組件．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&quot;./components/Search&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">users</span>:[]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveUsers = <span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;users&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;users&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Search</span> <span class="attr">saveUsers</span>=<span class="string">&#123;this.saveUsers&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">users</span>=<span class="string">&#123;users&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Search 組件中取得 GitHub 資料後進行呼叫<code>saveUsers()</code>將資料儲存到 App 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        axios.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).then(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>, response.data)</span><br><span class="line">                <span class="built_in">this</span>.props.saveUsers(response.data.items)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;失敗&#x27;</span>, error)&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最後將資料傳遞給 List 組件做展示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    this.props.users.map((userObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return (</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;userObj.id&#125;</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&#123;userObj.html_url&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&#123;userObj.avatar_url&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        )</span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>結果呈現 ：</p>
<img src="/2021/11/14/frontend-react-029-github-search/01.png" class="" title="01.png"></li>
<li><p>完善List 組件<br>List 組件除了要顯示查詢出的使用者之外，還要在不同的情況下顯示提示訊息，如 : 初次進入的提示訊息、查詢中的提示及錯誤提示…等．所以我們在 App.jsx 的<code>state</code>中新增加<code>isFirst</code>欄位用於記錄是否是初次進入，<code>isLoading</code>欄位用於識別是否處於加載中，而<code>err</code>用於記錄錯誤訊息．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">users</span>:[],  <span class="comment">// 儲存查詢出的使用者資訊</span></span><br><span class="line">    <span class="attr">isFirst</span>: <span class="literal">true</span>,  <span class="comment">// 是否第一次進入</span></span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span>,  <span class="comment">// 識別是否處於加載中</span></span><br><span class="line">    <span class="attr">err</span>: <span class="string">&#x27;&#x27;</span>  <span class="comment">// 紀錄請求錯誤訊息</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateAppState = <span class="function">(<span class="params">stateObj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(stateObj)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Search</span> <span class="attr">updateAppState</span>=<span class="string">&#123;this.updateAppState&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> &#123;<span class="attr">...this.state</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意:</font> 使用批量傳入方式(<code>&lt;List &#123;...this.state&#125;/&gt;</code>)將狀態傳給 Ｌist 組件</p>
</li>
</ul>
<p>修改 Search 組件，處理各種情境下的狀態，並使用新的回調函數<code>updateAppState</code>更新 App 的 state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 獲取用戶的輸入</span></span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;<span class="attr">value</span>:keyWord&#125;&#125; = <span class="built_in">this</span>  <span class="comment">// 連續解構賦值並重命名為 keyWord</span></span><br><span class="line">        <span class="comment">// 發送請求前更新 App 狀態</span></span><br><span class="line">        <span class="built_in">this</span>.props.updateAppState(&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>, <span class="attr">isLoading</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="comment">// 發送網路請求</span></span><br><span class="line">        axios.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).then(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 請求成功後更新 App 狀態</span></span><br><span class="line">                <span class="built_in">this</span>.props.updateAppState(&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="attr">users</span>:response.data.items&#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 請求成功後更新 App 狀態</span></span><br><span class="line">                <span class="built_in">this</span>.props.updateAppState(&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="attr">err</span>:error.message&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意:</font>在錯誤時必須是儲存 error 的 message 資訊，否則在錯誤時會出現底下畫面 :</p>
<img src="/2021/11/14/frontend-react-029-github-search/02.png" class="" title="02.png">
<p>我們想要的結果如下 :</p>
<img src="/2021/11/14/frontend-react-029-github-search/03.png" class="" title="03.png">
<p>接著依據不同情境在 List 組件顯示出不一樣的結果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;users, isFirst, isLoading, err&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    isFirst ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Enter user name to search<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="xml">                    isLoading ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="xml">                    err ? <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span>&#123;err&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="xml">                    users.map((userObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return (</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;userObj.id&#125;</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&#123;userObj.html_url&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&#123;userObj.avatar_url&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        )</span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意:</font>因為在 JSX 中不可以寫 JS 語句，只可以寫表達式，所以要用 if 語句時，就要使用三元表達式代替．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 030 使用 PubSubJS 在兄弟間傳遞訊息</title>
    <url>/2021/11/15/frontend-react-030-pass-message-use-pubsubjs/</url>
    <content><![CDATA[<h1 id="兄弟間傳遞消息"><a href="#兄弟間傳遞消息" class="headerlink" title="兄弟間傳遞消息"></a>兄弟間傳遞消息</h1><p>之前要在兄弟間傳遞訊息，都需要透過父組件幫忙傳遞，現在我們引入一個簡單的消息訂閱機制<a href="https://github.com/mroderick/PubSubJS">PubSubJS</a>來幫助我們達成兄弟間訊息的傳遞。<br>我們延續前一篇文章的專案，並引入 PubSubJS 取代之前透過父組件 App 傳送訊息。<br>安裝 PubSubJS :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install pubsub-js</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ol>
<li><p>將 App 中的 state 資訊移到真正需求的組件 List<br>App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&quot;./components/Search&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>將 state 資訊移入組件 List 並訂閱消息<br>建立訂閱時間 : 在 Component 一掛載 (<code>componentDidMount()</code>) 就訂閱消息<br>解除訂閱時間 : 在 Component 一卸載 (<code>componentWillUnmount()</code>) 就解除訂閱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">users</span>:[],  <span class="comment">// 儲存查詢出的使用者資訊</span></span><br><span class="line">        <span class="attr">isFirst</span>: <span class="literal">true</span>,  <span class="comment">// 是否第一次進入</span></span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,  <span class="comment">// 識別是否處於加載中</span></span><br><span class="line">        <span class="attr">err</span>: <span class="string">&#x27;&#x27;</span>  <span class="comment">// 紀錄請求錯誤訊息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 之後要利用此 token 解除訂閱</span></span><br><span class="line">        <span class="built_in">this</span>.token = PubSub.subscribe(<span class="string">&#x27;github_search&#x27;</span>, <span class="function">(<span class="params">msg, stateObj</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(stateObj)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 當元件卸載後就取消訂閱</span></span><br><span class="line">        PubSub.unsubscribe(<span class="built_in">this</span>.token)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;users, isFirst, isLoading, err&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            ...</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改 Search 組件，向組件 List 發送消息更新 state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 獲取用戶的輸入</span></span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;<span class="attr">value</span>:keyWord&#125;&#125; = <span class="built_in">this</span>  <span class="comment">// 連續解構賦值並重命名為 keyWord</span></span><br><span class="line">        <span class="comment">// 發送請求前更新 App 狀態</span></span><br><span class="line">        PubSub.publish(<span class="string">&#x27;github_search&#x27;</span>, &#123;<span class="attr">isFirst</span>:<span class="literal">false</span>, <span class="attr">isLoading</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="comment">// 發送網路請求</span></span><br><span class="line">        axios.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).then(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 請求成功後更新 App 狀態</span></span><br><span class="line">                PubSub.publish(<span class="string">&#x27;github_search&#x27;</span>, &#123;<span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="attr">users</span>:response.data.items&#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 請求成功後更新 App 狀態</span></span><br><span class="line">                PubSub.publish(<span class="string">&#x27;github_search&#x27;</span>, &#123;<span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="attr">err</span>:error.message&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>PubSubJS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 028 To Do List</title>
    <url>/2021/10/30/frontend-react-028-to-do-list/</url>
    <content><![CDATA[<h1 id="步驟一-靜態頁面-html"><a href="#步驟一-靜態頁面-html" class="headerlink" title="步驟一 - 靜態頁面 html"></a>步驟一 - 靜態頁面 html</h1><p>如果是初學者或是由舊有的項目轉成 react 時，先不要管組件的拆分，先把原先項目的 html 標籤都集中放在 App.jsx 中．<br>假設原先項目的 index.html 如下 :</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>To Do List App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total 2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>clear done task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就把標籤<code>&lt;body&gt;</code>下的<code>&lt;div id=&quot;root&quot;&gt;</code>內的內容全部複製到<code>App.jsx</code>中，即底下部分 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total 2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>clear done task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>進行標籤修改 : 可參考<code>前端 - React 學習 - 002 Jsx 的一些規則</code><br>&emsp;&emsp;1. 將 class 改為 className，如將<code>&lt;div class=&quot;todo-container&quot;&gt;</code>改成<code>&lt;div className=&quot;todo-container&quot;&gt;</code>．<br>&emsp;&emsp;2. 將 style 進行調整, 如將<code>&lt;button ... style=&quot;display:none&quot;&gt;</code>改成<code>&lt;button ... style=&#123;&#123;display:'none'&#125;&#125;&gt;</code>．<br>&emsp;&emsp;3. 檢查標籤閉合與否．</p>
<p>完整的 App.jsx 如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total 2</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>clear done task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>其他部分不需要複製到 index.html 中，使用原先<code>create-react-app</code>產生的 index.html．<br>靜態頁面呈現如下 :</p>
<img src="/2021/10/30/frontend-react-028-to-do-list/01.png" class="">

<h1 id="步驟二-靜態頁面樣式-css"><a href="#步驟二-靜態頁面樣式-css" class="headerlink" title="步驟二 - 靜態頁面樣式 css"></a>步驟二 - 靜態頁面樣式 css</h1><p>一樣先不拆樣式，將原先的樣式 index.css 的內容全部複製到 App.css 中．</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*base*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#da4f49</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-container</span> <span class="selector-class">.todo-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*header*/</span></span><br><span class="line"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">560px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.075</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*main*/</span></span><br><span class="line"><span class="selector-class">.todo-main</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-empty</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*item*/</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">label</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>:before &#123;</span><br><span class="line">  content: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*footer*/</span></span><br><span class="line"><span class="selector-class">.todo-footer</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>記得要在 App.jsx 中引入才有效果，<code>import &#39;./App.css&#39;</code><br>靜態頁面呈現 :</p>
<img src="/2021/10/30/frontend-react-028-to-do-list/02.png" class="">

<h1 id="步驟三-拆分組件"><a href="#步驟三-拆分組件" class="headerlink" title="步驟三 - 拆分組件"></a>步驟三 - 拆分組件</h1><p>拆分組件並沒有一定規則，只有拆得好與不好，完全吃經驗法則．<br>一般依據畫面呈現的樣子，以方形將頁面區分成一塊一塊的，區塊大小需要取適中大小．另外若是在為組件命名時，很難去定義一個清楚明確的組件名時，通常表示還可以將該組件往下拆．<br>所以我將 App.jsx 內拆分成三個區塊，所以建立三個組件<code>Header</code>、<code>List</code>及<code>Footer</code>．</p>
<ul>
<li>Header<br>src/components/Header/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure></li>
<li>List<br>src/components/List/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure></li>
<li>Footer<br>src/components/Footer/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total 2</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>clear done task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure>
最後不要忘記修改 App.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;./components/List&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&#x27;./components/Footer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
在拆分的過程中，組件 List 中的內容可以看出重複性的代碼很高，所以我把他在拆分出另一個組件 Item</li>
<li>Item<br>src/components/Item/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure>
<h1 id="步驟三-拆分-CSS"><a href="#步驟三-拆分-CSS" class="headerlink" title="步驟三 - 拆分 CSS"></a>步驟三 - 拆分 CSS</h1>如果是由舊有項目拆分，則原先的 css 有比較好的分塊，則比較好拆，若是東一塊西一塊地，則必須辛苦地把他們收集在一起．<br>index.ccs 本身寫的比較結構化，依照組件拆分</li>
<li>App<br>src/App.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*base*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#da4f49</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-container</span> <span class="selector-class">.todo-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Header<br>src/components/Header/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">560px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.075</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>List<br>src/components/List/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todo-main</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-empty</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Item<br>src/components/Item/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">label</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>:before &#123;</span><br><span class="line">    content: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Footer<br>src/components/Footer/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todo-footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="步驟四-規劃動態組件狀態"><a href="#步驟四-規劃動態組件狀態" class="headerlink" title="步驟四 - 規劃動態組件狀態"></a>步驟四 - 規劃動態組件狀態</h1><ol>
<li><p>處理 List 中的顯示數據<br>規畫一些需要動態展示的數據結構，如 List 中的 Item 每一個都有自己的任務名、完成勾選框及 id，這些數據有可能是由後端傳送過來的．<br>考量要在哪個組件的 state 綁定這些數據，如果是在 List 組件中綁定的話，則在 Header 中輸入新任務時，就要把數據往 List 組件中傳遞，這是兄弟組件之間的數據傳送；另一種就是綁定在父組件 App 中，其他子組件只需要跟父組件傳遞數據即可，這是父子組件之間的數據傳送．<br>父組件傳遞給子組件可以透過 props 傳遞．而子組件可透過函數呼叫方式傳遞數據給父組件．<br>所以我們在 App 組件中定義並初始化一個 state，其結構如下，並把該數據結構透過 props 傳給 List : </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;./components/List&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&#x27;./components/Footer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;eat&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;sleep&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;play&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>而 List 組件透過 props 取得數據，並將單一個數據傳入 Item 組件中作展示．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&#x27;../Item&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    todos.map((todo)=&gt;&#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> &#123;<span class="attr">...todo</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">此處用了<code>&#123;...todo&#125;</code>相當於<code>id=&#123;todo.id&#125; name=&#123;todo.name&#125; done=&#123;todo.done&#125;</code></font></p>
<img src="/2021/10/30/frontend-react-028-to-do-list/03.png" class=""></li>
<li><p>處理 Header 中的新增任務<br>接下來處理 Header 組件的新增任務功能，在<code>&lt;input&gt;</code>中設定 KeyUp 事件回調函數，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleKeyUp = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;keyCode, target&#125; = event</span><br><span class="line">        <span class="keyword">if</span> (keyCode !== <span class="number">13</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (target.value.trim() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;輸入不可為空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(target.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyUp</span>=<span class="string">&#123;this.handleKeyUp&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為要將子組件取得的數據傳送給父組件，所以需要在父組件 App 中定義一個回調函數<code>addToDo()</code>，然後透過 props 傳給子組件 Header 呼叫．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    addToDo = <span class="function">(<span class="params">toDoObj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 獲取原數據</span></span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="comment">// 在原數據之前添加一筆數據</span></span><br><span class="line">        <span class="keyword">const</span> newToDos = [toDoObj, ...todos]</span><br><span class="line">        <span class="comment">// 更新狀態</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>:newToDos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Header</span> <span class="attr">addToDo</span>=<span class="string">&#123;this.addToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著在子組件 Header 中呼叫回調函數將新增數據傳遞出去．<br>注意 : 此處使用<code>nanoid</code>庫幫助我們產生唯一的 id，是一種 uuid 的庫，但相對於 uuid 庫要小，但是需要手動安裝一下．</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install nanoid</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleKeyUp = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;keyCode, target&#125; = event</span><br><span class="line">        <span class="keyword">if</span> (keyCode !== <span class="number">13</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (target.value.trim() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;輸入不可為空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 準備好一個 toDoObj</span></span><br><span class="line">        <span class="keyword">const</span> toDoObj = &#123;<span class="attr">id</span>:nanoid(), <span class="attr">name</span>:target.value, <span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        <span class="comment">// 將 toDoObj 傳遞給 App 組件</span></span><br><span class="line">        <span class="built_in">this</span>.props.addToDo(toDoObj)</span><br><span class="line">        <span class="comment">// 清空輸入</span></span><br><span class="line">        target.value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>處理鼠標移入/移出 Item<br>每當鼠標移動到 Item 上時會顯示高亮，移出後則高亮消失，所以我們必須監聽 Item 鼠標移入<code>onMouseEnter</code>/移出<code>onMouseLeave</code>，並且記錄現在是移出還是移入．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleMouse = <span class="function">(<span class="params">flag</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(flag)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, done&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">onMouseEnter</span>=<span class="string">&#123;this.handleMouse(true)&#125;</span> <span class="attr">onMouseLeave</span>=<span class="string">&#123;this.handleMouse(false)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;done&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是這樣寫，則在一啟動時 react 就會呼叫<code>handleMouse</code>，如下所示 :</p>
<img src="/2021/10/30/frontend-react-028-to-do-list/04.png" class="">
<p>因為 react 一啓動發現是一個函數，就幫你呼叫函數後將返回值設給<code>onMouseEnter</code>，所以我們必須在<code>handleMouse</code>返回一個函數．詳細說明可參考<code>前端 - React 學習 - 017 高階函數與柯里化</code><br>改寫<code>handleMouse</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleMouse = <span class="function">(<span class="params">flag</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(flag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/05.png" class="">
<p>接著紀錄狀態，並依據狀態設置高亮</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">mouse</span>:<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    handleMouse = <span class="function">(<span class="params">flag</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">mouse</span>:flag&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, done&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">const</span> &#123;mouse&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundColor:</span> <span class="attr">mouse</span>?&#x27;#<span class="attr">ddd</span>&#x27;<span class="attr">:</span>&#x27;<span class="attr">white</span>&#x27;&#125;&#125; <span class="attr">onMouseEnter</span>=<span class="string">&#123;this.handleMouse(true)&#125;</span> <span class="attr">onMouseLeave</span>=<span class="string">&#123;this.handleMouse(false)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;done&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/06.png" class="">
<p>還有當鼠標移入時，<code>Delete</code>按鈕要顯示，移出後則消失，所以也需要依據鼠標狀態設定一下樣式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button className=<span class="string">&quot;btn btn-danger&quot;</span> style=&#123;&#123;<span class="attr">display</span>: mouse?<span class="string">&#x27;block&#x27;</span>:<span class="string">&#x27;none&#x27;</span>&#125;&#125;&gt;Delete&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/07.png" class=""></li>
<li><p>處理 Item 勾選狀態<br>當使用者在該 Item 打勾時，要將數據傳送到父組件 List，再透過組件 List 傳送給父組件 App 完成更新．<br>在 App.jsx 中撰寫更新狀態回調函數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 用來更新一個 todo 對象</span></span><br><span class="line">    updateToDo = <span class="function">(<span class="params">id, done</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">const</span> newTodos = todos.map(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(todoObj.id === id) &#123;</span><br><span class="line">                todoObj.done = done</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> todoObj</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>: newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Header</span> <span class="attr">addToDo</span>=<span class="string">&#123;this.addToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">updateToDo</span>=<span class="string">&#123;this.updateToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一種寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">updateToDo = <span class="function">(<span class="params">id, done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> newTodos = todos.map(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(todoObj.id === id) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;...todoObj, done&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> todoObj</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>: newTodos&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 List 組件中由 props 中接收到回調函數後往 Item 傳遞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos, updateToDo&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    todos.map((todo)=&gt;&#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> &#123;<span class="attr">...todo</span>&#125; <span class="attr">updateToDo</span>=<span class="string">&#123;updateToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最後在 Item 中，當使用者勾選完成後，呼叫回調函數將數據傳回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    handleCheck = <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.props.updateToDo(id, event.target.checked)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            ...</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> defaultChecked=&#123;done&#125; onChange=&#123;<span class="built_in">this</span>.handleCheck(id)&#125;/&gt;</span><br><span class="line">            ...</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/08.png" class=""></li>
</ol>
<ul>
<li>限制與檢查 props<br>因為我們要用<code>prop-types</code>庫進行檢查，但是<code>create-react-app</code>預設並沒有幫我們安裝這個包，所以需要手動安裝一下，可參考<code>前端 - React 學習 - 010 對組件的標籤屬性進行檢查與限制</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install prop-types</span><br></pre></td></tr></table></figure>
編寫限制 :<br>Header 組件 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 對接收的 props 進行類型與必要性的限制</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        <span class="attr">addToDo</span>: PropTypes.func.isRequired</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
List 組件 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 對接收的 props 進行類型與必要性的限制</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        <span class="attr">todos</span>: PropTypes.array.isRequired,</span><br><span class="line">        <span class="attr">updateToDo</span>: PropTypes.func.isRequired</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
此時若在 App 組件中，對 List 組件的 updateToDo 傳遞一個數值時，會出現以下錯誤 :<img src="/2021/10/30/frontend-react-028-to-do-list/09.png" class=""></li>
</ul>
<ol start="5">
<li><p>處理 Item 的刪除按鈕<br>類似處理 Item 勾選的流程，在 App.jsx 中撰寫刪除 todo 對象的回調函數，並把他傳給 List 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刪除一個 todo 對象</span></span><br><span class="line">deleteToDo = <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> newToDos = todos.filter(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> todoObj.id !== id</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>:newToDos&#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        ...</span><br><span class="line">        &lt;List todos=&#123;todos&#125; updateToDo=&#123;<span class="built_in">this</span>.updateToDo&#125; deleteToDo=&#123;<span class="built_in">this</span>.deleteToDo&#125;/&gt;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>而在 List 組件中也將他傳給 Item 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos, updateToDo, deleteToDo&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    todos.map((todo)=&gt;&#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> &#123;<span class="attr">...todo</span>&#125; <span class="attr">updateToDo</span>=<span class="string">&#123;updateToDo&#125;</span> <span class="attr">deleteToDo</span>=<span class="string">&#123;deleteToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在 Item 組件中的刪除按鈕上榜定 onClick 事件的回調函數<code>handleDelete</code>並且在觸發事件時回調<code>deleteToDo</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    handleDelete = <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 注意這邊不可以只寫 confirm()</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">&quot;確定篩除嗎?&quot;</span>)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.props.deleteToDo(id)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id, name, done&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">const</span> &#123;mouse&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            ...</span><br><span class="line">                &lt;button onClick=&#123;<span class="built_in">this</span>.handleDelete(id)&#125; className=<span class="string">&quot;btn btn-danger&quot;</span> style=&#123;&#123;<span class="attr">display</span>: mouse?<span class="string">&#x27;block&#x27;</span>:<span class="string">&#x27;none&#x27;</span>&#125;&#125;&gt;Delete&lt;/button&gt;</span><br><span class="line">            ...</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>處理 Footer 的任務數與全選/全不選按鈕<br>先把 App 組件的 todos 資料傳給 Footer 組件做為計算已完成任務數與總數．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;eat&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;sleep&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;play&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Footer 組件中計算任務總數與已完成任務數．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="comment">// 以完成的任務數</span></span><br><span class="line">        <span class="keyword">const</span> doneCount = todos.reduce(<span class="function">(<span class="params">pre, todo</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> pre + (todo.done?<span class="number">1</span>:<span class="number">0</span>)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 任務總數</span></span><br><span class="line">        <span class="keyword">const</span> total = todos.length</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done &#123;doneCount&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total &#123;total&#125;</span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著在處理全選/全不選按鈕，需要在 App 組件中提供一個改變 todos 的 done 狀態的回調函數，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//將所有的 task 打勾</span></span><br><span class="line">checkAllToDo = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> newToDos = todos.map(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123; </span><br><span class="line">        <span class="comment">//return &#123;...todoObj, done: done&#125;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;...todoObj, done&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>:newToDos&#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">checkAllToDo</span>=<span class="string">&#123;this.checkAllToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            ...</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在按鈕上綁定<code>onChange</code>的回調函數，與設定 checked 值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    handleCheckAll = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.checkAllToDo(event.target.checked)</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="comment">// 以完成的任務數</span></span><br><span class="line">        <span class="keyword">const</span> doneCount = todos.reduce(<span class="function">(<span class="params">pre, todo</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> pre + (todo.done?<span class="number">1</span>:<span class="number">0</span>)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 任務總數</span></span><br><span class="line">        <span class="keyword">const</span> total = todos.length</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleCheckAll&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;doneCount</span> === <span class="string">total</span> &amp;&amp; <span class="attr">total</span> !== <span class="string">0?true:false&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意</font> : 檢查在 Item 組件中是否還有使用<code>defaultChecked</code>因為這個只會在組件被渲染時有用，之後當有狀態改變時並不會再被呼叫，所以頁面沒有變化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> defaultChecked=&#123;done&#125; onChange=&#123;<span class="built_in">this</span>.handleCheck(id)&#125;/&gt;</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> checked=&#123;done&#125; onChange=&#123;<span class="built_in">this</span>.handleCheck(id)&#125;/&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/10.png" class=""></li>
<li><p>處理 Footer 的清除已完成任務按鈕<br>在 App 組件中提供一個回調函數<code>clearAllDone</code>供 Footer 用以清除已完成任務．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    clearAllDone = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">const</span> newToDos = todos.filter(<span class="function">(<span class="params">todo</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !todo.done</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>: newToDos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    &lt;Footer todos=&#123;todos&#125; checkAllToDo=&#123;<span class="built_in">this</span>.checkAllToDo&#125; clearAllDone=&#123;<span class="built_in">this</span>.clearAllDone&#125;/&gt;</span><br></pre></td></tr></table></figure>
<p>在 Footer 組件的清除已完成任務按鈕上綁定事件並回調<code>clearAllDone</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    handleClearAllDone = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.props.clearAllDone()</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    &lt;button onClick=&#123;<span class="built_in">this</span>.handleClearAllDone&#125; className=<span class="string">&quot;btn btn-danger&quot;</span>&gt;clear done task&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>為 Hexo 增添流量追蹤</title>
    <url>/2021/11/15/tools-blog-hexo-next-google-analytics/</url>
    <content><![CDATA[<p>首先到<a href="https://analytics.google.com/">Google Analytics</a>申請量測，申請過程蠻簡單的就不詳述。</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/01.png" class="" title="01.png">
<span id="more"></span>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/02.png" class="" title="02.png">
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/03.png" class="" title="03.png">
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/04.png" class="" title="04.png">
<p>因為是網頁部落格應用，所以點選 Web</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/05.png" class="" title="05.png">
<p>記下評估 ID，並設定到</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/06.png" class="" title="06.png">
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/09.png" class="" title="09.png">
<p>並點選展開在底下【全域網站代碼】</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/07.png" class="" title="07.png">
<p>將此代碼複製</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/08.png" class="" title="08.png">
<p>將剛剛複製的代碼貼到 themes\next\layout_partials\head\head.swig 內的最後一行處</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/10.png" class="" title="10.png">]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>GoogleAnalytics</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 032 React 多層路徑路由的樣式丟失</title>
    <url>/2021/11/18/frontend-react-032-react-router-loss-css/</url>
    <content><![CDATA[<p>延續上篇的文章，現在有個情境是需要在原本的<code>/item1</code>路徑前面加上版本號，變成<code>/v1/item1</code>．<br>所以我們把 App.jsx 檔案修改成 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    &lt;div className=<span class="string">&quot;list-group&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/v1/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/v1/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">    &lt;div className=<span class="string">&quot;panel-body&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/v1/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/v1/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>先點擊一下導航條的<code>Item 1</code>，畫面呈現如下 :</p>
<img src="/2021/11/18/frontend-react-032-react-router-loss-css/01.png" class="" title="01.png">
<p>此時在 Reload 頁面，就會發現頁面亂了．</p>
<img src="/2021/11/18/frontend-react-032-react-router-loss-css/02.png" class="" title="02.png">
<p>這是因為 CSS 的請求路徑錯誤了，而 react 只要找不到，就會返回 index.html．所以畫面就只顯示沒有樣式的 index.html．</p>
<img src="/2021/11/18/frontend-react-032-react-router-loss-css/03.png" class="" title="03.png">
<img src="/2021/11/18/frontend-react-032-react-router-loss-css/04.png" class="" title="04.png">
<p>要解決這個問題有三個方式 :</p>
<ol>
<li>index.html 中引入樣式時不寫成 ./ 只寫 /<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/bootstrap.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>index.html 中引入樣式時用 %PUBLIC_URL% 方式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/css/bootstrap.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用 HashRouter<br>推薦使用 1 &gt; 2 &gt; 3 的方式．</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 031 使用 react-router-dom 當 React 路由</title>
    <url>/2021/11/16/frontend-react-031-react-router/</url>
    <content><![CDATA[<h1 id="安裝-react-router-dom"><a href="#安裝-react-router-dom" class="headerlink" title="安裝 react-router-dom"></a>安裝 react-router-dom</h1><p><font color="#FF0000">注意:</font>react-route-dom v5.x 版本與 v6.x 版本在用法上有不同，此篇使用 v5.x 版本．<br><a href="https://v5.reactrouter.com/web/guides/quick-start">react-router-dom</a><br>使用底下命令安裝 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install react-router-dom@5.2.1</span><br></pre></td></tr></table></figure>
<ul>
<li>整個路由運作流程</li>
</ul>
<ol>
<li>改變瀏覽器中 URL 的值</li>
<li>React 監聽到 URL 值的改變，渲染對應的組件</li>
</ol>
<span id="more"></span>

<h1 id="代碼實作"><a href="#代碼實作" class="headerlink" title="代碼實作"></a>代碼實作</h1><p>先將靜態頁面整個放到 App.jsx，此頁面會有一個 header 區，左側有一個導航條，分成有兩個 item，右邊是顯示 item 內容．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./item1.html&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./item2.html&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Item 2 内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>頁面呈現如下 :</p>
<img src="/2021/11/16/frontend-react-031-react-router/01.png" class="" title="01.png">
<p>將須根據路徑不同而有不同內容的頁面，分別寫成組件 Item1 和 Item2 :<br>Item1 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Item1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Item1 內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Item2 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Item2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Item2 內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改有超連結的部分，改用 react-router-dom 的 <code>&lt;Link&gt;</code> 取代</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;list-group-item&quot;</span> href=<span class="string">&quot;./item1.html&quot;</span>&gt;Item <span class="number">1</span>&lt;/a&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./item2.html&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>修改如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123;Link&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是此時會出現以下錯誤 :</p>
<img src="/2021/11/16/frontend-react-031-react-router/02.png" class="" title="02.png">
<p>這是 <code>&lt;Link&gt;</code> 必須被 <code>&lt;BrowserRouter&gt;</code> 或 <code>&lt;HashRouter&gt;</code> 包裹，源碼更改如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Link, BrowserRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目前完成第一步，點擊導航條可以讓瀏覽器的 URL 改變．</p>
<img src="/2021/11/16/frontend-react-031-react-router/03.png" class="" title="03.png">
<p>接著設定監聽 URL 改變然後渲染相對應的組件．將頁面展示區域<code>&lt;h3&gt;Item 1 内容&lt;/h3&gt;</code>改依據路徑不同渲染不同的組件 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item1&#x27;</span> component=&#123;Item1&#125;&gt;&lt;/Route&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>此時若執行會出現以下錯誤 :</p>
<img src="/2021/11/16/frontend-react-031-react-router/04.png" class="" title="04.png">
<p>這是 <code>&lt;Route&gt;</code> 必須被 <code>&lt;BrowserRouter&gt;</code> 或 <code>&lt;HashRouter&gt;</code> 包裹，源碼更改如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>
<p>此時我們發現雖然 URL 會變動，但是頁面卻沒有切換．</p>
<img src="/2021/11/16/frontend-react-031-react-router/05.png" class="" title="05.png">
<p>這是因為我們這邊使用了兩個 <code>&lt;BrowserRouter&gt;</code>，這兩個 <code>&lt;BrowserRouter&gt;</code> 是互相獨立運作的．所以我們統一在 index.js 內將 <code>&lt;App /&gt;</code> 用同一個 <code>&lt;BrowserRouter&gt;</code> 包裹．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>若是使用 <code>&lt;HashRouter&gt;</code> 則在 URL 中會有個 <code>#</code> 號出現 :</p>
<img src="/2021/11/16/frontend-react-031-react-router/06.png" class="" title="06.png">
<p>Item1 和 Item2 為路由組件與一般組件不同，通常不會放在 components 目錄中，而是放在 pages 目錄中．</p>
<img src="/2021/11/16/frontend-react-031-react-router/07.png" class="" title="07.png">

<h1 id="增加高亮效果"><a href="#增加高亮效果" class="headerlink" title="增加高亮效果"></a>增加高亮效果</h1><p>使用 <code>&lt;NavLink&gt;</code> 代替 <code>&lt;Link&gt;</code>． </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;NavLink className=<span class="string">&quot;list-group-item&quot;</span> to=<span class="string">&#x27;/item1&#x27;</span>&gt;Item <span class="number">1</span>&lt;/NavLink&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>在被點擊到時，會預設將類名加上```active```，而剛好 bootstrap 樣式一致，所以就會顯示成高亮．</span></figcaption><table><tr><td class="code"><pre><span class="line">若我們使用別的套件或是想要客製化，則 ```&lt;NavLink&gt;``` 可以透過屬性```activeClassName```設定被點擊到時要加的類名．</span><br><span class="line">```js</span><br><span class="line">&lt;NavLink activeClassName=&#x27;my_active&#x27; className=&quot;list-group-item&quot; to=&#x27;/item1&#x27;&gt;Item 1&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink activeClassName=&#x27;my_active&#x27; className=&quot;list-group-item&quot; to=&#x27;/item2&#x27;&gt;Item 2&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure>
<p>此時會發現在點擊導航條時雖有作用，但是有問題．這是因為我們有引入 bootstrap 所造成的干擾，我們提高客製化樣式就可以解決．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .my_active &#123;</span><br><span class="line">    background-color: palegreen !important;</span><br><span class="line">    color: black !important;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>觀察底下資訊，就可以知道 <code>&lt;NavLink&gt;</code> 的確有幫我們自動加上類名</p>
<img src="/2021/11/16/frontend-react-031-react-router/08.png" class="" title="08.png">

<h1 id="對-NavLink-作封裝"><a href="#對-NavLink-作封裝" class="headerlink" title="對 NavLink 作封裝"></a>對 NavLink 作封裝</h1><p>將 <code>&lt;NavLink&gt;</code> 進行封裝到 <code>&lt;MyNavLink&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NavLink&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNavLink</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;my_active&#x27;</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> &#123;<span class="attr">...this.props</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;list-group&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意 :</font> React 會將標籤體內容(<code>&lt;MyNavLink to=&#39;/item1&#39;&gt;Item 1&lt;/MyNavLink&gt;</code> 中的 Item 1)設定到屬性名為<code>children</code></p>
<h1 id="使用-Switch"><a href="#使用-Switch" class="headerlink" title="使用 Switch"></a>使用 Switch</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item1&#x27;</span> component=&#123;Item1&#125; /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>上述代碼，若沒有使用 <code>&lt;Switch&gt;</code> 包裹的情況下，則會從頭到尾尋找出匹配的 path 進行組件選染，結果如下圖所示，路徑<code>/item2</code>會顯示出兩個網頁內容．</p>
<img src="/2021/11/16/frontend-react-031-react-router/09.png" class="" title="09.png">
<p>而使用 <code>&lt;Switch&gt;</code> 包裹的情況下，只會匹配一個路徑就不會繼續往下匹配了，效率較高．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/16/frontend-react-031-react-router/10.png" class="" title="10.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 033 React 路徑匹配</title>
    <url>/2021/11/19/frontend-react-033-route-path-match/</url>
    <content><![CDATA[<h1 id="模糊匹配與嚴格匹配"><a href="#模糊匹配與嚴格匹配" class="headerlink" title="模糊匹配與嚴格匹配"></a>模糊匹配與嚴格匹配</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>將上面的源碼中的<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>修改成<code>&lt;Route path=&#39;/item2/message/new&#39; component=&#123;Item2&#125; /&gt;</code></p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/new&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>這樣還可以匹配上嗎? 答案是匹配不上。</p>
<img src="/2021/11/19/frontend-react-033-route-path-match/01.png" class="" title="01.png">
<p>但是我們將<code>&lt;MyNavLink to=&#39;/item2&#39;&gt;Item 2&lt;/MyNavLink&gt;</code>修改成<code>&lt;MyNavLink to=&#39;/item2/message/new&#39;&gt;Item 2&lt;/MyNavLink&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/message/new&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>這樣可匹配上嗎? 答案是可匹配的。</p>
<img src="/2021/11/19/frontend-react-033-route-path-match/02.png" class="" title="02.png">
<p>如果是將<code>&lt;MyNavLink to=&#39;/item2&#39;&gt;Item 2&lt;/MyNavLink&gt;</code>修改成<code>&lt;MyNavLink to=&#39;/message/item2/new&#39;&gt;Item 2&lt;/MyNavLink&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/message/item2/new&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>這樣又匹配不上。</p>
<img src="/2021/11/19/frontend-react-033-route-path-match/03.png" class="" title="03.png">
<p>結論就是 React 會將<code>&lt;MyNavLink to=&#39;/message/item2/new&#39;&gt;Item 2&lt;/MyNavLink&gt;</code>依序取出<code>message</code>、<code>item2</code>及<code>new</code>進行對<code>&lt;Route path=&#39;/item1&#39; component=&#123;Item1&#125; /&gt;</code>和<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>進行匹配，當第一次取出<code>message</code>時就匹配不到一個，所以就停止後面的匹配動作。<br>而<code>&lt;MyNavLink to=&#39;/item2/message/new&#39;&gt;Item 2&lt;/MyNavLink&gt;</code>這個順序，在第一次匹配時就會匹配到<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>就算後續的都沒匹配到也會傳回這個結果，這就是模糊匹配。<br>可以透過屬性 exact 讓 react 進行嚴格匹配，即路徑必須完成一模一樣才算匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/message/new&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>上面源碼如果沒有加上<code>exact=&#123;true&#125;</code>是可以匹配到的，但是加上後就匹配不到了。</p>
<img src="/2021/11/19/frontend-react-033-route-path-match/04.png" class="" title="04.png">
<p><font color="#FF0000">注意 : 嚴格匹配不要隨便開起，否則會引發無法繼續批配多級路由，開啟時間為使用模糊匹配已經解決不了才開啟。</font></p>
<h1 id="Redirect-的使用"><a href="#Redirect-的使用" class="headerlink" title="Redirect 的使用"></a>Redirect 的使用</h1><p>其作用可以用來指定預設的匹配路徑，也可以說當沒有一條規格匹配上時，就會指明要去哪邊。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/item2&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>
<p><font color="#FF000">注意 : <code>&lt;Redirect to=&quot;/item2&quot; /&gt;</code> 要寫在最下方。</font><br>此時在瀏覽器輸入 <a href="http://localhost:3000/">http://localhost:3000</a> 後按下 Enter 後就會跳轉到 <a href="http://localhost:3000/item2">http://localhost:3000/item2</a></p>
<img src="/2021/11/19/frontend-react-033-route-path-match/05.png" class="" title="05.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
        <tag>Match</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 034 嵌套路由</title>
    <url>/2021/11/19/frontend-react-034-nested-routes/</url>
    <content><![CDATA[<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>延續之前的範例，只不過現在將 Item2 頁面變成不單單只有顯示一行文字，而是具有一個導航條與內容區．畫面如下 :</p>
<img src="/2021/11/19/frontend-react-034-nested-routes/01.png" class="" title="01.png">
<span id="more"></span>
<p>在組件 Item2 下，新增兩個路由組件 News 和 Message<br>In /pages/Item2/News/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">News</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>news001<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>news002<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>news003<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In /pages/Item2/Message/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message1&quot;</span>&gt;</span>message001<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message2&quot;</span>&gt;</span>message002<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message/3&quot;</span>&gt;</span>message003<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 /pages/Item2/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Switch, Route&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MyNavLink <span class="keyword">from</span> <span class="string">&#x27;../../components/MyNavLink&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;./News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Item2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Item2 內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此時點選 Item2 的<code>&lt;MyNavLink to=&#39;/news&#39;&gt;News&lt;/MyNavLink&gt;</code>，就會將<code>/news</code>拿出來依照路由註冊順序開始匹配，即先比對 App.jsx <code>&lt;Route path=&#39;/item1&#39; component=&#123;Item1&#125; /&gt;</code>，後比對<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>，都沒有匹配到<code>/news</code>就會使用<code>&lt;Redirect to=&quot;/item1&quot; /&gt;</code>跳轉．</p>
<img src="/2021/11/19/frontend-react-034-nested-routes/02.png" class="" title="02.png">
<img src="/2021/11/19/frontend-react-034-nested-routes/03.png" class="" title="03.png">
<p>所以我們設定時要帶上父組件路徑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;Item2 內容&lt;/h2&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<img src="/2021/11/19/frontend-react-034-nested-routes/04.png" class="" title="04.png">
<p>繼續補上註冊路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Switch, Route&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MyNavLink <span class="keyword">from</span> <span class="string">&#x27;../../components/MyNavLink&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;./News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Item2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Item2 內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/news&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此時點擊 Item2 組件的 News 時，會將 <code>&lt;MyNavLink to=&#39;/item2/news&#39;&gt;News&lt;/MyNavLink&gt;</code>抽出 item2 及 news 進行匹配動作，首先檢查 App.jsx 中的<code>&lt;Route path=&#39;/item1&#39; component=&#123;Item1&#125; /&gt;</code>並不匹配，接著檢查<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>模糊匹配成功，就是因為此模糊匹配成功，所以讓組件 Item2 的頁面沒有被清掉而被渲染，所以組件中的 <code>&lt;Route path=&#39;/item2/news&#39; component=&#123;News&#125; /&gt;</code>和<code>&lt;Route path=&#39;/item2/message&#39; component=&#123;Message&#125; /&gt;</code>被註冊到路由中，且會拿 item2 及 news 繼續進行匹配動作，此時就會完全匹配到<code>&lt;Route path=&#39;/item2/news&#39; component=&#123;News&#125; /&gt;</code>而做 News 組件的掛載．</p>
<ul>
<li>嚴格匹配的問題<br>此時若是將<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>開啟嚴格匹配<code>&lt;Route exact path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>則原本因為模糊匹配成功進而掛載組件 Item2 讓比對可以進行下去的機制被破壞掉了．</li>
</ul>
<p>最後將預設路由設定上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/news&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/news&#x27;</span> /&gt;</span></span></span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Nested Route</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 035 傳遞資料給路由組件</title>
    <url>/2021/11/19/frontend-react-035-pass-message-to-route-component/</url>
    <content><![CDATA[<h1 id="透過-params-傳遞數據給路由組件"><a href="#透過-params-傳遞數據給路由組件" class="headerlink" title="透過 params 傳遞數據給路由組件"></a>透過 params 傳遞數據給路由組件</h1><p>延續上篇文章的範例，修改 Message 組件，讓他可以點下超連接就顯示一個新的 Detail 組件．<br>首先先建立 state 儲存 message 資料，並且使用 map 方式自動建立出超連結．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">messageArr</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message1&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message2&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message3&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        messageArr.map((messageObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return (</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;messageObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message1&quot;</span>&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            )</span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>新增 Detail 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DeatilData = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 2&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 3&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:??<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Title:??<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Content:??<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為不需要點選時有高亮效果，所以將<code>&lt;a&gt;</code>改成<code>&lt;Link&gt;</code>即可，並使用 parameter 方式傳數據並註冊路由．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Link, Route&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">&#x27;./Detail&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">messageArr</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message01&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message02&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message03&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        messageArr.map((messageObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return (</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;messageObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    &#123;/* 向路由組件傳遞 params 參數 */&#125;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">item2</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">messageObj.id</span>&#125;/$&#123;<span class="attr">messageObj.title</span>&#125;`&#125;&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            )</span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 向路由組件傳遞 params 參數 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/detail/:id/:title&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將傳入 Detail 組件的數據取出並展示，React 會將 params 放在<code>this.props.match.params</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DeatilData = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 2&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 3&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id, title&#125; = <span class="built_in">this</span>.props.match.params</span><br><span class="line">        <span class="keyword">const</span> findResult = DeatilData.find(<span class="function">(<span class="params">detailObj</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> detailObj.id === id</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Title:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Content:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最終畫面呈現 :</p>
<img src="/2021/11/19/frontend-react-035-pass-message-to-route-component/01.png" class="" title="01.png">

<h1 id="透過-search-傳遞數據給路由組件"><a href="#透過-search-傳遞數據給路由組件" class="headerlink" title="透過 search 傳遞數據給路由組件"></a>透過 search 傳遞數據給路由組件</h1><ol>
<li>先設定向路由組件傳遞參數<br>將<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;<span class="string">`/item2/message/detail/<span class="subst">$&#123;messageObj.id&#125;</span>/<span class="subst">$&#123;messageObj.title&#125;</span>`</span>&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure>
改為<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;<span class="string">`/item2/message/detail/?id=<span class="subst">$&#123;messageObj.id&#125;</span>&amp;title=<span class="subst">$&#123;messageObj.title&#125;</span>`</span>&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure></li>
<li>聲明接收參數<br>將<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item2/message/detail/:id/:title&#x27;</span> component=&#123;Detail&#125; /&gt;</span><br></pre></td></tr></table></figure>
因為此方式無需聲明，所以改成<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item2/message/detail&#x27;</span> component=&#123;Detail&#125; /&gt;</span><br></pre></td></tr></table></figure></li>
<li>接收參數<br>在接收數據的組件 Detail.jsx 中，已經不能由<code>props.match.params</code>取得數據，所以底下這行必須刪除<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;id, title&#125; = <span class="built_in">this</span>.props.match.params</span><br></pre></td></tr></table></figure>
而使用此方式傳遞數據，react 會將數據放在<code>props.location</code>且並沒有幫我們整理，格式像<code>?id=01&amp;title=message01</code>所以我們需要借助 querystring 套件幫忙剖析．<img src="/2021/11/19/frontend-react-035-pass-message-to-route-component/02.png" class="" title="02.png"></li>
</ol>
<ul>
<li>querystring 套件<br>如果是使用 create-react-app 方式建立專案，則預設就已經安裝好了，所以直接引入使用即可．<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;querystring&#x27;</span></span><br></pre></td></tr></table></figure>
他提供兩個有用的方法 :</li>
</ul>
<ol>
<li>parse() : 將 urlencode 字串轉成 key-value 對象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;id=1&amp;name=steven&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(qs.parse(str))</span><br></pre></td></tr></table></figure>
輸出一個對象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">id</span>:<span class="string">&quot;1&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;steven&quot;</span> &#125;</span><br></pre></td></tr></table></figure></li>
<li>stringify() : 將 key-value 對象轉成 urlencode 字串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;stevven&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(qs.stringify(obj))</span><br></pre></td></tr></table></figure>
輸出一個 urlencode 字串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;id=1&amp;name=steven&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>所以在 Detail.jsx 中原本接收方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;id, title&#125; = <span class="built_in">this</span>.props.match.params</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;search&#125; = <span class="built_in">this</span>.props.location</span><br><span class="line"><span class="keyword">const</span> &#123;id, title&#125; = qu.parse(search.slice(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意:</font><code>props.location</code>的值，前面有一個問號，如 : <code>?id=01&amp;title=message01</code>，記得要把他去除．</p>
<h1 id="透過-state-傳遞數據給路由組件"><a href="#透過-state-傳遞數據給路由組件" class="headerlink" title="# 透過 state 傳遞數據給路由組件"></a># 透過 state 傳遞數據給路由組件</h1><ol>
<li>先設定向路由組件傳遞參數<br>將<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;<span class="string">`/item2/message/detail/?id=<span class="subst">$&#123;messageObj.id&#125;</span>&amp;title=<span class="subst">$&#123;messageObj.title&#125;</span>`</span>&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure>
改為<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;&#123;<span class="attr">pathname</span>: <span class="string">&#x27;/item2/message/detail&#x27;</span>, <span class="attr">state</span>:&#123;<span class="attr">id</span>:messageObj.id,<span class="attr">title</span>:messageObj.title&#125;&#125;&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure></li>
<li>聲明接收參數<br>跟用 search 方式一樣，無需聲明<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item2/message/detail&#x27;</span> component=&#123;Detail&#125; /&gt;</span><br></pre></td></tr></table></figure></li>
<li>接收參數<br>使用此方式傳遞數據，react 會將數據放在<code>props.location.state</code><img src="/2021/11/19/frontend-react-035-pass-message-to-route-component/03.png" class="" title="03.png">
所以需更改在 Detail.jsx 的接收方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收 state 參數</span></span><br><span class="line"><span class="keyword">const</span> &#123;id, title&#125; = <span class="built_in">this</span>.props.location.state</span><br></pre></td></tr></table></figure>
<font color="#FF0000">注意 : </font><br>因為使用此方法沒有在瀏覽器的 URL 中有紀錄參數，所以當使用者複製 URL 路徑後在瀏覽器的新視窗開啟，會出現以下錯誤訊息 :<img src="/2021/11/19/frontend-react-035-pass-message-to-route-component/04.png" class="" title="04.png">
這是因為新視窗中並沒有<code>props.location.state</code>資料是 undefined<br>所以我們可針對這些錯誤進行改善，增加使用者體驗，底下就是一個最簡單的方式，讓所有的值都有定義 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onst &#123;id, title&#125; = <span class="built_in">this</span>.props.location.state || &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findResult = DeatilData.find(<span class="function">(<span class="params">detailObj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> detailObj.id === id</span><br><span class="line">&#125;) || &#123;&#125;</span><br></pre></td></tr></table></figure>
<code>onst &#123;id, title&#125; = this.props.location.state || &#123;&#125;</code>這種寫法是當<code>this.props.location.state</code>是 undefined 時就拿後面的<code>&#123;&#125;</code>進行取值．</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
      </tags>
  </entry>
  <entry>
    <title>Tip - create-react-app 沒有生成相關檔案</title>
    <url>/2021/11/19/tip-create-react-app-not-working/</url>
    <content><![CDATA[<p>某一天要創建 react 專案，發現建立好的專案並沒有 index.html、App.js … 等。上網找了好久都沒有找到明確的說明，看到某一篇文章說他是因為輸入了 <code>npm update -g</code>之後，npm 才開始有問題的，我想了一下，前幾天因為命令提示我的版本太舊需要更新時也有輸入過，看了其他幾篇文章說這是因為新舊版本問題，我的 node.js 安裝到現在也超過三年了，所以我想應該是這個原因，所以我就重新安裝後就恢復正常了，底下是我的處理步驟 :</p>
<span id="more"></span>
<ol>
<li>卸載 node.js<br>在【控制台】中點擊【程式與功能】進入後，選擇 node.js 後按下解除安裝。<img src="/2021/11/19/tip-create-react-app-not-working/01.png" class="" title="01.png">
<img src="/2021/11/19/tip-create-react-app-not-working/02.png" class="" title="02.png"></li>
<li>移除 cache 資料<br>在 C:\Users\Steven\AppData\Roaming 中如果有資料夾【npm】和【npm-cache】將其刪除。<img src="/2021/11/19/tip-create-react-app-not-working/03.png" class="" title="03.png"></li>
<li>安裝 node.js<br>下載網址 : <a href="https://nodejs.org/zh-tw/download/">Nodejs</a><br>下載完後就是無腦 next</li>
<li>安裝相關套件<br>因為是重砍掉了，所以一些 npm 套件都要重新安裝回來，如 : <code>npm install -g hexo-cli</code></li>
</ol>
]]></content>
      <categories>
        <category>Tip</category>
      </categories>
      <tags>
        <tag>create-react-app</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 036 push 和 replace 和編程路徑</title>
    <url>/2021/11/20/frontend-react-036-program-route/</url>
    <content><![CDATA[<p>一般使用<code>&lt;Link&gt;</code>預設都是 push 模式，即會路由 push 到堆棧中，以便使用者按下後退鈕時可以回到上一次的頁面．<br>而使用<code>&lt;Link replace&gt;</code>方式，則是將路徑覆蓋掉最上層的，所以使用者是沒有辦法透過按下後退鈕返回上一頁．</p>
<h1 id="編程路由"><a href="#編程路由" class="headerlink" title="編程路由"></a>編程路由</h1><p>在某些情況下不是透過<code>&lt;Link&gt;</code>跳轉，而是透過像是<code>&lt;button&gt;</code>觸發跳轉，此時就需要編程路由，而使用<code>react-router-dom</code>會將這些基本控制 hstory 的 API 封裝到<code>props.history</code>下．</p>
<span id="more"></span>
<img src="/2021/11/20/frontend-react-036-program-route/01.png" class="" title="01.png">
<ol>
<li>push(path, state) : 一般路由跳轉會留下歷史紀錄</li>
<li>replace(path, state) : 跳轉後不會留下歷史紀錄</li>
<li>goBack() : 返回上一頁</li>
<li>goForward() : 往下一頁</li>
<li>go(n) : 若為正數則為往下跳轉 n 頁，若為負數，則往回跳轉 n 頁．<br>而且三種向路由組件傳遞參數的方式也全都可以用編程方式實現．<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  replaceShow = <span class="function">(<span class="params">id, title</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.replace(<span class="string">`/item2/message/detail`</span>, &#123;id, title&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pushShow = <span class="function">(<span class="params">id, title</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.push(<span class="string">`/item2/message/detail`</span>, &#123;id, title&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  back = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.goBack()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  forward = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.goForward()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.go(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  &#123;</span></span><br><span class="line"><span class="xml">                      messageArr.map((messageObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                          return (</span></span><br><span class="line"><span class="xml">                              <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;messageObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                  &#123;/* 向路由組件傳遞 params 參數 */&#125;</span></span><br><span class="line"><span class="xml">                                  &#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">item2</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">messageObj.id</span>&#125;/$&#123;<span class="attr">messageObj.title</span>&#125;`&#125;&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">                                  &#123;/* 向路由組件傳遞 search 參數 */&#125;</span></span><br><span class="line"><span class="xml">                                  &#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">item2</span>/<span class="attr">message</span>/<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;messageObj.id&#125;&amp;title</span>=<span class="string">$&#123;messageObj.title&#125;</span>`&#125;&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">                                  &#123;/* 向路由組件傳遞 state 參數 */&#125;</span></span><br><span class="line"><span class="xml">                                  <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span> &#x27;/<span class="attr">item2</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;, <span class="attr">state:</span>&#123;<span class="attr">id:messageObj.id</span>,<span class="attr">title:messageObj.title</span>&#125;&#125;&#125;&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                  <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.pushShow(messageObj.id, messageObj.title)&#125;&gt;push 查看消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                  <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.replaceShow(messageObj.id, messageObj.title)&#125;&gt;replace 查看消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                          )</span></span><br><span class="line"><span class="xml">                      &#125;)</span></span><br><span class="line"><span class="xml">                  &#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">              &#123;/* 聲明接收 params 參數 */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/detail/:id/:title&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* 無需聲明接收 search 參數 */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/detail&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* 無需聲明接收 state 參數 */&#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/detail&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forward&#125;</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>Go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="withRouter-的使用"><a href="#withRouter-的使用" class="headerlink" title="withRouter() 的使用"></a>withRouter() 的使用</h1><p>如果組件是路由組件的話，其預設就有<code>props.history</code>…等對象，而一般組件若是也要操控路由的話，就必須用<code>withRouter()</code>包寡一下組件．<br>假設情境是在 Header 組件要可以操控路由，則必須修改為 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    back = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.history.goBack()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    forward = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.history.goForward()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    go = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.history.go(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forward&#125;</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>Go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(Header)</span><br></pre></td></tr></table></figure>
<img src="/2021/11/20/frontend-react-036-program-route/02.png" class="" title="02.png">


<ul>
<li>後續疑問<br>用<code>&lt;Link to=&#123;&#123;pathname: '/item2/message/detail', state:&#123;id:messageObj.id,title:messageObj.title&#125;&#125;&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</code>方式，依序點擊 message01 -&gt; message02，然後按下返回鍵，此時點擊 message01 超連結時，是正常的 push 模式<img src="/2021/11/20/frontend-react-036-program-route/03.png" class="" title="03.png">
然後點擊 message02 就變成 replace 模式<img src="/2021/11/20/frontend-react-036-program-route/04.png" class="" title="04.png">
此時點返回，我本以為是會回到 message01，但是卻跳到 message<img src="/2021/11/20/frontend-react-036-program-route/05.png" class="" title="05.png">
跟我想的有點不一樣，但是使用按下 [push 查看訊息] 的方式時，就會 message01 -&gt; message02，然後按下返回時會回到 message01．<img src="/2021/11/20/frontend-react-036-program-route/06.png" class="" title="06.png">
有兩個差異點 :</li>
</ul>
<ol>
<li>往 message02 時，一個是 replace，另一個是 push</li>
<li>按返回時，一個是無打印訊息，另一個是 pop</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 037 react ui 庫 - Ant-Design</title>
    <url>/2021/11/21/frontend-react-037-react-ui/</url>
    <content><![CDATA[<h1 id="三個較有名的-UI-庫"><a href="#三個較有名的-UI-庫" class="headerlink" title="三個較有名的 UI 庫"></a>三個較有名的 UI 庫</h1><ol>
<li>MUI : <a href="https://mui.com/zh/">https://mui.com/zh/</a><img src="/2021/11/21/frontend-react-037-react-ui/01.png" class="" title="01.png">
<span id="more"></span></li>
<li>Ant-Design : <a href="https://ant.design/index-cn">https://ant.design/index-cn</a><img src="/2021/11/21/frontend-react-037-react-ui/02.png" class="" title="02.png"></li>
<li>Element-React : <a href="https://elemefe.github.io/element-react/#/zh-CN/quick-start">https://elemefe.github.io/element-react/#/zh-CN/quick-start</a><img src="/2021/11/21/frontend-react-037-react-ui/03.png" class="" title="03.png"></li>
</ol>
<h1 id="Ant-Design-的使用"><a href="#Ant-Design-的使用" class="headerlink" title="Ant-Design 的使用"></a>Ant-Design 的使用</h1><p>以 Ant-Design 作為範例使用，其他的 UI 庫也是類似的方法，此種使用 UI 庫的方式，一般都是用於搭建內部使用的系統，快速且又擁有一致性，對於公司對外的項目，就比較不太適合，因為每個品牌都有自己的獨特性．<br>首先要安裝 antd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install antd</span><br></pre></td></tr></table></figure>
<p>比如說我們要加入一個組件，首先先到官網上尋找所需組件，比如說要新增一個按鈕，就先到官網上找</p>
<img src="/2021/11/21/frontend-react-037-react-ui/04.png" class="" title="04.png">
<p>往下就有各式各樣的按鈕範例</p>
<img src="/2021/11/21/frontend-react-037-react-ui/05.png" class="" title="05.png">
<p>按下[顯示代碼]就可以看到是怎樣寫的</p>
<img src="/2021/11/21/frontend-react-037-react-ui/06.png" class="" title="06.png">
<p>將其複製到自己的專案中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>啟動後會發現沒有樣式</p>
<img src="/2021/11/21/frontend-react-037-react-ui/07.png" class="" title="07.png">
<p>加入樣式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/21/frontend-react-037-react-ui/08.png" class="" title="08.png">
<p>在官網的最下面，也會列出該組件可以設定的屬性</p>
<img src="/2021/11/21/frontend-react-037-react-ui/09.png" class="" title="09.png">

<ul>
<li><p>圖標引入與使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;HomeOutlined&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">HomeOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/21/frontend-react-037-react-ui/10.png" class="" title="10.png"></li>
<li><p>DatePicker</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button, DatePicker&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;HomeOutlined&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; RangePicker &#125; = DatePicker;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">HomeOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">RangePicker</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/21/frontend-react-037-react-ui/11.png" class="" title="11.png"></li>
</ul>
<h1 id="按照組件引入-CSS"><a href="#按照組件引入-CSS" class="headerlink" title="按照組件引入 CSS"></a>按照組件引入 CSS</h1><p>因為整個 antd 的樣式檔太大了，約 60 kb，我們只想引入用到的樣式就好．<br><a href="https://3x.ant.design/docs/react/use-with-create-react-app-cn">參考官網</a></p>
<img src="/2021/11/21/frontend-react-037-react-ui/12.png" class="" title="12.png">
<p>首先安裝兩個套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install react-app-rewired customize-cra</span><br></pre></td></tr></table></figure>
<p>將 package.json 中原本用 react-scripts 啟動的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-scripts start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-scripts build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-scripts test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>改成用 react-app-rewired 啟動</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-app-rewired start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-app-rewired build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-app-rewired test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>安裝 babel-plugin-import，他是一個可以讓我們按需加載組件代碼與樣式的 babel 插件．</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install babel-plugin-import</span><br></pre></td></tr></table></figure>
<p>然後在項目的根目錄中建立 config-overrides.js 用於修改預設配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置具體的修改規則</span></span><br><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  fixBabelImports(<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">libraryName</span>: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">    <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">    <span class="attr">style</span>: <span class="string">&#x27;css&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>將之前配置的樣式刪掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button, DatePicker&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;HomeOutlined&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"><span class="comment">//import &#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; RangePicker &#125; = DatePicker;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">HomeOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">RangePicker</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新啟動 npm start<br>若跟之前的頁面一樣的話，則表示按需引入樣式成功</p>
<img src="/2021/11/21/frontend-react-037-react-ui/13.png" class="" title="13.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>UI Library</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 038 redux 基本使用</title>
    <url>/2021/11/21/frontend-react-038-redux-basic/</url>
    <content><![CDATA[<img src="/2021/11/21/frontend-react-038-redux-basic/01.png" class="" title="01.png">
<p>[React Components] 發送一個事件請求給 [Action Creators]，[Action Creators] 就該事件請求包裝成一個 action，內有類型 (type) 和 資料 (data)，然後透過 dispatch(action) 轉發給 [Store]，而 [Store] 就將前次狀態 (previosState) 和 action 交給適當的 [Reducers] 進行處理，並將處理結果 (newState) 返回給 [Store]，而有需要的組件則透過 getState() 取得資訊．</p>
<span id="more"></span>
<h1 id="三個核心概念"><a href="#三個核心概念" class="headerlink" title="三個核心概念"></a>三個核心概念</h1><ol>
<li>action<br>為一個動作對象，包含了兩個屬性 :</li>
<li>type : 類別屬性，值為字串，唯一且必要</li>
<li>data : 數據屬性，任意類型資料，非必要</li>
<li>reducer<br>用於初始化狀態或加工裝態，</li>
<li>store<br>將 state、action 及 reducer 聯繫在一起的對象</li>
</ol>
<p>創建好一個 react 專案，新建一個 Count 組件並把他放到 App 組件中<br>/components/Count/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    descrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count-value*<span class="number">1</span>&#125;)    </span><br><span class="line">    &#125;</span><br><span class="line">    incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>當前計算結果 : &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.descrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>當前計算結果為奇數時相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>異步相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">&#x27;./components/Count&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Count</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>結果呈現</p>
<img src="/2021/11/21/frontend-react-038-redux-basic/02.png" class="" title="02.png">

<h1 id="精簡版本"><a href="#精簡版本" class="headerlink" title="精簡版本"></a>精簡版本</h1><p>先沒有使用 [Action Creators] 這部分．</p>
<ul>
<li>安裝 redux<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install redux</span><br></pre></td></tr></table></figure>
建立 redux 目錄將 store.js 和相關 reducer，如 count_reducer.js 放在一起<img src="/2021/11/21/frontend-react-038-redux-basic/03.png" class="" title="03.png">
在 store.js 中使用 createStore() 創建 store<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本文件專門用於提供 store 對象，且整個應用只會有一個 store</span></span><br><span class="line"><span class="comment">// 引入創建 store 的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReducer)</span><br></pre></td></tr></table></figure>
創建 count_reducer.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用於創建一個為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> preState + data</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> preState = data</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
引入 redux 修改組件 Count<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 檢測 redux 中狀態變化，如果有變化則調用 render</span></span><br><span class="line">        store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="comment">// store 只負責狀態更新，不負責頁面更新</span></span><br><span class="line">        store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    descrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;decrement&#x27;</span>, <span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> count = store.getState()</span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>當前計算結果 : &#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.descrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>當前計算結果為奇數時相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>異步相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
另一個偵測 store 變化的方式不是在 Count.jsx 中用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 檢測 redux 中狀態變化，如果有變化則調用 render</span></span><br><span class="line">    store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
而是在根目錄的 index.js 中<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="完整版本"><a href="#完整版本" class="headerlink" title="完整版本"></a>完整版本</h1><p>使用 [Action Creators]<br>為了避免手誤，通常會將 action 對象中的 type 類型定義為常數，所以在 redux 目錄下，新增 constant.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用於定義 action 對象中的 type 類型的常數，已避免拼錯字串</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">&#x27;decrement&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在 redux 目錄中建立 count_action.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 為 Count 組件生成 action 對象</span></span><br><span class="line"><span class="comment">/*function createIncrementAction(data) &#123;</span></span><br><span class="line"><span class="comment">    return &#123;type:&#x27;increment&#x27;, data&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可精簡為下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:INCREMENT, data&#125;)</span><br><span class="line"><span class="comment">/*function createDecrementAction(data) &#123;</span></span><br><span class="line"><span class="comment">    return &#123;type:&#x27;decrement&#x27;, data&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">// 可精簡為下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:DECREMENT, data&#125;)</span><br></pre></td></tr></table></figure>
<p>另外修改 count_reducer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用於創建一個為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> INCREMENT:</span><br><span class="line">            <span class="keyword">return</span> preState + data</span><br><span class="line">        <span class="keyword">case</span> DECREMENT:</span><br><span class="line">            <span class="keyword">return</span> preState - data</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 039 redux 進階使用</title>
    <url>/2021/11/21/frontend-react-039-redux-advanced/</url>
    <content><![CDATA[<p>目標將原本的異步相加，改成用異步 action 方式．<br>修改 Count 組件，直接調用一個 [Action Creators] (createIncrementAsyncAction(data, time))</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line"><span class="comment">//        setTimeout(()=&gt;&#123;</span></span><br><span class="line">            store.dispatch(createIncrementAsyncAction(value*<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line"><span class="comment">//        &#125;, 1000)</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在 count_action.js 中新增 createIncrementAsyncAction(data, time)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data, time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            store.dispatch(createIncrementAction(data))</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>此時點選異步相加，則會出現錯誤</p>
<img src="/2021/11/21/frontend-react-039-redux-advanced/01.png" class="" title="01.png">
<p>因為 store 一般只接收 Object 對象，如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">type</span>:<span class="string">&#x27;decrement&#x27;</span>, data&#125;</span><br></pre></td></tr></table></figure>
<p>而異步 action 返回的是一個函數，所以需要借助 <code>redux-thunk</code><br>先安裝 <code>redux-thunk</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install redux-thunk</span><br></pre></td></tr></table></figure>
<p>在 store.js 中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本文件專門用於提供 store 對象，且整個應用只會有一個 store</span></span><br><span class="line"><span class="comment">// 引入創建 store 的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="comment">// 引入 redux-thunk 用於處理異步 action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReducer, applyMiddleware(thunk))</span><br></pre></td></tr></table></figure>
<p>以上代碼已經可以成功運行異步 action，但是我們可以精簡 count_action.js </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 為 Count 組件生成 action 對象</span></span><br><span class="line"><span class="comment">/*function createIncrementAction(data) &#123;</span></span><br><span class="line"><span class="comment">    return &#123;type:&#x27;increment&#x27;, data&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span></span><br><span class="line"><span class="comment">//import store from &quot;./store&quot;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/*export const createIncrementAsyncAction = (data, time) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    return ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">            store.dispatch(createIncrementAction(data))</span></span><br><span class="line"><span class="comment">        &#125;, time)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">// 因為在異步 action 中，store 在調用時自動就會把 dispatch() 當作參數傳入，所以可以改成</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data, time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            dispatch(createIncrementAction(data))</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 040 react-redux</title>
    <url>/2021/11/22/frontend-react-040-react-redux/</url>
    <content><![CDATA[<h1 id="redux-和-react-redux"><a href="#redux-和-react-redux" class="headerlink" title="redux 和 react-redux"></a>redux 和 react-redux</h1><p><a href="https://react-redux.js.org/">react-redux</a> 是 react 開發的一個集中式狀態管理的庫．<br><a href="https://redux.js.org/">redux</a> 為各種框架 (Vue、React …) 開發的．<br>兩者用法相似被並不一樣．<br>安裝 react-redux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install react-redux</span><br></pre></td></tr></table></figure>
<p>另外 redux-thunk 也是不可少的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install redux-thunk</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h1 id="將-redux-修改為-react-redux"><a href="#將-redux-修改為-react-redux" class="headerlink" title="將 redux 修改為 react-redux"></a>將 redux 修改為 react-redux</h1><ol>
<li><p>去除 UI 組件中使用 redux 的代碼</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createIncrementAction, createDecrementAction, createIncrementAsyncAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        store.dispatch(createIncrementAction(value*<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    descrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        store.dispatch(createDecrementAction(value*<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> count = store.getState()</span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            store.dispatch(createIncrementAction(value*<span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        store.dispatch(createIncrementAsyncAction(value*<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>當前計算結果 : &#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.descrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>當前計算結果為奇數時相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>異步相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>建立容器組件<br>src/containers/Count/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 Count 的 UI 組件</span></span><br><span class="line"><span class="keyword">import</span> CountUI <span class="keyword">from</span> <span class="string">&#x27;../../components/Count&#x27;</span></span><br><span class="line"><span class="comment">// 引入 connect 用於連接 UI 組件與 redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並曝露一個 Count 的容器組件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect()(CountUI)</span><br></pre></td></tr></table></figure></li>
<li><p>以容器組件替換 UI 組件，並透過容器組件的屬性 store 引入 store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//import Count from &#x27;./components/Count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">&#x27;./containers/Count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Count</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>完善容器組件 Count</p>
<figure class="highlight plaintext"><figcaption><span>除了用```export default connect()(CountUI)```方式連接 UI 組件外，也需要將狀態及操作狀態的方法傳給 UI 組件，所以就要將容器組件改成 :</span></figcaption><table><tr><td class="code"><pre><span class="line">```js</span><br><span class="line">// 引入 Count 的 UI 組件</span><br><span class="line">import CountUI from &#x27;../../components/Count&#x27;</span><br><span class="line">// 引入 connect 用於連接 UI 組件與 redux</span><br><span class="line">import &#123;connect&#125; from &#x27;react-redux&#x27;</span><br><span class="line">import &#123; createDecrementAction, createIncrementAction, createIncrementAsyncAction &#125; from &#x27;../../redux/count_action&#x27;</span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">    return &#123;count:state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        increment: (number) =&gt; dispatch(createIncrementAction(number)),</span><br><span class="line">        decrement: (number) =&gt; dispatch(createDecrementAction(number)),</span><br><span class="line">        incrementAsync: (number, time)=&gt;dispatch(createIncrementAsyncAction(number, time))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 創建並曝露一個 Count 的容器組件</span><br><span class="line">export default connect(</span><br><span class="line">    mapStateToProps,    // 第一個參數用來映射狀態，返回值是一個對象，即會透過 UI 組件的 props 傳遞狀態</span><br><span class="line">    mapDispatchToProps  // 第二個參數用來映射操作狀態的方法，返回值也是一個對象，即會透過 UI 組件的 props 傳遞狀態</span><br><span class="line">)(CountUI)</span><br></pre></td></tr></table></figure></li>
<li><p>修改 UI 組件，將狀態及操作狀態的方法皆由 props 取得<br>因為 <code>react-redux</code>會將將狀態及操作狀態的方法封裝到 UI 組件的 props 中，所以我們可以將其改成 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber  <span class="comment">// 由 &lt;input&gt; 取得的數值</span></span><br><span class="line">        <span class="built_in">this</span>.props.increment(value*<span class="number">1</span>)  <span class="comment">// 透過 props 操作 reducer，即建立 actio 後透過 dispatch() 發送處理</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    descrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="built_in">this</span>.props.decrement(value*<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.props  <span class="comment">// 由 props 解構取值</span></span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.props.increment(value*<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="built_in">this</span>.props.incrementAsync(value*<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 因為在 src/containers/Count/index.jsx 是用 count 這個 key</span></span><br><span class="line"><span class="xml">                    const mapStateToProps = function(state) &#123;</span></span><br><span class="line"><span class="xml">                        return &#123;count:state&#125;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    所以在這邊取 state 就要用 count 來取 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>當前計算結果 : &#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.descrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>當前計算結果為奇數時相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>異步相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="精簡-mapStateToProps-及-mapDispatchToProps"><a href="#精簡-mapStateToProps-及-mapDispatchToProps" class="headerlink" title="精簡 mapStateToProps 及 mapDispatchToProps"></a>精簡 mapStateToProps 及 mapDispatchToProps</h1><p>不宣告 function 直接放進 connect() 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 Count 的 UI 組件</span></span><br><span class="line"><span class="keyword">import</span> CountUI <span class="keyword">from</span> <span class="string">&#x27;../../components/Count&#x27;</span></span><br><span class="line"><span class="comment">// 引入 connect 用於連接 UI 組件與 redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createDecrementAction, createIncrementAction, createIncrementAsyncAction &#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並曝露一個 Count 的容器組件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    <span class="comment">// connect() 第一個參數用來映射狀態，返回值是一個對象，即會透過 UI 組件的 props 傳遞狀態</span></span><br><span class="line">    <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state&#125;),</span><br><span class="line">    <span class="comment">// 第二個參數用來映射操作狀態的方法，返回值也是一個對象，即會透過 UI 組件的 props 傳遞狀態</span></span><br><span class="line">    <span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">increment</span>: <span class="function">(<span class="params">number</span>) =&gt;</span> dispatch(createIncrementAction(number)),</span><br><span class="line">        <span class="attr">decrement</span>: <span class="function">(<span class="params">number</span>) =&gt;</span> dispatch(createDecrementAction(number)),</span><br><span class="line">        <span class="attr">incrementAsync</span>: <span class="function">(<span class="params">number, time</span>)=&gt;</span>dispatch(createIncrementAsyncAction(number, time))</span><br><span class="line">    &#125;)</span><br><span class="line">)(CountUI)</span><br></pre></td></tr></table></figure>

<h1 id="再精簡-mapDispatchToProps-的部分"><a href="#再精簡-mapDispatchToProps-的部分" class="headerlink" title="再精簡 mapDispatchToProps 的部分"></a>再精簡 mapDispatchToProps 的部分</h1><p>因為當 UI 組件呼叫 <code>this.props.increment(value*1)</code> 時，相當於呼叫 <code>createIncrementAction(value*1)</code> 後在呼叫 dispatch() 將其傳送處理，所以底下的寫法雖然只是建立好 action，但是 react-redux 會自動幫我們傳送給 reducer 處理．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 Count 的 UI 組件</span></span><br><span class="line"><span class="keyword">import</span> CountUI <span class="keyword">from</span> <span class="string">&#x27;../../components/Count&#x27;</span></span><br><span class="line"><span class="comment">// 引入 connect 用於連接 UI 組件與 redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createDecrementAction, createIncrementAction, createIncrementAsyncAction &#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並曝露一個 Count 的容器組件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    <span class="comment">// connect() 第一個參數用來映射狀態，返回值是一個對象，即會透過 UI 組件的 props 傳遞狀態</span></span><br><span class="line">    <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state&#125;),</span><br><span class="line">    <span class="comment">// 第二個參數用來映射操作狀態的方法，返回值也是一個對象，即會透過 UI 組件的 props 傳遞狀態</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">increment</span>: createIncrementAction,</span><br><span class="line">        <span class="attr">decrement</span>: createDecrementAction,</span><br><span class="line">        <span class="attr">incrementAsync</span>: createIncrementAsyncAction</span><br><span class="line">    &#125;</span><br><span class="line">)(CountUI)</span><br></pre></td></tr></table></figure>

<h1 id="無需再訂閱-store-變化"><a href="#無需再訂閱-store-變化" class="headerlink" title="無需再訂閱 store 變化"></a>無需再訂閱 store 變化</h1><p>使用 react-redux 後，在 App.jsx 中就不需要訂閱了．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">//import store from &#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">store.subscribe(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">    ReactDOM.render(&lt;App/&gt;, document.getElementById(&#x27;root&#x27;))</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br></pre></td></tr></table></figure>

<h1 id="使用-一次性設定-store-屬性給-UI-組件"><a href="#使用-一次性設定-store-屬性給-UI-組件" class="headerlink" title="使用  一次性設定 store 屬性給 UI 組件"></a>使用 <Provider> 一次性設定 store 屬性給 UI 組件</h1><p>一般應用在 App.jsx 中都會有多個容器組件，我們需要透過 store 屬性，將每個容器組件都設定 store，如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Container1</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Container2</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Container3</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ContainerN</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣太麻煩了，我們可以透過 <code>&lt;Provider&gt;</code> 一次全設定好，首先把設定在容器組件中的 store 移除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">//import store from &#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Count</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 index.js 中用<code>&lt;Provider&gt;</code>包裹<code>&lt;App&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>, </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="將容器組件與-UI-組件合併在一起"><a href="#將容器組件與-UI-組件合併在一起" class="headerlink" title="將容器組件與 UI 組件合併在一起"></a>將容器組件與 UI 組件合併在一起</h1><p>將 UI 組件移到容器組件中<br>react_redux_count/src/containers/Count/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 connect 用於連接 UI 組件與 redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; </span><br><span class="line">    createDecrementAction, </span><br><span class="line">    createIncrementAction, </span><br><span class="line">    createIncrementAsyncAction </span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//console.log(this.props)</span></span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber  <span class="comment">// 由 &lt;input&gt; 取得的數值</span></span><br><span class="line">        <span class="built_in">this</span>.props.increment(value*<span class="number">1</span>)  <span class="comment">// 透過 props 操作 reducer，即建立 actio 後透過 dispatch() 發送處理</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    descrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="built_in">this</span>.props.decrement(value*<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.props  <span class="comment">// 由 props 解構取值</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.props.increment(value*<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="built_in">this</span>.props.incrementAsync(value*<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 因為在 src/containers/Count/index.jsx 是用 count 這個 key</span></span><br><span class="line"><span class="xml">                    const mapStateToProps = function(state) &#123;</span></span><br><span class="line"><span class="xml">                        return &#123;count:state&#125;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    所以在這邊取 state 就要用 count 來取</span></span><br><span class="line"><span class="xml">                */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>當前計算結果 : &#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.descrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>當前計算結果為奇數時相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>異步相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並曝露一個 Count 的容器組件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    <span class="comment">// connect() 第一個參數用來映射狀態，返回值是一個對象，即會透過 UI 組件的 props 傳遞狀態</span></span><br><span class="line">    <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state&#125;),</span><br><span class="line">    <span class="comment">// 第二個參數用來映射操作狀態的方法，返回值也是一個對象，即會透過 UI 組件的 props 傳遞狀態</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">increment</span>: createIncrementAction,</span><br><span class="line">        <span class="attr">decrement</span>: createDecrementAction,</span><br><span class="line">        <span class="attr">incrementAsync</span>: createIncrementAsyncAction</span><br><span class="line">    &#125;</span><br><span class="line">)(Count)</span><br></pre></td></tr></table></figure>
<p>接著把 UI 組件刪除</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React-Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>外鍵更新規則</title>
    <url>/2021/11/23/database-foreign-key-updated-rule/</url>
    <content><![CDATA[<p>一般外鍵更新的規則有以下四種 :</p>
<ol>
<li>CASCADE<br>只要被參考的欄位被刪除或更新，則對應的外鍵欄位也要一併被刪除或更新。                                    </li>
<li>RESTRICT<br>只要有被參考到，則禁止刪除或更新。</li>
<li>NO ACTION<br>被參考的欄位被更新或刪除，當作外鍵的欄位不做任何動作，直到根據外鍵做參考時才會發現錯誤。</li>
<li>SET NULL<br>被參考的欄位被更新或刪除，則被當作外鍵的欄位將被設定為NULL，而外鍵欄位必需要被允許為空。</li>
</ol>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Foreign Key</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Linux 上安裝 JDK</title>
    <url>/2021/11/23/linux-install-jdk/</url>
    <content><![CDATA[<h1 id="下載-JDK-並解壓縮"><a href="#下載-JDK-並解壓縮" class="headerlink" title="下載 JDK 並解壓縮"></a>下載 JDK 並解壓縮</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget --no-cookies --no-check-certificate --header <span class="string">&quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot;</span> <span class="string">&quot;http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf jdk-8u161-linux-x64.tar.gz</span></span><br></pre></td></tr></table></figure>

<h1 id="使用-alternatives-進行安裝"><a href="#使用-alternatives-進行安裝" class="headerlink" title="使用 alternatives 進行安裝"></a>使用 alternatives 進行安裝</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/jdk1.8.0_161/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> alternatives --install /usr/bin/java java /opt/jdk1.8.0_161/bin/java 2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> alternatives --config java</span></span><br></pre></td></tr></table></figure>
<img src="/2021/11/23/linux-install-jdk/01.png" class="" title="01.png">
<span id="more"></span>

<h1 id="設定-javac-和-jar-路徑"><a href="#設定-javac-和-jar-路徑" class="headerlink" title="設定 javac 和 jar 路徑"></a>設定 javac 和 jar 路徑</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_161/bin/jar 2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_161/bin/javac 2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> alternatives --<span class="built_in">set</span> jar /opt/jdk1.8.0_161/bin/jar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> alternatives --<span class="built_in">set</span> javac /opt/jdk1.8.0_161/bin/javac</span></span><br></pre></td></tr></table></figure>

<h1 id="檢查安裝版本"><a href="#檢查安裝版本" class="headerlink" title="檢查安裝版本"></a>檢查安裝版本</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></table></figure>

<h1 id="設定環境變數"><a href="#設定環境變數" class="headerlink" title="設定環境變數"></a>設定環境變數</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_161</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> JRE_HOME=/opt/jdk1.8.0_161/jre</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/jdk1.8.0_161/bin:/opt/jdk1.8.0_161/jre/bin</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Ubuntu 下安裝 JDK 及 Eclipse</title>
    <url>/2021/11/23/linux-ubuntu-install-java-eclipse/</url>
    <content><![CDATA[<h1 id="安裝流程"><a href="#安裝流程" class="headerlink" title="安裝流程"></a>安裝流程</h1><ul>
<li><p>新增一個 PPA</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository ppa:webupd8team/java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br></pre></td></tr></table></figure></li>
<li><p>依照自己需要的 Java 版本安裝<br>安裝 Oracle JDK 6</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install oracle-java6-installer  <span class="comment"># 安裝 Oracle JDK 6</span></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>安裝 Oracle JDK 7</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install oracle-java7-installer  <span class="comment"># 安裝 Oracle JDK 7</span></span></span><br></pre></td></tr></table></figure>
<p>安裝 Oracle JDK 8</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install oracle-java8-installer  <span class="comment"># 安裝 Oracle JDK 8</span></span></span><br></pre></td></tr></table></figure>
<p>安裝 Oracle JDK 9</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install oracle-java9-installer  <span class="comment"># 安裝 Oracle JDK 9</span></span></span><br></pre></td></tr></table></figure>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/01.png" class="" title="01.png"></li>
</ul>
<h1 id="查詢系統-Java-版本"><a href="#查詢系統-Java-版本" class="headerlink" title="查詢系統 Java 版本"></a>查詢系統 Java 版本</h1><p>在 Ubuntu Linux 系統上我們可以同時安裝多種 Java 版本，可以透過 update-alternatives 這個工具來設定系統預設的 Java 版本。<br>首先用 <code>--query</code> 或是 <code>--display</code> 列出目前系統預設的 Java 版本以及所有可用的 java 版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> update-alternatives --query java</span></span><br></pre></td></tr></table></figure>
<p>目前系統預設的版本是 Oracle 的 Java（/usr/lib/jvm/java-8-oracle/jre/bin/java）</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/02.png" class="" title="02.png">

<h1 id="更改系統-Java-版本"><a href="#更改系統-Java-版本" class="headerlink" title="更改系統 Java 版本"></a>更改系統 Java 版本</h1><p>要更改這個系統預設的 Java 版本，可以使用 <code>--config</code> 參數來設定：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo update-alternatives --config java</span></span><br></pre></td></tr></table></figure>
<p>其他的 javac 與 javadoc 等相關指令也可以利用 update-alternatives 來更改預設版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> update-alternatives --query javac</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> update-alternatives --query javadoc</span></span><br></pre></td></tr></table></figure>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/03.png" class="" title="03.png">

<h1 id="設定-JAVA-HOME-環境變數"><a href="#設定-JAVA-HOME-環境變數" class="headerlink" title="設定 JAVA_HOME 環境變數"></a>設定 JAVA_HOME 環境變數</h1><p>利用上面介紹的 update-alternatives 指令查詢 Java 的安裝路徑，再將路徑設定加入 /etc/environment 中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle“</span><br></pre></td></tr></table></figure>
<p>接著直接載入 /etc/environment 的設定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/environment</span></span><br></pre></td></tr></table></figure>
<p>測試一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span></span><br></pre></td></tr></table></figure>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/04.png" class="" title="04.png">

<h1 id="安裝-Eclipse"><a href="#安裝-Eclipse" class="headerlink" title="安裝 Eclipse"></a>安裝 Eclipse</h1><p>下載安裝檔 - <a href="https://www.eclipse.org/downloads/packages/">https://www.eclipse.org/downloads/packages/</a></p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/05.png" class="" title="05.png">
<p>解壓縮</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/06.png" class="" title="06.png">
<p>執行安裝</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/07.png" class="" title="07.png">
<p>選擇欲安裝的版本</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/08.png" class="" title="08.png">
<p>設定安裝位置</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/09.png" class="" title="09.png">
<p>開始安裝</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/10.png" class="" title="10.png">
<p>安裝完成</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/11.png" class="" title="11.png">
<p>啟動</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/12.png" class="" title="12.png">

<h1 id="在Unity-Dash中創建一個快捷鍵"><a href="#在Unity-Dash中創建一個快捷鍵" class="headerlink" title="在Unity Dash中創建一個快捷鍵"></a>在Unity Dash中創建一個快捷鍵</h1><p>創建文件</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/13.png" class="" title="13.png">

<p>在該檔中寫入以下內容</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/14.png" class="" title="14.png">

<p>可查詢到 eclipse</p>
<img src="/2021/11/23/linux-ubuntu-install-java-eclipse/15.png" class="" title="15.png">
]]></content>
      <categories>
        <category>Linux</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 041 react-redux 容器間共享數據</title>
    <url>/2021/11/24/frontend-react-041-react-redux-share-data/</url>
    <content><![CDATA[<h1 id="在容器組件之間共享數據"><a href="#在容器組件之間共享數據" class="headerlink" title="在容器組件之間共享數據"></a>在容器組件之間共享數據</h1><p>整個專案的目錄結構如下 :</p>
<img src="/2021/11/24/frontend-react-041-react-redux-share-data/01.png" class="" title="01.png">
<p>通常都是將 UI 組件的靜態頁面寫好，接著擴展動態操作，根據操作將 action、reducer 及 store 寫好，最後把 UI 組件透過 connect() 變成容器組件．</p>
<span id="more"></span>
<h1 id="UI-Container-Componemts"><a href="#UI-Container-Componemts" class="headerlink" title="UI/Container Componemts"></a>UI/Container Componemts</h1><p>react_redux_count/src/containers/Count/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 connect 用於連接 UI 組件與 redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; </span><br><span class="line">    createDecrementAction, </span><br><span class="line">    createIncrementAction, </span><br><span class="line">    createIncrementAsyncAction </span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/actions/count&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//console.log(this.props)</span></span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber  <span class="comment">// 由 &lt;input&gt; 取得的數值</span></span><br><span class="line">        <span class="built_in">this</span>.props.increment(value*<span class="number">1</span>)  <span class="comment">// 透過 props 操作 reducer，即建立 actio 後透過 dispatch() 發送處理</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    descrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="built_in">this</span>.props.decrement(value*<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.props  <span class="comment">// 由 props 解構取值</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.props.increment(value*<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="built_in">this</span>.props.incrementAsync(value*<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是 Count 組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>當前計算結果 : &#123;this.props.count&#125;, 下方組件總人數為:&#123;this.props.persons.length&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.descrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>當前計算結果為奇數時相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>異步相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並曝露一個 Count 的容器組件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    <span class="comment">// connect() 第一個參數用來映射狀態，返回值是一個對象，即會透過 UI 組件的 props 傳遞狀態</span></span><br><span class="line">    <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state.count, <span class="attr">persons</span>:state.persons&#125;),</span><br><span class="line">    <span class="comment">// 第二個參數用來映射操作狀態的方法，返回值也是一個對象，即會透過 UI 組件的 props 傳遞狀態</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">increment</span>: createIncrementAction,</span><br><span class="line">        <span class="attr">decrement</span>: createDecrementAction,</span><br><span class="line">        <span class="attr">incrementAsync</span>: createIncrementAsyncAction</span><br><span class="line">    &#125;</span><br><span class="line">)(Count)</span><br></pre></td></tr></table></figure>
<p>react_redux_count/src/containers/Person/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createAddPersonAction &#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/actions/person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    addPerson = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> name = <span class="built_in">this</span>.nameNode.value</span><br><span class="line">        <span class="keyword">const</span> age = <span class="built_in">this</span>.ageNode.value</span><br><span class="line">        <span class="keyword">const</span> personObj = &#123;<span class="attr">id</span>:nanoid(), name, age&#125;</span><br><span class="line">        <span class="built_in">this</span>.props.addPerson(personObj)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是 Person 組件, 上方組件和為: &#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.nameNode = c&#125; type=&quot;text&quot; placeholder=&#x27;輸入名字&#x27;/&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.ageNode = c&#125; type=&quot;text&quot; placeholder=&#x27;輸入年齡&#x27;/&gt; </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addPerson&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    this.props.persons.map((personObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    <span class="function"><span class="params">state</span>=&gt;</span>(&#123;<span class="attr">persons</span>:state.persons, <span class="attr">count</span>:state.count&#125;),</span><br><span class="line">    &#123;<span class="attr">addPerson</span>:createAddPersonAction&#125;</span><br><span class="line">)(Person)</span><br></pre></td></tr></table></figure>
<h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>react_redux_count/src/redux/actions/count.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;../constant&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:INCREMENT, data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:DECREMENT, data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data, time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            dispatch(createIncrementAction(data))</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>react_redux_count/src/redux/actions/person.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_PERSON &#125; <span class="keyword">from</span> <span class="string">&quot;../constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createAddPersonAction = <span class="function"><span class="params">personObj</span> =&gt;</span> (&#123;<span class="attr">type</span>:ADD_PERSON, <span class="attr">data</span>:personObj&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h1><p>react_redux_count/src/redux/reducers/count.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;../constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用於創建一個為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(action)</span><br><span class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> INCREMENT:</span><br><span class="line">            <span class="keyword">return</span> preState + data</span><br><span class="line">        <span class="keyword">case</span> DECREMENT:</span><br><span class="line">            <span class="keyword">return</span> preState - data</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>react_redux_count/src/redux/reducers/person.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_PERSON &#125; <span class="keyword">from</span> <span class="string">&quot;../constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = [&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">personReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> ADD_PERSON:</span><br><span class="line">            <span class="keyword">return</span> [data, ...preState]</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意: reducer 必須為純函數，簡單的說，如果是 state 紀錄是數組的話，一定要用類似<code>[data, ...preState]</code>的方式．</font><br>react_redux_count/src/redux/constant.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用於定義 action 對象中的 type 類型的常數，已避免拼錯字串</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">&#x27;decrement&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_PERSON = <span class="string">&#x27;add_person&#x27;</span></span><br></pre></td></tr></table></figure>
<p>react_redux_count/src/redux/store.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本文件專門用於提供 store 對象，且整個應用只會有一個 store</span></span><br><span class="line"><span class="comment">// 引入創建 store 的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createStore, </span><br><span class="line">    applyMiddleware, </span><br><span class="line">    combineReducers</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/person&#x27;</span></span><br><span class="line"><span class="comment">// 引入 redux-thunk 用於處理異步 action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匯總所有的 reducer 變為</span></span><br><span class="line"><span class="keyword">const</span> allReducer = combineReducers(&#123;</span><br><span class="line">    <span class="attr">count</span>: countReducer,</span><br><span class="line">    <span class="attr">persons</span>: personReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, applyMiddleware(thunk))</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意: 這邊 createStore() 只能傳一個 Reducer，所以需要透過 combineReducers() 合併多個 reducers</font><br>react_redux_count/src/App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">&#x27;./containers/Count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Person <span class="keyword">from</span> <span class="string">&#x27;./containers/Person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Count</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Person</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>react_redux_count/src/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>, </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<img src="/2021/11/24/frontend-react-041-react-redux-share-data/02.png" class="" title="02.png">

<h1 id="redux-開發工具"><a href="#redux-開發工具" class="headerlink" title="redux 開發工具"></a>redux 開發工具</h1><ul>
<li><p>在瀏覽器中安裝套件</p>
<img src="/2021/11/24/frontend-react-041-react-redux-share-data/03.png" class="" title="03.png">
<img src="/2021/11/24/frontend-react-041-react-redux-share-data/04.png" class="" title="04.png"></li>
<li><p>在專案中安裝 redux-devtools-extension 套件 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save redux-devtools-extension</span></span><br></pre></td></tr></table></figure></li>
<li><p>在專案中引用 redux-devtools-extension 套件<br>react_redux_count/src/redux/store.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本文件專門用於提供 store 對象，且整個應用只會有一個 store</span></span><br><span class="line"><span class="comment">// 引入創建 store 的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createStore, </span><br><span class="line">    applyMiddleware, </span><br><span class="line">    combineReducers</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure>
<p>引入成功</p>
<img src="/2021/11/24/frontend-react-041-react-redux-share-data/05.png" class="" title="05.png"></li>
</ul>
<h1 id="優化-reducer"><a href="#優化-reducer" class="headerlink" title="優化 reducer"></a>優化 reducer</h1><p>原本 store.js 要引入所有的 reducers，然後透過 combineReducers() 將其包裝成一個</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 引入為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/person&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 匯總所有的 reducer 變為</span></span><br><span class="line"><span class="keyword">const</span> allReducer = combineReducers(&#123;</span><br><span class="line">    <span class="attr">count</span>: countReducer,</span><br><span class="line">    <span class="attr">persons</span>: personReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure>
<p>當有很多 reducers 時就會佔滿該檔案，所以一般會在 react_redux_count/src/redux/reducers/index.js 中統一將所有 reducers 包裝成一個，而在 store.js 中只要單獨引入一個總 reducer 就好．<br>react_redux_count/src/redux/reducers/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入為組件服務的 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匯總所有的 reducer 變為</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">    <span class="attr">count</span>: countReducer,</span><br><span class="line">    <span class="attr">persons</span>: personReducer</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>react_redux_count/src/redux/store.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure>
<p>再將修改 react_redux_count/src/redux/reducers/index.js 中引入的 reducer 名稱跟之後的 Object 對象中的 key 同名，最後可以簡寫成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入為組件服務的 reducer</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> persons <span class="keyword">from</span> <span class="string">&#x27;./person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匯總所有的 reducer 變為</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">    count,</span><br><span class="line">    persons</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="優化-action"><a href="#優化-action" class="headerlink" title="優化 action"></a>優化 action</h1><p>因為 react_redux_count/src/containers/Count/index.jsx 中的映射操作函數是個對象，如果 value 跟 key 同名的話，又可以用縮寫方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state.count, <span class="attr">persons</span>:state.persons&#125;),</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">increment</span>: createIncrementAction,</span><br><span class="line">        <span class="attr">decrement</span>: createDecrementAction,</span><br><span class="line">        <span class="attr">incrementAsync</span>: createIncrementAsyncAction</span><br><span class="line">    &#125;</span><br><span class="line">)(Count)</span><br></pre></td></tr></table></figure>
<p>所以我們將 react_redux_count/src/redux/actions/count.js 中為了搭配 key 名稱，做了以下修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;../constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increment = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:INCREMENT, data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrement = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:DECREMENT, data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAsync = <span class="function">(<span class="params">data, time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            dispatch(increment(data))</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後在 react_redux_count/src/containers/Count/index.jsx 中就可以用簡寫方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; </span><br><span class="line">    increment, </span><br><span class="line">    decrement, </span><br><span class="line">    incrementAsync </span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/actions/count&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state.count, <span class="attr">persons</span>:state.persons&#125;),</span><br><span class="line">    &#123;</span><br><span class="line">        increment,</span><br><span class="line">        decrement,</span><br><span class="line">        incrementAsync</span><br><span class="line">    &#125;</span><br><span class="line">)(Count)</span><br></pre></td></tr></table></figure>
<p>以相同方式處理容器組件 Person 和 action</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React-Redux</tag>
        <tag>Redux DevTools</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React UI 庫 - 使用 Material</title>
    <url>/2021/11/25/frontend-react-material-ui-library/</url>
    <content><![CDATA[<h1 id="React-UI-library-Material-介紹"><a href="#React-UI-library-Material-介紹" class="headerlink" title="React UI library - Material 介紹"></a>React UI library - Material 介紹</h1><p><a href="https://mui.com/">Material 官網</a><br>Live Demo 資源:<br><a href="https://fonts.google.com/specimen/Roboto#standard-styles">Roboto font</a><br><a href="https://fonts.google.com/icons">Font icons</a><br><a href="https://mui.com/components/icons/">SVG icons</a></p>
<ul>
<li>安裝 v5.x<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @mui/material @emotion/react @emotion/styled</span></span><br></pre></td></tr></table></figure>
or<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @mui/material @mui/styled-engine-sc styled-components</span></span><br></pre></td></tr></table></figure></li>
<li>安裝 v4.x<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/core@next @emotion/react @emotion/styled</span></span><br></pre></td></tr></table></figure>
or<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/core@next @material-ui/styled-engine-sc@next styled-components</span></span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
</ul>
<h1 id="以-v5-x-為例"><a href="#以-v5-x-為例" class="headerlink" title="以 v5.x 為例"></a>以 v5.x 為例</h1><p>App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;@mui/material/Button&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">variant</span>=<span class="string">&quot;contained&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>畫面呈現</p>
<img src="/2021/11/25/frontend-react-material-ui-library/01.png" class="" title="01.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Material</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - lazy load</title>
    <url>/2021/11/26/frontend-react-lazy-load/</url>
    <content><![CDATA[<p>在路由組件中，一定要用延遲加載，即當使用者按下某個路由時，才會進行路由組件加載．<br>因為如果沒有使用延遲加載技術，則當應用一啟動時，所有的路由組件不管使用者有沒有點擊，都會一起被加載進來．</p>
<img src="/2021/11/26/frontend-react-lazy-load/01.png" class="" title="01.png">
<span id="more"></span>
<p>此時我們先清除一下資訊後，點擊 Item1，若是一開始沒有加載 Item1 路由組件時，此時點擊後應該要向後端發起請求，但是有下圖所示並沒有發起，所以可知道一開始就會把全部路由組件加載好．</p>
<img src="/2021/11/26/frontend-react-lazy-load/02.png" class="" title="02.png">
<p>此時引入 lazy 並改寫 App.js 中引入路由組件的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component, lazy&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Route, Switch&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MyNavLink <span class="keyword">from</span> <span class="string">&#x27;./components/MyNavLink&#x27;</span></span><br><span class="line"><span class="comment">//import Item1 from &#x27;./pages/Item1&#x27;</span></span><br><span class="line"><span class="comment">//import Item2 from &#x27;./pages/Item2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Item1 = lazy(<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Item1&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> Item2 = lazy(<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Item2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是會出現以下錯物資訊</p>
<img src="/2021/11/26/frontend-react-lazy-load/03.png" class="" title="03.png">
<p>這是因為我們需要用 <code>&lt;Suspense&gt;</code> 來包裹路由組件，並設定如果加載路由組件失敗時要怎樣處理．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    &lt;Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">    &lt;/Suspense&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>此時用剛剛驗證路由組件加載方式，由下面圖中可以看出是當點擊路由組件時才加載</p>
<img src="/2021/11/26/frontend-react-lazy-load/04.png" class="" title="04.png">
<p>而我們將網路速度調慢時，則會先呈現 loading…，等到成功加載時才會呈現路由組件頁面</p>
<img src="/2021/11/26/frontend-react-lazy-load/05.png" class="" title="05.png">
<p>另外也可以寫一個 Loading 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Loading</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundColor:</span>&#x27;<span class="attr">blue</span>&#x27;&#125;&#125;&gt;</span>Loading...<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>react_extension_02/src/App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">&#x27;./components/Loading&#x27;</span></span><br><span class="line">...</span><br><span class="line">    &lt;Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">    &lt;/Suspense&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Lazy load</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - setState() 進階說明</title>
    <url>/2021/11/26/frontend-react-set-state-detail/</url>
    <content><![CDATA[<h1 id="setState-的兩種更新方式"><a href="#setState-的兩種更新方式" class="headerlink" title="setState() 的兩種更新方式"></a>setState() 的兩種更新方式</h1><ol>
<li>使用對象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用函數<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">minus = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">count</span>:state.count-<span class="number">1</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用時機 :<br>如果新狀態跟前次狀態無關，則使用對象方式<br>如果新狀態跟前次狀態有關，則使用函數方式<span id="more"></span></li>
</ol>
<h1 id="setState-的第二個參數"><a href="#setState-的第二個參數" class="headerlink" title="setState() 的第二個參數"></a>setState() 的第二個參數</h1><p>若需要在更新 state 之後做一些動作時，可以在 setState() 的第二個參數中設定一個回調函數．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 因為 setState() 是異步更新，所以此函數會在更新完後才進行回調，所以要在這邊才可以看到更新後的值</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;setState(): &quot;</span>, <span class="built_in">this</span>.state.count)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 因為 setState() 屬於異步更新，所以緊接在後查看並不會取得更新值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add(): &quot;</span>, <span class="built_in">this</span>.state.count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/26/frontend-react-set-state-detail/01.png" class="" title="01.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>setState</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - Component 優化</title>
    <url>/2021/11/27/frontend-react-component-optimization/</url>
    <content><![CDATA[<p>當子組件 B 有用到父組件的 state 時，除了初始時會調用父和子組件的 render() 外，在更新父組件狀態時，也會一起調用父和子組件的 render()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">carName</span>: <span class="string">&#x27;Honda&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    changeCar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">carName</span>: <span class="string">&#x27;BMW&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- A&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123;carName&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的車: &#123;carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>Change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;carName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- B&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>接收到的車: &#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<img src="/2021/11/27/frontend-react-component-optimization/01.png" class="" title="01.png">
<p>就算是底下這個案例，子組件已經沒有用到父組件狀態了，但是當父組件狀態更新，還是一樣會調用子組件的 render()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">carName</span>: <span class="string">&#x27;Honda&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    changeCar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">carName</span>: <span class="string">&#x27;BMW&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- A&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123;carName&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的車: &#123;carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>Change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- B&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/*<span class="tag">&lt;<span class="name">h4</span>&gt;</span>接收到的車: &#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>*/&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/27/frontend-react-component-optimization/02.png" class="" title="02.png">
<p>甚至是調用<code>setState(&#123;&#125;)</code>，即傳入空對象，也會造成呼叫父子組件的 render()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">carName</span>: <span class="string">&#x27;Honda&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    changeCar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- A&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123;carName&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的車: &#123;carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>Change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;carName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- B&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/*<span class="tag">&lt;<span class="name">h4</span>&gt;</span>接收到的車: &#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>*/&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/27/frontend-react-component-optimization/03.png" class="" title="03.png">
<p>所以以上會有兩個問題</p>
<ol>
<li>只要有執行 setState() 即使不改變狀態也會造成組件調用 render()</li>
<li>只要父組件重新 render()，就算子組件沒有用到任何父組件的狀態，也一樣會被調用 render()<br>這是因為組件中的 shouldComponentUpdate() 預設總是返回 true<br>解決方式有兩個 : 一般都是使用方法二</li>
<li>重寫 shouldComponentUpdate() 方法<br>比較新舊 state 或 props，有改變才返回 true<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">carName</span>: <span class="string">&#x27;Honda&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    changeCar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">carName</span>: <span class="string">&#x27;BMW&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sahouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Current&#x27;</span>, <span class="built_in">this</span>.props, <span class="built_in">this</span>.state)  <span class="comment">// 目前值</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Next&#x27;</span>, nextProps, nextState)       <span class="comment">// 改變值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state.carName === nextState.carName) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- A&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123;carName&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的車: &#123;carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>Change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;carName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.props.carName === nextProps.carName) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- B&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>接收到的車: &#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用 PureComponent<br>組件不再繼承 <code>Component</code> 而是繼承 <code>PureComponent</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">carName</span>: <span class="string">&#x27;Honda&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    changeCar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- A&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123;carName&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的車: &#123;carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>Change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;carName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render --- B&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>接收到的車: &#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
        <tag>Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - Fragment</title>
    <url>/2021/11/27/frontend-react-fragment/</url>
    <content><![CDATA[<p>因為當有兩個標籤時就需要用<code>&lt;div&gt;</code>將其包裹住以返回一個節點，所以會造成階層太多<br>react_extension_04/src/App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;./components/Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>react_extension_04/src/components/Hello/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">b</span>=<span class="string">&#123;2&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其結構階層如下 :</p>
<img src="/2021/11/27/frontend-react-fragment/01.png" class="" title="01.png">
<p>而我們可以使用<code>&lt;Fragment&gt;</code>替換掉<code>&lt;div&gt;</code>以減少層數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, Fragment&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其結構階層如下 :</p>
<img src="/2021/11/27/frontend-react-fragment/02.png" class="" title="02.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Fragment</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - Context</title>
    <url>/2021/11/27/frontend-react-context/</url>
    <content><![CDATA[<p><font color="#FF0000">一般應用都不用 context 方式，而是直接用<code>react-redux</code></font><br>假設一個情境是 A 組件下有一個子組件 B，而組件 B 下右有一個組件 C，即 C 為 組件 A 的孫組件．<br>此時若 組件 B 和 C 都要用到組件 A 的狀態時，則可以透過 props 一路傳下去，如下所示 :</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">username</span>: <span class="string">&#x27;tom&#x27;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的用戶名是: &#123;this.state.username&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">username</span>=<span class="string">&#123;this.state.username&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>從 A 組件接收到的用戶名是: &#123;this.props.username&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">C</span> <span class="attr">username</span>=<span class="string">&#123;this.props.username&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 C 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>從 A 組件接收到的用戶名是: &#123;this.props.username&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>畫面呈現 :</p>
<img src="/2021/11/27/frontend-react-context/01.png" class="" title="01.png">
<p>此時若組件 B 並不需要使用到組件 A 的狀態，而只有組件 C 需要用到的話，用以上方式也是可行，只是組件 B 需要幫忙接收並傳送狀態給組件 C<br>方法一 : 僅適用於類別式組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 context 對象</span></span><br><span class="line"><span class="keyword">const</span> MyContext = React.createContext()</span><br><span class="line"><span class="keyword">const</span> &#123;Provider&#125; = MyContext</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">username</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, age&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的用戶名是: &#123;username&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 設定後代組件都收得到 context */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;username,</span> <span class="attr">age</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">C</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 聲明接收 context</span></span><br><span class="line">    <span class="keyword">static</span> contextType = MyContext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, age&#125; = <span class="built_in">this</span>.context</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 C 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>從 A 組件接收到的用戶名是: &#123;username&#125;, age:&#123;age&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二 : 類別式及函數式皆可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 context 對象</span></span><br><span class="line"><span class="keyword">const</span> MyContext = React.createContext()</span><br><span class="line"><span class="keyword">const</span> &#123;Provider, Consumer&#125; = MyContext</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">username</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, age&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的用戶名是: &#123;username&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 設定後代組件都收得到 context */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;username,</span> <span class="attr">age</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">C</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 C 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>從 A 組件接收到的用戶名是: </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        value =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return `$&#123;value.username&#125;, age: $&#123;value.age&#125;`</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果呈現 :</p>
<img src="/2021/11/27/frontend-react-context/02.png" class="" title="02.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Context</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - Hooks</title>
    <url>/2021/11/27/frontend-react-hooks/</url>
    <content><![CDATA[<p>之前因為函數式組件沒有在函數中取得 this 實例，導致 state 及 react 生命週期… 等都不能使用，而在 react version 16.8 之後推出 hooks 後，讓函數式組件也可以使用這些 react 特性．<br>使用類別式組件的方式如下 :</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而如果沒有用 hook 時，將類別式改成函數式組件如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Count</span><br></pre></td></tr></table></figure>
<p>此時雖然可以通過檢查，但是在瀏覽器上卻出現無法讀取 state</p>

<p>此時就需要用到 hook 解決</p>
<h1 id="三種常用的-Hook"><a href="#三種常用的-Hook" class="headerlink" title="三種常用的 Hook"></a>三種常用的 Hook</h1><ol>
<li><p>State Hook : React.useState()<br>此 hook 可以讓我們的函數式組件使用 state<br>使用 React.setState(初始狀態) 初始化狀態並且會兩個元素的數組，第一個元素是當前狀態，第二個元素是更新狀態的函數．<br>而返回的更新狀態函數，也有兩種方式，一種是傳數值直接更新，另一種是傳函數．<br>當頁面上有多個狀態就需要呼叫多次 React.setState(初始狀態) 將狀態一一初始化並取得數組．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// React.setState(初始狀態) 並返回兩個元素的數組</span></span><br><span class="line">    <span class="comment">// 第一個元素是當前狀態</span></span><br><span class="line">    <span class="comment">// 第二個元素是更新狀態的函數</span></span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [name, setName] = React.useState(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 更新狀態的函數有兩種傳參</span></span><br><span class="line">        <span class="comment">// 第一種傳非函數數值，直接指定新狀態</span></span><br><span class="line">        <span class="comment">//setCount(count+1)</span></span><br><span class="line">        <span class="comment">// 第二種傳函數</span></span><br><span class="line">        setCount(<span class="function"><span class="params">count</span> =&gt;</span> count+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        setName(<span class="string">&#x27;steven&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Nmae: &#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeName&#125;</span>&gt;</span>Change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Count</span><br></pre></td></tr></table></figure></li>
<li><p>Effect Hook : React.useEffect()<br>此 hook 可以讓我們的函數式組件使用 react 生命週期回調<br>使用類別組件在組件一掛載後設定定時器自動累加 count，並且在卸載組件時清除定時器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unmount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(<span class="function"><span class="params">state</span>=&gt;</span>(&#123;<span class="attr">count</span>:state.count+<span class="number">1</span>&#125;))</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.unmount&#125;</span>&gt;</span>Unmonut<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而要在函數式組件中實作的話，則需要借助 React.useEffect()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// React.setState(初始狀態) 並返回兩個元素的數組</span></span><br><span class="line">    <span class="comment">// 第一個元素是當前狀態</span></span><br><span class="line">    <span class="comment">// 第二個元素是更新狀態的函數</span></span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [name, setName] = React.useState(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// React.useEffect(發生變化時的回調方法, 受監測的變數數組)</span></span><br><span class="line">    <span class="comment">// react 會監測第二個參數中的變數，如果有改變則調用第一個參數的函數</span></span><br><span class="line">    <span class="comment">// 若不寫第二個參數則表示全部監測，若寫空數組 [] 則表示全部不監測</span></span><br><span class="line">    <span class="comment">// 而第一個參數其函數的返回函數，會在組件被卸載時調用</span></span><br><span class="line">    React.useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            setCount(<span class="function"><span class="params">count</span>=&gt;</span>count+<span class="number">1</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;  <span class="comment">// 此方法會在組件被卸載時調用</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 更新狀態的函數有兩種傳參</span></span><br><span class="line">        <span class="comment">// 第一種傳非函數數值，直接指定新狀態</span></span><br><span class="line">        <span class="comment">//setCount(count+1)</span></span><br><span class="line">        <span class="comment">// 第二種傳函數</span></span><br><span class="line">        setCount(<span class="function"><span class="params">count</span> =&gt;</span> count+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        setName(<span class="string">&#x27;steven&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Nmae: &#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeName&#125;</span>&gt;</span>Change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;unmount&#125;</span>&gt;</span>Unmount<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Count</span><br></pre></td></tr></table></figure></li>
<li><p>Ref Hook : React.useRef()<br>此 Hook 可以讓我們的函數式組件取得標籤對象的參考，進而儲存或取得數值<br>類別式組件寫法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    myRef = React.createRef()</span><br><span class="line"></span><br><span class="line">    add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unmount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    show = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.myRef.current.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(<span class="function"><span class="params">state</span>=&gt;</span>(&#123;<span class="attr">count</span>:state.count+<span class="number">1</span>&#125;))</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.unmount&#125;</span>&gt;</span>Unmonut<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.show&#125;</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函數式組件寫法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// React.setState(初始狀態) 並返回兩個元素的數組</span></span><br><span class="line">    <span class="comment">// 第一個元素是當前狀態</span></span><br><span class="line">    <span class="comment">// 第二個元素是更新狀態的函數</span></span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [name, setName] = React.useState(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> myRef = React.useRef()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// React.useEffect(發生變化時的回調方法, 受監測的變數數組)</span></span><br><span class="line">    <span class="comment">// react 會監測第二個參數中的變數，如果有改變則調用第一個參數的函數</span></span><br><span class="line">    <span class="comment">// 若不寫第二個參數則表示全部監測，若寫空數組 [] 則表示全部不監測</span></span><br><span class="line">    React.useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            setCount(<span class="function"><span class="params">count</span>=&gt;</span>count+<span class="number">1</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 更新狀態的函數有兩種傳參</span></span><br><span class="line">        <span class="comment">// 第一種傳非函數數值，直接指定新狀態</span></span><br><span class="line">        <span class="comment">//setCount(count+1)</span></span><br><span class="line">        <span class="comment">// 第二種傳函數</span></span><br><span class="line">        setCount(<span class="function"><span class="params">count</span> =&gt;</span> count+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        setName(<span class="string">&#x27;steven&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(myRef.current.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Nmae: &#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeName&#125;</span>&gt;</span>Change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;unmount&#125;</span>&gt;</span>Unmount<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;myRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;show&#125;</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Count</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>useState</tag>
        <tag>useEffect</tag>
        <tag>useRef</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 動態插入組件透過 props</title>
    <url>/2021/11/27/frontend-react-render-props/</url>
    <content><![CDATA[<p>之前構建組件 A 有子組件 B，而組件 B 亦有一個子組件 C，是用以下方式構建出來的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">C</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 C 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>畫面呈現 :</p>
<img src="/2021/11/27/frontend-react-render-props/01.png" class="" title="01.png">
<p>想用 html 嵌套寫法，像這樣<code>&lt;B&gt;&lt;C/&gt;&lt;/B&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">C</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 C 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>結果呈現並沒有出現組件 C</p>
<img src="/2021/11/27/frontend-react-render-props/02.png" class="" title="02.png">
<p>這是因為 react 的標籤體會被放在 <code>this.props.children</code>，所需要在組件 B 中將其加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>這樣畫面就有出現組件 C</p>
<img src="/2021/11/27/frontend-react-render-props/03.png" class="" title="03.png">
<p>另一種方式也可以達到相同效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span><span class="tag">&lt;<span class="name">C</span>/&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;this.props.render()&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 C 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/27/frontend-react-render-props/04.png" class="" title="04.png">
<p>另外我們可以用以下方式將父組件狀態傳給子組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">render</span>=<span class="string">&#123;(name)</span>=&gt;</span><span class="tag">&lt;<span class="name">C</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;/</span>&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>&#125; </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;this.props.render(this.state.name)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 C 組件, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/27/frontend-react-render-props/05.png" class="" title="05.png">
<p>使用此種方式的好處就是可以依據需要動態插入合適的組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./A.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 A 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">render</span>=<span class="string">&#123;(name)</span>=&gt;</span><span class="tag">&lt;<span class="name">D</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;/</span>&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>&#125; </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 B 組件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;this.props.render(this.state.name)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 C 組件, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是 D 組件, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/27/frontend-react-render-props/06.png" class="" title="06.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Dynamic Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 控制錯誤邊界</title>
    <url>/2021/11/28/frontend-react-error-boundary/</url>
    <content><![CDATA[<p>考慮以下代碼，一個父組件裡面有個子組件顯示使用者資訊<br>src/Parent.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是 Parent 組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>src/Child.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">users</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;steven&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是 Child 組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    this.state.users.map(user=&gt;&#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">h4</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125; --- &#123;user.age&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br></pre></td></tr></table></figure>
<p>畫面呈現 :</p>
<img src="/2021/11/28/frontend-react-error-boundary/01.png" class="" title="01.png">
<p>此時若子組件所取得的資料格式有問題，如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state = &#123;<span class="attr">users</span>: <span class="string">&#x27;sba&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>則整個網頁會無法使用，如下所示 :</p>
<img src="/2021/11/28/frontend-react-error-boundary/02.png" class="" title="02.png">
<p>所以我們想要只有出錯的子組件無法顯示，而正常的父組件可以顯示．<br>我們在父組件利用 getDerivedStateFromError(error) 捕捉子組件生命週期中所發生錯誤<br>src/Parent.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">hasError</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromError</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">hasError</span>:error&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidCatch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;渲染組件時出錯&#x27;</span>)</span><br><span class="line">        <span class="comment">// 一般會在此處進行反饋給服務器進行錯誤統計後，用於通知編碼人員進行處理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是 Parent 組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;this.state.hasError ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>當前網路不穩定. 稍後再試<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>:<span class="tag">&lt;<span class="name">Child</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Error Boundary</tag>
      </tags>
  </entry>
  <entry>
    <title>在前端開發環境使用的網頁伺服器</title>
    <url>/2021/11/29/tools-web-server-for-dev/</url>
    <content><![CDATA[<p>一般在前端網頁完成開發後都需要放在較成熟有效率的網頁伺服器上，比如說 : Nginx、Tomcat…等，但是前端在開發中有時候也需要使用網頁伺服器做一些開發測試，此時如果有一個較簡單無需設定的伺服器可以使用，對前端人員是很方便的．<br>類似的工具如 : <a href="https://github.com/vercel/serve">serve</a> 或 <a href="https://github.com/http-party/http-server">http-server</a><br>安裝 serve</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> npm install -g serve</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在 react 專案中執行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br></pre></td></tr></table></figure>
<img src="/2021/11/29/tools-web-server-for-dev/01.png" class="" title="01.png">
<p>就會建立一個 build 目錄</p>
<img src="/2021/11/29/tools-web-server-for-dev/02.png" class="" title="02.png">
<p>啟動 serve</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> serve -s build</span></span><br></pre></td></tr></table></figure>
<img src="/2021/11/29/tools-web-server-for-dev/03.png" class="" title="03.png">]]></content>
      <categories>
        <category>Tools</category>
        <category>serve</category>
      </categories>
      <tags>
        <tag>Web Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 上的硬碟小知識</title>
    <url>/2021/12/02/linux-hard-disk-info/</url>
    <content><![CDATA[<h1 id="如何知道硬碟容量"><a href="#如何知道硬碟容量" class="headerlink" title="如何知道硬碟容量"></a>如何知道硬碟容量</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -h</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 01.png 01.png %&#125;</span><br><span class="line">若要顯示某一個分割區，則</span><br><span class="line">```shell</span><br><span class="line">$ df -h /</span><br></pre></td></tr></table></figure>
<img src="/2021/12/02/linux-hard-disk-info/02.png" class="" title="02.png">
<span id="more"></span>
<h1 id="如何知道檔案系統類型"><a href="#如何知道檔案系統類型" class="headerlink" title="如何知道檔案系統類型"></a>如何知道檔案系統類型</h1><ol>
<li><p>use lsblk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsblk -f</span></span><br></pre></td></tr></table></figure>
<p>result:</p>
<img src="/2021/12/02/linux-hard-disk-info/03.png" class="" title="03.png"></li>
<li><p>use df</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -Th</span></span><br></pre></td></tr></table></figure>
<p>result:</p>
<img src="/2021/12/02/linux-hard-disk-info/04.png" class="" title="04.png">
<p>兩者的差異，使用 lsblk 會連沒有 mount 上的硬碟也會列上，如 : sdb，而使用 df 並沒有列出。</p>
</li>
</ol>
<h1 id="格式化硬碟使用-mkfs-ext4"><a href="#格式化硬碟使用-mkfs-ext4" class="headerlink" title="格式化硬碟使用 mkfs.ext4"></a>格式化硬碟使用 mkfs.ext4</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/sdb</span></span><br></pre></td></tr></table></figure>
<p>result:</p>
<img src="/2021/12/02/linux-hard-disk-info/05.png" class="" title="05.png">

<h1 id="掛載硬碟"><a href="#掛載硬碟" class="headerlink" title="掛載硬碟"></a>掛載硬碟</h1><p>首先要準備要將硬碟掛載在哪個目錄中，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /data</span></span><br></pre></td></tr></table></figure>
<p>result:</p>
<img src="/2021/12/02/linux-hard-disk-info/06.png" class="" title="06.png">
<p>使用 mount 掛載</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mount -o discard,defaults /dev/sdb /data</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/02/linux-hard-disk-info/07.png" class="" title="07.png">

<h1 id="檢視檔案與目錄使用空間"><a href="#檢視檔案與目錄使用空間" class="headerlink" title="檢視檔案與目錄使用空間"></a>檢視檔案與目錄使用空間</h1><p>列出 /bin 下所有檔案與目錄的空間大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> du -ah /bin</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/02/linux-hard-disk-info/08.png" class="" title="08.png">

<p>僅列出 /bin 目錄使用的空間大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> du -sh /bin</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/02/linux-hard-disk-info/09.png" class="" title="09.png">

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.tutorialspoint.com/how-to-determine-the-file-system-type-in-linux-ext2-ext3-or-ext4">https://www.tutorialspoint.com/how-to-determine-the-file-system-type-in-linux-ext2-ext3-or-ext4</a><br><a href="https://blog.gtwang.org/linux/linux-df-command-check-disk-space-usage-tutorial-script-example/">https://blog.gtwang.org/linux/linux-df-command-check-disk-space-usage-tutorial-script-example/</a><br><a href="https://phoenixnap.com/kb/linux-check-disk-space">https://phoenixnap.com/kb/linux-check-disk-space</a><br><a href="https://devopscube.com/mount-extra-disks-on-google-cloud/">https://devopscube.com/mount-extra-disks-on-google-cloud/</a><br><a href="http://it.givemepower.net/linux-command-du-view-files-and-directories-usage-space/">http://it.givemepower.net/linux-command-du-view-files-and-directories-usage-space/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Hrad Disk</tag>
      </tags>
  </entry>
  <entry>
    <title>變更 Docker 預設路徑</title>
    <url>/2021/12/03/docker-change-default-path/</url>
    <content><![CDATA[<p>一般安裝好 Docker 後，其預設路徑是在 <code>/var/lib/docker</code></p>
<img src="/2021/12/03/docker-change-default-path/01.png" class="" title="01.png">
<p>而現在想改到一個特定目錄 <code>/data/docker</code></p>
<ol>
<li><p>停止 docker 服務</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop docker.service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop docker.socket</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/03/docker-change-default-path/02.png" class="" title="02.png">
<span id="more"></span></li>
<li><p>編輯 docker.service<br>使用 vi 開啟 /lib/systemd/system/docker.service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /lib/systemd/system/docker.service</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/03/docker-change-default-path/03.png" class="" title="03.png">
<p>將</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>
<p>中加入<code>-g /data/docker</code>變成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -g /data/docker -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>
<img src="/2021/12/03/docker-change-default-path/04.png" class="" title="04.png"></li>
<li><p>複製目錄<br>將原本在 <code>/var/lib/docker</code> 下的目錄及檔案，全部複製到 <code>/data/docker</code> 下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo rsync -aqxP /var/lib/docker/ /data/docker</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/03/docker-change-default-path/05.png" class="" title="05.png"></li>
<li><p>重載並啟動</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>
<p>使用底下命令檢查設定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps aux | grep -i docker | grep -v grep</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/03/docker-change-default-path/06.png" class="" title="06.png"></li>
<li><p>驗證<br>我們可以先下載一個未下載過的 image 檔並執行，我使用官方測試用 <a href="https://hub.docker.com/_/hello-world">hello-world</a>，使用底下命令 :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/03/docker-change-default-path/07.png" class="" title="07.png">
<p>可以成功下載並執行，表示修改後並不影響功能。<br>檢查目前 docker 的 root 目錄下的 <code>/data/docker/image/overlay2/repositories.json</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cat /data/docker/image/overlay2/repositories.json</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/03/docker-change-default-path/08.png" class="" title="08.png">
<p>發現有新的 image (hello-world)<br>而在舊的目錄位置的<code>/var/lib/docker/image/overlay2/repositories.json</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cat /var/lib/docker/image/overlay2/repositories.json</span></span><br></pre></td></tr></table></figure>
<p>已經沒有再變化了，所以修改路徑成功。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝 MySQL 使用 Docker</title>
    <url>/2021/12/05/docker-install-mysql/</url>
    <content><![CDATA[<h1 id="查看適合的映像檔版本並下載"><a href="#查看適合的映像檔版本並下載" class="headerlink" title="查看適合的映像檔版本並下載"></a>查看適合的映像檔版本並下載</h1><p>查看 Docker Hub 中的 <a href="https://hub.docker.com/_/mysql">MySQL</a>，可以先看 Tags 分頁中選擇一版本</p>
<img src="/2021/12/05/docker-install-mysql/01.png" class="" title="01.png">
<span id="more"></span>
<p>我選擇 5.7.36 版，使用以下命令下載 image file</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:5.7.36</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/05/docker-install-mysql/02.png" class="" title="02.png">

<h1 id="建立資料-volume"><a href="#建立資料-volume" class="headerlink" title="建立資料 volume"></a>建立資料 volume</h1><p>MySQL 有三個地方可綁定 volume</p>
<ol>
<li>資料 : <code>/var/lib/mysql</code></li>
<li>設定 : <code>/etc/mysql</code><br>預設設定檔在 <code>/etc/mysql/my.cnf</code></li>
<li>日誌 : <code>/var/log/mysql</code><br>建立三個資料 volume 用來擺放 MySQL 相關資料，<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker volume create mysql_data</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker volume create mysql_conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker volume create mysql_logs</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/05/docker-install-mysql/03.png" class="" title="03.png"></li>
</ol>
<h1 id="啟動容器"><a href="#啟動容器" class="headerlink" title="啟動容器"></a>啟動容器</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 3306:3306 \</span></span><br><span class="line"><span class="bash">-v mysql_data:/var/lib/mysql \</span></span><br><span class="line"><span class="bash">-v mysql_conf:/etc/mysql \</span></span><br><span class="line"><span class="bash">-v mysql_logs:/var/<span class="built_in">log</span>/mysql \</span></span><br><span class="line"><span class="bash">--name mysql -e MYSQL_ROOT_PASSWORD=your_password \</span></span><br><span class="line"><span class="bash">--restart always mysql:5.7.36</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/05/docker-install-mysql/04.png" class="" title="04.png">

<h1 id="檢查安裝"><a href="#檢查安裝" class="headerlink" title="檢查安裝"></a>檢查安裝</h1><p>除了使用以下命令查看容器是否建立成功外，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker ps</span></span><br></pre></td></tr></table></figure>
<p>也可以使用底下命令進入容器中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo docker exec -it mysql bash</span><br></pre></td></tr></table></figure>
<p>或是使用 MySQL Client 連線</p>
<img src="/2021/12/05/docker-install-mysql/05.png" class="" title="05.png">

<p><font color="#FF0000">注意 : 若使用 MySQL 版本為 8 以上 </font><br>如果出現以下錯誤，則表示不允許遠端登入</p>
<img src="/2021/12/05/docker-install-mysql/06.png" class="" title="06.png">
<p>則需要使用以下命令先進入容器中，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -it mysql bash</span></span><br></pre></td></tr></table></figure>
<p>接著輸入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER root IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;your_password&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<p>就可以透過 MySQL Client 登入<br>若是使用 MySQL 版本為 5 的，則進入容器中的 MySQL 命令列使用以下命令，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;your_password&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<p><font color="#FF0000">注意 : 若是使用 GCP 建立 MySQL 的話，還需要開始防火牆，請參照 GCP - 設定防火牆規則</font></p>
<p><font color="#FF0000">注意 : 網路連線，尤其是公司網路，連不上時試試用手機網路</font></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>GCP - 設定防火牆規則</title>
    <url>/2021/12/07/gcp-set-up-firewall-rules/</url>
    <content><![CDATA[<h1 id="防火牆規則設定"><a href="#防火牆規則設定" class="headerlink" title="防火牆規則設定"></a>防火牆規則設定</h1><p>選擇一個專案，由他的 Dashboard 中進入 Compute Engine</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/01.png" class="" title="01.png">

<p>點選 Set up firewall rules 設定防火牆規則</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/02.png" class="" title="02.png">

<p>點選 CREATE FIREWALL RULE 建立新的防火牆規則</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/03.png" class="" title="03.png">

<p>輸入 Name and Description，依需要設定其他部分</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/04.png" class="" title="04.png">

<p>而 Targets 有三種選項 :</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/05.png" class="" title="05.png">
<ol>
<li>All instances in the network : 建立一個規則讓所有連上網路的實例使用</li>
<li>Specified target tags : 建立帶有 TAG 的規則讓有需要的實例使用</li>
<li>Specified service account : 為某個服務建立規則使用<br>這邊使用建立一個 tag 為 mysql-server 的防火牆規則，並且使用 <code>0.0.0.0/0</code> 不限定來源 ip 範圍<img src="/2021/12/07/gcp-set-up-firewall-rules/06.png" class="" title="06.png">
<span id="more"></span>
設定允許哪個 PORT 讓哪種封包通過<img src="/2021/12/07/gcp-set-up-firewall-rules/07.png" class="" title="07.png"></li>
</ol>
<p>按下 CREATE 後，可以看見規則已經被建立好了，但是還沒有被我們的 Compute Engine 所引用</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/08.png" class="" title="08.png">

<h1 id="引用防火牆規則"><a href="#引用防火牆規則" class="headerlink" title="引用防火牆規則"></a>引用防火牆規則</h1><p>回到 Compute Engine 中，點選要設定防火牆規則的 instance</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/09.png" class="" title="09.png">

<p>點擊 EDIT 進行修改</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/10.png" class="" title="10.png">

<p>往下滑，找到 Firewalls 下的 Network tahs 加入剛剛建立的防火牆規則 <code>mysql-server</code></p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/11.png" class="" title="11.png">

<p>記得往下滑到底，按下 SAVE</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/12.png" class="" title="12.png">

<h1 id="檢查"><a href="#檢查" class="headerlink" title="檢查"></a>檢查</h1><p>回到 VPC network 的 Firewall 中，點選防火牆規則 <code>mysql-server</code></p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/13.png" class="" title="13.png">

<p>滑到最底下就可以看到有哪些 instance 有使用此規則</p>
<img src="/2021/12/07/gcp-set-up-firewall-rules/14.png" class="" title="14.png">]]></content>
      <categories>
        <category>GCP</category>
      </categories>
      <tags>
        <tag>Firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝 Redis 使用 Docker</title>
    <url>/2021/12/08/docker-install-redis/</url>
    <content><![CDATA[<h1 id="查看適合的映像檔版本並下載"><a href="#查看適合的映像檔版本並下載" class="headerlink" title="查看適合的映像檔版本並下載"></a>查看適合的映像檔版本並下載</h1><p>查看 Docker Hub 中的 <a href="https://hub.docker.com/_/redis">Redis</a>，可以先看 Tags 分頁中選擇一版本</p>
<img src="/2021/12/08/docker-install-redis/01.png" class="" title="01.png">
<span id="more"></span>
<p>我選擇 6.2.6 版，使用以下命令下載 image file</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull redis:6.2.6</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/08/docker-install-redis/02.png" class="" title="02.png">

<h1 id="建立資料-volume"><a href="#建立資料-volume" class="headerlink" title="建立資料 volume"></a>建立資料 volume</h1><p>Redis 的相關目錄與檔案</p>
<ol>
<li>資料 : <code>/data</code></li>
<li>設定 : <code>/usr/local/etc/redis</code><br>預設設定檔在 <code>/usr/local/etc/redis/redis.conf</code></li>
<li>日誌 :<br>建立兩個資料 volume 用來擺放 Redis 相關資料，<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker volume create redis_data</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker volume create redis_conf</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/08/docker-install-redis/03.png" class="" title="03.png"></li>
</ol>
<h1 id="啟動容器"><a href="#啟動容器" class="headerlink" title="啟動容器"></a>啟動容器</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 3306:3306 \</span></span><br><span class="line"><span class="bash">-v mysql_data:/var/lib/mysql \</span></span><br><span class="line"><span class="bash">-v mysql_conf:/etc/mysql \</span></span><br><span class="line"><span class="bash">-v mysql_logs:/var/<span class="built_in">log</span>/mysql \</span></span><br><span class="line"><span class="bash">--name mysql -e MYSQL_ROOT_PASSWORD=your_password \</span></span><br><span class="line"><span class="bash">--restart always mysql:5.7.36</span></span><br></pre></td></tr></table></figure>


<h1 id="檢查安裝"><a href="#檢查安裝" class="headerlink" title="檢查安裝"></a>檢查安裝</h1><p>除了使用以下命令查看容器是否建立成功外，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker ps</span></span><br></pre></td></tr></table></figure>
<p>也可以使用底下命令進入容器中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo docker exec -it mysql bash</span><br></pre></td></tr></table></figure>
<p>或是使用 MySQL Client 連線</p>


<p><font color="#FF0000">注意 : 若使用 MySQL 版本為 8 以上 </font><br>如果出現以下錯誤，則表示不允許遠端登入</p>

<p>則需要使用以下命令先進入容器中，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -it mysql bash</span></span><br></pre></td></tr></table></figure>
<p>接著輸入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER root IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;your_password&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<p>就可以透過 MySQL Client 登入<br>若是使用 MySQL 版本為 5 的，則進入容器中的 MySQL 命令列使用以下命令，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;your_password&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<p><font color="#FF0000">注意 : 若是使用 GCP 建立 MySQL 的話，還需要開始防火牆，請參照 GCP - 設定防火牆規則</font></p>
<p><font color="#FF0000">注意 : 網路連線，尤其是公司網路，連不上時試試用手機網路</font></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>GCP - 為 VM 建立快照</title>
    <url>/2021/12/08/gcp-create-snapshot/</url>
    <content><![CDATA[<p>在 Compute Engine 中點選 Snapshot</p>
<img src="/2021/12/08/gcp-create-snapshot/01.png" class="" title="01.png">

<p>點選上方的建立快照</p>
<img src="/2021/12/08/gcp-create-snapshot/02.png" class="" title="02.png">

<p>選擇一個要建立快照的資料來源</p>
<img src="/2021/12/08/gcp-create-snapshot/03.png" class="" title="03.png">

<p>我們位置選擇單一地區就好</p>
<img src="/2021/12/08/gcp-create-snapshot/04.png" class="" title="04.png">

<p><font color="FF0000">注意 : 額外的硬碟不會自動加入該虛擬機並 mount</font><br>若該虛擬機上有另外的磁碟的話，快照並不會也包含該硬碟，也就是說使用快照恢復開機，額外的硬碟不會自動加入該虛擬機並 mount。<br>以我之前建立一個虛擬機並額外加上一個硬碟，將該硬碟 (sdb) 掛載在 /data 目錄上當作 docker 儲存體，<br>當我使用該快照建立虛擬機後 (注意 : 此虛擬機設定必須加入額外硬碟，否則不會出現在用快照建立的虛擬機中)，進入虛擬機後會發現雖然 docker 預設路徑改了，但是卻沒有之前用來測試的 hello-world 映像檔</p>
<img src="/2021/12/08/gcp-create-snapshot/05.png" class="" title="05.png">
<p>使用 lsblk 查看硬碟狀態，有該硬碟但是卻沒有掛載到 /data</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsblk -f</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/08/gcp-create-snapshot/06.png" class="" title="06.png">
<p>所以需要重新掛載</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mount -o discard,defaults /dev/sdb /data</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/08/gcp-create-snapshot/07.png" class="" title="07.png">
<p>並且重新啟動 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop docker.service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop docker.socket</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/08/gcp-create-snapshot/08.png" class="" title="08.png">]]></content>
      <categories>
        <category>GCP</category>
      </categories>
      <tags>
        <tag>Snapshot</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 上安裝 Docker</title>
    <url>/2021/12/08/linux-install-docker/</url>
    <content><![CDATA[<p>依照<a href="https://docs.docker.com/engine/install/ubuntu/">Docker 官網</a> 基本上就可以順利安裝成功</p>
<ol>
<li>注意支援 OS 版本，每種 Linux 版本都不同，這邊使用 Ubuntu</li>
</ol>
<ul>
<li>Ubuntu Impish 21.10</li>
<li>Ubuntu Hirsute 21.04</li>
<li>Ubuntu Focal 20.04 (LTS)</li>
<li>Ubuntu Bionic 18.04 (LTS)</li>
</ul>
<ol start="2">
<li><p>移除舊版本<br>舊版本可能會造成錯誤，所以先將它們移除乾淨</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get remove docker docker-engine docker.io containerd runc</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/08/linux-install-docker/01.png" class="" title="01.png"></li>
<li><p>設置 Repository</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install \</span></span><br><span class="line"><span class="bash">    ca-certificates \</span></span><br><span class="line"><span class="bash">    curl \</span></span><br><span class="line"><span class="bash">    gnupg \</span></span><br><span class="line"><span class="bash">    lsb-release</span></span><br></pre></td></tr></table></figure></li>
<li><p>加入 Docker 官方金鑰</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用穩定版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> \</span></span><br><span class="line"><span class="bash">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span></span><br><span class="line"><span class="string"><span class="bash">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span><br></pre></td></tr></table></figure></li>
<li><p>安裝 Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure></li>
<li><p>驗證</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/08/linux-install-docker/02.png" class="" title="02.png"></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 001 基礎組件使用</title>
    <url>/2021/12/16/frontend-material-ui-tutorial-001-basic/</url>
    <content><![CDATA[<h1 id="專案初始化"><a href="#專案初始化" class="headerlink" title="專案初始化"></a>專案初始化</h1><p>  使用 <code>create-react-app</code> 建立 React 專案，安裝路由套件 react-router-dom<br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install react-router-dom@5.2.1</span></span><br></pre></td></tr></table></figure><br>  準備兩個連結，分別是連到 Crate 和 Note 頁面<br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/01.png" class="" title="01.png"><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/02.png" class="" title="02.png"><br>  安裝 Material UI 套件，我使用 v4.0 版<br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/core</span></span><br></pre></td></tr></table></figure><br>  因為 Material-UI 使用 Roboto Font，所以我們要在 index.html 中引入<br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<span id="more"></span>
<h1 id="Typography"><a href="#Typography" class="headerlink" title="Typography"></a><a href="https://v4.mui.com/components/typography/#component">Typography</a></h1>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/03.png" class="" title="03.png">
<p>  在 Create 組件中引入 Typography<br>  src/pages/Create.jsx<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Typography&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                Create a new Note</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/04.png" class="" title="04.png"><br>  variant : 指定形式 (h1、h2、h3、…)<br>  color : 指定顏色<br>  align : 指定對齊方式</p>
<p>  在增加一個 Typography 組件<br>  src/pages/Create.jsx<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Typography&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    Create a new Note</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">noWrap</span>=<span class="string">&#123;false&#125;</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur</span></span><br><span class="line"><span class="xml">        unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam</span></span><br><span class="line"><span class="xml">        dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  noWrap : 預設為 false，則超過一行的文字不會變成 …<br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/05.png" class="" title="05.png"><br>  若為 true，則超過的部分會變成 …<br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/06.png" class="" title="06.png"></p>
<p>  再加入兩個 Typography<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">                &lt;Typography variant=<span class="string">&quot;h6&quot;</span>&gt;</span><br><span class="line">                    h6</span><br><span class="line">                &lt;/Typography&gt;</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&quot;h6&quot;</span> <span class="attr">component</span>=<span class="string">&quot;h2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    h2</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/07.png" class="" title="07.png"><br>  因為我們第二個 Typography 有指定<code>component=&quot;h2&quot;</code>所以在瀏覽器看到的 Tag 就會被成<code>&lt;h2&gt;</code></p>
<p>  我們在第二個 Typography 中加入<code>gutterBottom</code><br>  沒有加<code>gutterBottom</code><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/08.png" class="" title="08.png"><br>  有加<code>gutterBottom</code>，在文字底下會多間隙<br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/09.png" class="" title="09.png"></p>
<p>  <a href="https://v4.mui.com/api/typography/">詳細 API</a></p>
<h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a><a href="https://v4.mui.com/components/buttons/">Button</a></h1>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/10.png" class="" title="10.png">
<p>  在 Create 組件中引入 Button<br>  src/pages/Create.jsx<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Button&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span> <span class="attr">variant</span>=<span class="string">&quot;contained&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span> <span class="attr">variant</span>=<span class="string">&quot;outlined&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/11.png" class="" title="11.png"></p>
<h1 id="Button-Group"><a href="#Button-Group" class="headerlink" title="Button Group"></a><a href="https://v4.mui.com/components/button-group/">Button Group</a></h1><p>  在 Create 組件中引入 Button Group<br>  src/pages/Create.jsx<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Button&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ButtonGroup</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>One<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ButtonGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ButtonGroup</span> <span class="attr">variant</span>=<span class="string">&quot;contained&quot;</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>One<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ButtonGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/12.png" class="" title="12.png"></p>
<p>  設定按鈕點擊<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;You clicked me&#x27;</span>)&#125;type=<span class="string">&quot;submit&quot;</span> color=<span class="string">&quot;secondary&quot;</span>   variant=<span class="string">&quot;contained&quot;</span>&gt;Submit&lt;/Button&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="Container"><a href="#Container" class="headerlink" title="Container"></a><a href="https://v4.mui.com/components/container/">Container</a></h1><p>  使用 <div> 包裹組件<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/13.png" class="" title="13.png"></p>
<p>  使用 <container> 包裹組件，會讓這些組件集中在頁面中間，左右都會留一些間隙<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">container</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/14.png" class="" title="14.png"></p>
<h1 id="Icons"><a href="#Icons" class="headerlink" title="Icons"></a><a href="https://v4.mui.com/components/icons/">Icons</a></h1><p>  首先安裝套件<br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/icons</span></span><br></pre></td></tr></table></figure><br>  <a href="https://v4.mui.com/components/material-icons/">可觀看和查詢所有的 Icons</a><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/15.png" class="" title="15.png"><br>  首先找到想要使用的 Icon 並點擊他<br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/16.png" class="" title="16.png"><br>  在跳出視窗中，複製上面的引入方式<br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/17.png" class="" title="17.png"><br>  將剛剛複製的引用方式，貼到要使用的檔案中並使用它<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> AcUnitOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AcUnitOutlined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                &#123;/* Icon */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">AcUnitOutlinedIcon</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">AcUnitOutlinedIcon</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span> <span class="attr">fontSize</span>=<span class="string">&quot;large&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">AcUnitOutlinedIcon</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span> <span class="attr">fontSize</span>=<span class="string">&quot;small&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">AcUnitOutlinedIcon</span> <span class="attr">color</span>=<span class="string">&quot;action&quot;</span> <span class="attr">fontSize</span>=<span class="string">&quot;small&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">AcUnitOutlinedIcon</span> <span class="attr">color</span>=<span class="string">&quot;error&quot;</span> <span class="attr">fontSize</span>=<span class="string">&quot;small&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">AcUnitOutlinedIcon</span> <span class="attr">color</span>=<span class="string">&quot;disabled&quot;</span> <span class="attr">fontSize</span>=<span class="string">&quot;small&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/18.png" class="" title="18.png"></p>
<p>  如果要在 Button 中引用，Material UI 提供兩個屬性<code>startIcon</code>和<code>endIcon</code><br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Button </span><br><span class="line">    type=<span class="string">&quot;submit&quot;</span> </span><br><span class="line">    color=<span class="string">&quot;secondary&quot;</span> </span><br><span class="line">    variant=<span class="string">&quot;contained&quot;</span></span><br><span class="line">    startIcon=&#123;<span class="xml"><span class="tag">&lt;<span class="name">AcUnitOutlinedIcon</span> /&gt;</span></span>&#125;</span><br><span class="line">    endIcon=&#123;<span class="xml"><span class="tag">&lt;<span class="name">AcUnitOutlinedIcon</span> /&gt;</span></span>&#125;&gt;Submit&lt;/Button&gt;</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/16/frontend-material-ui-tutorial-001-basic/19.png" class="" title="19.png"></p>
<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/master">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Basic</tag>
        <tag>Typography</tag>
        <tag>Button</tag>
        <tag>Button Group</tag>
        <tag>Container</tag>
        <tag>Icon</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 002 使用自定義 CSS</title>
    <url>/2021/12/17/frontend-material-ui-tutorial-002-custom-css/</url>
    <content><![CDATA[<h1 id="類別組件使用自定義-css"><a href="#類別組件使用自定義-css" class="headerlink" title="類別組件使用自定義 css"></a>類別組件使用自定義 css</h1><ol>
<li>引入<br>在代碼中引入<code>import &#123; withStyles &#125; from &quot;@material-ui/core/styles&quot;</code></li>
<li>創建樣式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">btn</span>: &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;violet&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&amp;:hover&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">backgroundColor</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">textDecoration</span>: <span class="string">&#x27;underline&#x27;</span>,</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li>使用<br>由 props 中可以取的 classes，這是由 Material UI 幫我們封裝的物件，接著在組件中透過<code>className</code>設定自定義 CSS<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; classes &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Typography</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">className</span>=<span class="string">&#123;classes.title&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">variant</span>=<span class="string">&quot;h6&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">color</span>=<span class="string">&quot;textSecondary&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">component</span>=<span class="string">&quot;h2&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">gutterBottom</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                Create a new note</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Button</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">className</span>=<span class="string">&#123;classes.btn&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;You clicked me&#x27;)&#125;</span></span><br><span class="line"><span class="xml">                type=&quot;sumbit&quot;</span></span><br><span class="line"><span class="xml">                color=&quot;secondary&quot;</span></span><br><span class="line"><span class="xml">                variant=&quot;contained&quot;</span></span><br><span class="line"><span class="xml">                endIcon=&#123;<span class="tag">&lt;<span class="name">KeyboardArrowRightIcon</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">            &gt;</span></span><br><span class="line"><span class="xml">                Submit</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (Create)</span><br></pre></td></tr></table></figure>
<img src="/2021/12/17/frontend-material-ui-tutorial-002-custom-css/01.png" class="" title="01.png"></li>
</ol>
<h1 id="函數組件使用自定義-css"><a href="#函數組件使用自定義-css" class="headerlink" title="函數組件使用自定義 css"></a>函數組件使用自定義 css</h1><ol>
<li>引入<br>在代碼中引入<code>import &#123; makeStyles &#125; from &quot;@material-ui/core/styles&quot;</code></li>
<li>創建樣式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useStyles = makeStyles(&#123;</span><br><span class="line">    <span class="attr">btn</span>: &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;violet&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&amp;:hover&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">backgroundColor</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">textDecoration</span>: <span class="string">&#x27;underline&#x27;</span>,</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>使用<br>由 props 中可以取的 classes，這是由 Material UI 幫我們封裝的物件，接著在組件中透過<code>className</code>設定自定義 CSS<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Create</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">const</span> classes = useStyles()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Typography</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">className</span>=<span class="string">&#123;classes.title&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">variant</span>=<span class="string">&quot;h6&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">color</span>=<span class="string">&quot;textSecondary&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">component</span>=<span class="string">&quot;h2&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">gutterBottom</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                Show a Note</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Button</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">className</span>=<span class="string">&#123;classes.btn&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;You clicked me&#x27;)&#125;</span></span><br><span class="line"><span class="xml">                type=&quot;sumbit&quot;</span></span><br><span class="line"><span class="xml">                color=&quot;secondary&quot;</span></span><br><span class="line"><span class="xml">                variant=&quot;contained&quot;</span></span><br><span class="line"><span class="xml">                endIcon=&#123;<span class="tag">&lt;<span class="name">KeyboardArrowRightIcon</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">            &gt;</span></span><br><span class="line"><span class="xml">                Submit</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/17/frontend-material-ui-tutorial-002-custom-css/02.png" class="" title="02.png"></li>
</ol>
<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/custom-css">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Custom CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 003 使用自定義 Theme</title>
    <url>/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/</url>
    <content><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol>
<li>查詢要覆寫值<br><a href="https://v4.mui.com/customization/default-theme/#default-theme">Material UI Theme 提供的屬性與預設值</a><br>可以利用以上連結查詢出我們想要覆寫的屬性值，比如說我們想改變 primary 的顏色值<img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/01.png" class="" title="01.png">
<span id="more"></span>
由上圖可知是放在<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">palette: &#123;</span><br><span class="line">    <span class="attr">primary</span>: &#123;</span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;#3f51b5&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>引用<br>在 App.jsx 中引用<code>import &#123; createTheme, ThemeProvider &#125; from &#39;@material-ui/core&#39;</code></li>
<li>創建 Theme 並覆寫<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> theme = createTheme(&#123;</span><br><span class="line">  <span class="attr">palette</span>: &#123;</span><br><span class="line">    <span class="attr">primary</span>: &#123;</span><br><span class="line">      <span class="attr">main</span>: <span class="string">&#x27;#FEFEFE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>使用 ThemeProvider 設定<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/create&#x27;</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/note&#x27;</span>&gt;</span>Note<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/create&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Create&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/note&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Note&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在組件中使用<br>因為是改 Theme 所以在專案中的任意 Material UI 組件，都可以用原本的方式取得<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;You clicked me&#x27;</span>)&#125;</span><br><span class="line">    type=<span class="string">&quot;sumbit&quot;</span></span><br><span class="line">    color=<span class="string">&quot;primary&quot;</span></span><br><span class="line">    variant=<span class="string">&quot;contained&quot;</span></span><br><span class="line">    endIcon=&#123;<span class="xml"><span class="tag">&lt;<span class="name">KeyboardArrowRightIcon</span> /&gt;</span></span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">    Submit</span><br><span class="line">&lt;/Button&gt;</span><br></pre></td></tr></table></figure>
按鈕使用的顏色是原本 primary<img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/02.png" class="" title="02.png">
按鈕使用的顏色是自定義 primary<img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/03.png" class="" title="03.png"></li>
</ol>
<h1 id="使用色系"><a href="#使用色系" class="headerlink" title="使用色系"></a><a href="https://v4.mui.com/customization/color/">使用色系</a></h1><p>  Material UI 提供了一些色系可以使用<br>  <img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/04.png" class="" title="04.png"></p>
<ol>
<li>引用色系<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; purple &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/colors&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>使用色系覆寫<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> theme = createTheme(&#123;</span><br><span class="line">  <span class="attr">palette</span>: &#123;</span><br><span class="line">    <span class="attr">primary</span>: &#123;</span><br><span class="line">      <span class="attr">main</span>: <span class="string">&#x27;#FEFEFE&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">secondary</span>: purple</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>使用<br>原本使用方式相同<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    type=<span class="string">&quot;sumbit&quot;</span></span><br><span class="line">    color=<span class="string">&quot;secondary&quot;</span></span><br><span class="line">    variant=<span class="string">&quot;contained&quot;</span></span><br><span class="line">    endIcon=&#123;<span class="xml"><span class="tag">&lt;<span class="name">KeyboardArrowRightIcon</span> /&gt;</span></span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">    Submit</span><br><span class="line">&lt;/Button&gt;</span><br></pre></td></tr></table></figure>
預設<img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/05.png" class="" title="05.png">
覆寫後<img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/06.png" class="" title="06.png"></li>
</ol>
<h1 id="變更字型"><a href="#變更字型" class="headerlink" title="變更字型"></a>變更字型</h1><p>  使用 <a href="https://fonts.google.com/">Google Fonts</a> 提供的字型</p>
<ol>
<li>挑選字型並取得使用方式<br>我挑選了 <a href="https://fonts.google.com/specimen/Quicksand">Quicksand</a><img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/07.png" class="" title="07.png">
點選所要的字型大小，選擇 <link> 方式並複製底下的字串<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.gstatic.com&quot;</span> <span class="attr">crossorigin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&amp;display=swap&quot;</span>         <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/08.png" class="" title="08.png">
將上面字串複製到 public/index.html 裡<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;      display=swap&quot;</span> /  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.gstatic.com&quot;</span> <span class="attr">crossorigin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&amp;  display=swap&quot;</span>       <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Material UI Tutorial<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>覆寫預設值<br>src/App.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> theme = createTheme(&#123;</span><br><span class="line">  <span class="attr">palette</span>: &#123;</span><br><span class="line">    <span class="attr">primary</span>: &#123;</span><br><span class="line">      <span class="attr">main</span>: <span class="string">&#x27;#FEFEFE&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">secondary</span>: purple</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">typography</span>: &#123;</span><br><span class="line">    <span class="attr">fontFamily</span>: <span class="string">&#x27;Quicksand&#x27;</span>,</span><br><span class="line">    <span class="attr">fontWeightLight</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">fontWeightRegular</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">fontWeightMedium</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">fontWeightBold</span>: <span class="number">700</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
預設<img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/09.png" class="" title="09.png">
覆寫後<img src="/2021/12/18/frontend-material-ui-tutorial-003-custom-theme/10.png" class="" title="10.png"></li>
</ol>
<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/custom-theme">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Custom Theme</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 004 Text Field</title>
    <url>/2021/12/18/frontend-material-ui-tutorial-004-text-field/</url>
    <content><![CDATA[<p><a href="https://v4.mui.com/components/text-fields/">Text Field</a></p>
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/01.png" class="" title="01.png">
<span id="more"></span>
<p>引入<code>import TextField from &#39;@material-ui/core/TextField&#39;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> TextField <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/TextField&#x27;</span></span><br></pre></td></tr></table></figure>
<p>加入一個 Text Field 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form noValidate autoComplete=<span class="string">&quot;off&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">TextField</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">label</span>=<span class="string">&quot;Note Title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/02.png" class="" title="02.png">
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/03.png" class="" title="03.png">

<p>加上外框</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form noValidate autoComplete=<span class="string">&quot;off&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">TextField</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">label</span>=<span class="string">&quot;Note Title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">variant</span>=<span class="string">&quot;outlined&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/04.png" class="" title="04.png">
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/05.png" class="" title="05.png">

<p>加上與視窗同寬與是必要項 (在 label 後會多加 *)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form noValidate autoComplete=<span class="string">&quot;off&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">TextField</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">label</span>=<span class="string">&quot;Note Title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">variant</span>=<span class="string">&quot;outlined&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">fullWidth</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">required</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/06.png" class="" title="06.png">

<p>使用自定義 CSS 方式加寬與上下組件之間邊界寬，並設定以 <a href="https://www.w3schools.com/cssref/playit.asp?filename=playcss_display&preval=block">block</a> 方式呈現</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; withStyles &#125; <span class="keyword">from</span> <span class="string">&quot;@material-ui/core/styles&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">field</span>: &#123;</span><br><span class="line">        <span class="attr">marginTop</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; classes &#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">noValidate</span> <span class="attr">autoComplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">TextField</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&#123;classes.field&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">label</span>=<span class="string">&quot;Note Title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">variant</span>=<span class="string">&quot;outlined&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">fullWidth</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">required</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (Create)</span><br></pre></td></tr></table></figure>
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/07.png" class="" title="07.png">

<p>增加一個 Text Field 組件，是一個具有多行輸入且預設列數為 4</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;TextField </span><br><span class="line">    className=&#123;classes.field&#125;</span><br><span class="line">    label=<span class="string">&quot;Details&quot;</span></span><br><span class="line">    color=<span class="string">&quot;secondary&quot;</span></span><br><span class="line">    variant=<span class="string">&quot;outlined&quot;</span></span><br><span class="line">    multiline</span><br><span class="line">    rows=&#123;<span class="number">4</span>&#125;</span><br><span class="line">    fullWidth</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/08.png" class="" title="08.png">

<p>為組件加入處理事件，先宣告兩個<code>&lt;input&gt;</code>要放在 state 中的 title 和 details</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">details</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>撰寫回調函數，當使用者輸入時，呼叫回調函數儲存使用者輸入值到 state 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    handleTitle = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">title</span>: e.target.value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleDetails = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">details</span>: e.target.value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">        &lt;TextField </span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.handleTitle&#125;</span><br><span class="line">            ...</span><br><span class="line">        /&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">TextField</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">onChange</span>=<span class="string">&#123;this.handleDetails&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意 :</font><br>隨然可以使用 ref 方式將輸入值直接放到變數中，在最後 Sumbit 時將該變數提取出來傳送，如 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.title)</span><br><span class="line">&#125;</span><br><span class="line">&lt;TextField</span><br><span class="line">    ref=&#123;<span class="built_in">this</span>.title&#125; </span><br><span class="line">    className=&#123;classes.field&#125;</span><br><span class="line">    label=<span class="string">&quot;Note Title&quot;</span></span><br><span class="line">    color=<span class="string">&quot;secondary&quot;</span></span><br><span class="line">    variant=<span class="string">&quot;outlined&quot;</span></span><br><span class="line">    fullWidth</span><br><span class="line">    required</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<p>不過一般都不太建議這樣做 (或許我查到的資料有誤，歡迎來信指教)</p>
<p>撰寫 Submit 的回調函數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">        &lt;Button</span><br><span class="line">            onClick=&#123;<span class="built_in">this</span>.handleSubmit&#125;</span><br><span class="line">            ...</span><br><span class="line">        &gt;</span><br><span class="line">            Submit</span><br><span class="line">        &lt;/Button&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/09.png" class="" title="09.png">

<p>加上錯誤檢查，TextField 有個屬性可以設定是否錯誤，當錯誤時將會顯示紅色框提醒使用者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">titleError</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;title&#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">if</span> (title === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">titleError</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">titleError</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;TextField </span><br><span class="line">    ...</span><br><span class="line">    error=&#123;<span class="built_in">this</span>.state.titleError&#125;</span><br><span class="line">/&gt;    </span><br></pre></td></tr></table></figure>
<img src="/2021/12/18/frontend-material-ui-tutorial-004-text-field/10.png" class="" title="10.png">

<p>完整的代碼<br>src/pages/Create.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Typography&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Button&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Container <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Container&#x27;</span></span><br><span class="line"><span class="keyword">import</span> KeyboardArrowRightIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/KeyboardArrowRight&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; withStyles &#125; <span class="keyword">from</span> <span class="string">&quot;@material-ui/core/styles&quot;</span></span><br><span class="line"><span class="keyword">import</span> TextField <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/TextField&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">field</span>: &#123;</span><br><span class="line">        <span class="attr">marginTop</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">details</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">titleError</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">detailsError</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleTitle = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">title</span>: e.target.value.trim()&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleDetails = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">details</span>: e.target.value.trim()&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;title, details&#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">        e.preventDefault()</span><br><span class="line">        <span class="keyword">if</span> (title === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">titleError</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">titleError</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (details === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">detailsError</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">detailsError</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; classes &#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">variant</span>=<span class="string">&quot;h6&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">color</span>=<span class="string">&quot;textSecondary&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">component</span>=<span class="string">&quot;h2&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">gutterBottom</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                &gt;</span></span></span><br><span class="line"><span class="xml">                    Create a new note</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">noValidate</span> <span class="attr">autoComplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">TextField</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">onChange</span>=<span class="string">&#123;this.handleTitle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&#123;classes.field&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">label</span>=<span class="string">&quot;Note Title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">variant</span>=<span class="string">&quot;outlined&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">fullWidth</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">required</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">error</span>=<span class="string">&#123;this.state.titleError&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">TextField</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">onChange</span>=<span class="string">&#123;this.handleDetails&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&#123;classes.field&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">label</span>=<span class="string">&quot;Details&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">variant</span>=<span class="string">&quot;outlined&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">multiline</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">rows</span>=<span class="string">&#123;4&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">fullWidth</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">required</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">error</span>=<span class="string">&#123;this.state.detailsError&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">onClick</span>=<span class="string">&#123;this.handleSubmit&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">type</span>=<span class="string">&quot;sumbit&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">variant</span>=<span class="string">&quot;contained&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">endIcon</span>=<span class="string">&#123;</span>&lt;<span class="attr">KeyboardArrowRightIcon</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">                    &gt;</span></span><br><span class="line"><span class="xml">                        Submit</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (Create)</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/text-field">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Text Field</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 005 Radio</title>
    <url>/2021/12/19/frontend-material-ui-tutorial-005-radio/</url>
    <content><![CDATA[<p><a href="https://v4.mui.com/components/radio-buttons/">Radio</a><br>引入組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Radio <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Radio&#x27;</span></span><br><span class="line"><span class="keyword">import</span> RadioGroup <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/RadioGroup&#x27;</span></span><br><span class="line"><span class="keyword">import</span> FormControlLabel <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/FormControlLabel&#x27;</span></span><br></pre></td></tr></table></figure>
<p>添加組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;RadioGroup&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;money&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Money&quot; /&gt;</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;todos&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Todos&quot; /&gt;</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;reminders&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Reminders&quot; /&gt;</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;work&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Work&quot; /&gt;</span></span><br><span class="line">&lt;/RadioGroup&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/19/frontend-material-ui-tutorial-005-radio/01.png" class="" title="01.png">
<span id="more"></span>
<p>增加儲存機制和設定預設值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">category</span>: <span class="string">&#x27;todos&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">handleCategory = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">category</span>: e.target.value&#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&lt;RadioGroup value=&#123;<span class="built_in">this</span>.state.category&#125; onChange=&#123;<span class="built_in">this</span>.handleCategory&#125;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/RadioGroup&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/19/frontend-material-ui-tutorial-005-radio/02.png" class="" title="02.png">

<p>為整個 Redio Group 加上 label</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;FormControl className=&#123;classes.field&#125;&gt; </span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FormLabel</span>&gt;</span>Note Category<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">value</span>=<span class="string">&#123;this.state.category&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleCategory&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;money&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Money&quot; /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;todos&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Todos&quot; /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;reminders&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Reminders&quot; /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;work&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Work&quot; /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line">&lt;/FormControl&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/19/frontend-material-ui-tutorial-005-radio/02.png" class="" title="02.png">

<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/radio-button">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Radio</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 006 Fetch data from Json server</title>
    <url>/2021/12/20/frontend-material-ui-tutorial-006-fetch-data-from-jason-server/</url>
    <content><![CDATA[<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><ol>
<li>install json-server<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g json-server</span></span><br></pre></td></tr></table></figure></li>
<li>install isomorphic-fetch<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install isomorphic-fetch --save</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="啟動-json-server"><a href="#啟動-json-server" class="headerlink" title="啟動 json-server"></a>啟動 json-server</h1>在專案中建立 data 目錄，添加一個 db.json 檔做為資料來源<br>data/db.json<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;notes&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Yoshi&#x27;s birthday bash&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;details&quot;</span>: <span class="string">&quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;category&quot;</span>: <span class="string">&quot;reminders&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Complete my ninja training&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;details&quot;</span>: <span class="string">&quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s, when an unknown printer took.&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;category&quot;</span>: <span class="string">&quot;work&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Order a pizza!&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;details&quot;</span>: <span class="string">&quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;category&quot;</span>: <span class="string">&quot;todos&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
啟動 json-server<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> json-server --watch data/db.json --port 8000</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="取得資料顯示"><a href="#取得資料顯示" class="headerlink" title="取得資料顯示"></a>取得資料顯示</h1>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Container <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Container&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">&#x27;isomorphic-fetch&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">notes</span>: []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">`http://localhost:8000/notes`</span>);</span><br><span class="line">        <span class="keyword">const</span> notes = response.ok ? <span class="keyword">await</span> response.json() : <span class="literal">null</span></span><br><span class="line">        <span class="built_in">console</span>.log(notes)</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;notes&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;notes&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;notes.map(note =&gt; <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;note.id&#125;</span>&gt;</span>&#123;note.title&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <img src="/2021/12/20/frontend-material-ui-tutorial-006-fetch-data-from-jason-server/01.png" class="" title="01.png">

<h1 id="儲存資料"><a href="#儲存資料" class="headerlink" title="儲存資料"></a>儲存資料</h1>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">&#x27;isomorphic-fetch&#x27;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Create</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;title, details, category&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">titleError</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">detailsError</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"></span><br><span class="line">        e.preventDefault()</span><br><span class="line">        <span class="keyword">if</span> (title === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">titleError</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (details === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">detailsError</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (title &amp;&amp; details) &#123;</span><br><span class="line">            fetch(<span class="string">&#x27;http://localhost:8000/notes&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;title, details, category&#125;)</span><br><span class="line">            &#125;).then(<span class="function">() =&gt;</span> <span class="built_in">this</span>.props.history.push(<span class="string">&#x27;/note&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (Create)</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/json-server-and-isomorphic-fetch">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>json-server</tag>
        <tag>isomorphic-fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 007 Grid System</title>
    <url>/2021/12/22/frontend-material-ui-tutorial-007-grid-system/</url>
    <content><![CDATA[<h1 id="網格系統-Grid"><a href="#網格系統-Grid" class="headerlink" title="網格系統 (Grid)"></a><a href="https://v4.mui.com/components/grid/">網格系統 (Grid)</a></h1><p>  引入 Paper 和 Grid 組件<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> Grid <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Grid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Paper <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Paper&#x27;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>  建立一個 Grid 容器<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Grid container&gt;</span><br><span class="line">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure></p>
<span id="more"></span>
<p>  在此容器中添加 item<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Grid container&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">sm</span>=<span class="string">&#123;6&#125;</span> <span class="attr">md</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Paper</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">sm</span>=<span class="string">&#123;6&#125;</span> <span class="attr">md</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Paper</span>&gt;</span>2<span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">sm</span>=<span class="string">&#123;6&#125;</span> <span class="attr">md</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Paper</span>&gt;</span>3<span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">sm</span>=<span class="string">&#123;6&#125;</span> <span class="attr">md</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Paper</span>&gt;</span>4<span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure><br>  在視窗大小為 xs 時，一個 item 權重為 12，即佔滿整個視窗<br>  <img src="/2021/12/22/frontend-material-ui-tutorial-007-grid-system/01.png" class="" title="01.png"><br>  在視窗大小為 sm 時，一個 item 權重為 6<br>  <img src="/2021/12/22/frontend-material-ui-tutorial-007-grid-system/02.png" class="" title="02.png"><br>  在視窗大小為 md 時，一個 item 權重為 3<br>  <img src="/2021/12/22/frontend-material-ui-tutorial-007-grid-system/03.png" class="" title="03.png"></p>
<p>  依據上面的結構改寫成<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Container <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Container&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">&#x27;isomorphic-fetch&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Grid <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Grid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Paper <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Paper&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">notes</span>: []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">`http://localhost:8000/notes`</span>);</span><br><span class="line">        <span class="keyword">const</span> notes = response.ok ? <span class="keyword">await</span> response.json() : <span class="literal">null</span></span><br><span class="line">        <span class="built_in">console</span>.log(notes)</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;notes&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;notes&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;notes.map(note =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">key</span>=<span class="string">&#123;note.id&#125;</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">md</span>=<span class="string">&#123;6&#125;</span> <span class="attr">lg</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Paper</span>&gt;</span>&#123;note.title&#125;<span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    ))&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <img src="/2021/12/22/frontend-material-ui-tutorial-007-grid-system/04.png" class="" title="04.png"></p>
<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/grid-system">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Grid System</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 008 Card Component</title>
    <url>/2021/12/24/frontend-material-ui-tutorial-008-card-component/</url>
    <content><![CDATA[<p><a href="https://v4.mui.com/components/cards/">Card</a></p>
<p>建立一個 NoteCard 組件，用來呈現 Note 資訊．我們使用 Material-UI 的 Care 組件，其呈現的效果如下 :</p>
<img src="/2021/12/24/frontend-material-ui-tutorial-008-card-component/01.png" class="" title="01.png">
<span id="more"></span>
<p>首先引入 Card 相關組件，有 Card 卡片最外層的容器組件，和 CardHeader 卡片上面的頭部組件 加入到 NoteCard 組件中，並在卡片的頭部組件中，讓他有一個 IconButton，在之後會實作刪除 note 功能<br>src/components/NoteCard/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Card <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Card&#x27;</span></span><br><span class="line"><span class="keyword">import</span> CardHeader <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/CardHeader&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; IconButton &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteCard</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;title, category&#125; = <span class="built_in">this</span>.props.note</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">CardHeader</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">action</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                            &lt;<span class="attr">IconButton</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">DeleteOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">IconButton</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    /&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/24/frontend-material-ui-tutorial-008-card-component/02.png" class="" title="02.png">

<p>將原本 Paper 組件改用 NoteCard 組件，並用 Props 方式將 note 資料傳入<br>src/pages/Note.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> NoteCard <span class="keyword">from</span> <span class="string">&#x27;../components/NoteCard&#x27;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;notes&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">container</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;notes.map(note =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">key</span>=<span class="string">&#123;note.id&#125;</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">md</span>=<span class="string">&#123;6&#125;</span> <span class="attr">lg</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">NoteCard</span> &#123;<span class="attr">...note</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    ))&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意 : </font>這邊傳入資料到 NoteCard 組件的方式，採這樣的方式不管之後 note 怎樣擴展都不會影響到這邊的程式碼．</p>
<p>在 src/components/NoteCard/index.jsx 中就可以展示 note 資訊</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteCard</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;title, category&#125; = <span class="built_in">this</span>.props</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">CardHeader</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">action</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                            &lt;<span class="attr">IconButton</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">DeleteOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">IconButton</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                        title=&#123;title&#125;</span></span><br><span class="line"><span class="xml">                        subheader=&#123;category&#125;</span></span><br><span class="line"><span class="xml">                    /&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/24/frontend-material-ui-tutorial-008-card-component/03.png" class="" title="03.png">

<p>因為 Card 之間沒有間距有點難看，所以我們調整一下 Grid container 的 spacing<br>src/pages/Note.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Container&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">container</span> <span class="attr">spacing</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;notes.map(note =&gt; (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">key</span>=<span class="string">&#123;note.id&#125;</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">md</span>=<span class="string">&#123;6&#125;</span> <span class="attr">lg</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">NoteCard</span> &#123;<span class="attr">...note</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ))&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">&lt;/Container&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/24/frontend-material-ui-tutorial-008-card-component/04.png" class="" title="04.png">

<p>在 NoteCard 組件中，加入 Typography 組件展示 note 的 details 資訊</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">const</span> &#123;title, category, details&#125; = <span class="built_in">this</span>.props</span><br><span class="line">...</span><br><span class="line">    &lt;Card&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;CardContent&gt;</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&quot;body2&quot;</span> <span class="attr">color</span>=<span class="string">&quot;textSecondary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;details&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">        &lt;/CardContent&gt;</span><br><span class="line">    &lt;/Card&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/24/frontend-material-ui-tutorial-008-card-component/05.png" class="" title="05.png">

<p>再讓整個 Card 有點立體感<br>src/components/NoteCard/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Card elevation=&#123;<span class="number">1</span>&#125;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/Card&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/24/frontend-material-ui-tutorial-008-card-component/06.png" class="" title="06.png">

<ul>
<li>實作刪除按鈕<br>因為資料是放在 Notes.jsx 中的 state，所以我們必須使用 callback 函數的方式，讓他在 NoteCard 組件的刪除按鈕被觸發時可以調用父組件的函數．<br>src/pages/Note.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">handleDelete = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id)</span><br><span class="line">    fetch(<span class="string">`http://localhost:8000/notes/`</span> + id, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;notes&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> newNotes = notes.filter(<span class="function"><span class="params">note</span> =&gt;</span> note.id !== id)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">notes</span>:newNotes&#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    &lt;NoteCard &#123;...note&#125; handleDelete=&#123;<span class="built_in">this</span>.handleDelete&#125;/&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
取得 id 並呼叫回調函數 handleDelete()<br>src/components/NoteCard/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> &#123;id, title, category, details&#125; = <span class="built_in">this</span>.props</span><br><span class="line">...</span><br><span class="line">    &lt;CardHeader</span><br><span class="line">        action=&#123;</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">IconButton</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.handleDelete(id)&#125;&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">DeleteOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">IconButton</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        title=&#123;title&#125;</span><br><span class="line">        subheader=&#123;category&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<font color="#FF0000">注意:</font>這邊 IconButton 的 onClick 用法，必須是<code>onClick=&#123;() =&gt; this.props.handleDelete(id)&#125;</code>，如果是用<code>onClick=&#123;this.props.handleDelete(id)&#125;</code>則在建構組件的時候就會先被呼叫一次．</li>
</ul>
<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/Card">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Card</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 009 Drawer</title>
    <url>/2021/12/26/frontend-material-ui-tutorial-009-drawer/</url>
    <content><![CDATA[<p>新建一個 Layout 組件讓我們可以把 Drawer 與 Create/Note 組件放在一起，先把原先在 App.jsx 中切換 Create/Note 組件的程式碼移到 Layout 組件中<br>src/App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Layout</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>src/components/Layout/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Route, Switch, Link &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Create <span class="keyword">from</span> <span class="string">&#x27;../../pages/Create&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Note <span class="keyword">from</span> <span class="string">&#x27;../../pages/Note&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>                </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/create&#x27;</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/note&#x27;</span>&gt;</span>Note<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/create&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Create&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/note&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Note&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span>                </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/26/frontend-material-ui-tutorial-009-drawer/01.png" class="" title="01.png">
<img src="/2021/12/26/frontend-material-ui-tutorial-009-drawer/02.png" class="" title="02.png">
<img src="/2021/12/26/frontend-material-ui-tutorial-009-drawer/03.png" class="" title="03.png">

<p>在 Layout 中加入 Drawer 組件並使用自定義 css<br>src/components/Layout/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Drawer, Typography &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; withStyles &#125; <span class="keyword">from</span> <span class="string">&quot;@material-ui/core/styles&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Route, Switch, Link &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Create <span class="keyword">from</span> <span class="string">&#x27;../../pages/Create&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Note <span class="keyword">from</span> <span class="string">&#x27;../../pages/Note&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> drawerWith = <span class="number">240</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">drawer</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: drawerWith</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; classes &#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* app bar */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* side drawer */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Drawer</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">className</span>=<span class="string">&#123;classes.drawer&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">variant</span>=<span class="string">&quot;permanent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">anchor</span>=<span class="string">&quot;left&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&quot;h5&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            Steven Notes</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Drawer</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/create&#x27;</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/note&#x27;</span>&gt;</span>Note<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/create&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Create&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/note&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Note&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (Layout)</span><br></pre></td></tr></table></figure>
<img src="/2021/12/26/frontend-material-ui-tutorial-009-drawer/04.png" class="" title="04.png">

<p>可以發現 Drawer 寬度沒有撐開，我們透過以下設定將內容頁撐開</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">drawerPaper</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: drawerWith</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;Drawer</span><br><span class="line">    className=&#123;classes.drawer&#125;</span><br><span class="line">    variant=<span class="string">&quot;permanent&quot;</span></span><br><span class="line">    anchor=<span class="string">&quot;left&quot;</span></span><br><span class="line">    classes=&#123;&#123; <span class="attr">paper</span>: classes.drawerPaper&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&quot;h5&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Steven Notes</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/Drawer&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/26/frontend-material-ui-tutorial-009-drawer/05.png" class="" title="05.png">

<p>但是右邊頁面內容被遮蔽住了，所以用設定顯示為 flex 的方式解決</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">root</span>: &#123;</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;flex&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; classes &#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes.root&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/26/frontend-material-ui-tutorial-009-drawer/06.png" class="" title="06.png">

<p>最後我們在右邊頁面，加上底色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">page</span>: &#123;</span><br><span class="line">        <span class="attr">background</span>: <span class="string">&#x27;#F9F9F9&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; classes &#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes.root&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes.page&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/create&#x27;</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/note&#x27;</span>&gt;</span>Note<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/create&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Create&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/note&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Note&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/26/frontend-material-ui-tutorial-009-drawer/07.png" class="" title="07.png">

<p>Ｌayout 組件完整代碼如下 :<br>src/components/Layout/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Drawer, Typography &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; withStyles &#125; <span class="keyword">from</span> <span class="string">&quot;@material-ui/core/styles&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Route, Switch, Link &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Create <span class="keyword">from</span> <span class="string">&#x27;../../pages/Create&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Note <span class="keyword">from</span> <span class="string">&#x27;../../pages/Note&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> drawerWith = <span class="number">240</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">page</span>: &#123;</span><br><span class="line">        <span class="attr">background</span>: <span class="string">&#x27;#F9F9F9&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drawer</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: drawerWith</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drawerPaper</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: drawerWith</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">root</span>: &#123;</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;flex&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; classes &#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes.root&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* app bar */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* side drawer */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Drawer</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">className</span>=<span class="string">&#123;classes.drawer&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">variant</span>=<span class="string">&quot;permanent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">anchor</span>=<span class="string">&quot;left&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">classes</span>=<span class="string">&#123;&#123;</span> <span class="attr">paper:</span> <span class="attr">classes.drawerPaper</span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&quot;h5&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            Steven Notes</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Drawer</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes.page&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/create&#x27;</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/note&#x27;</span>&gt;</span>Note<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/create&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Create&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/note&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Note&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (Layout)</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/Permanent-Drawer">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Drawer</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 010 List</title>
    <url>/2021/12/26/frontend-material-ui-tutorial-010-list/</url>
    <content><![CDATA[<p><a href="https://v4.mui.com/components/lists/">Lists</a></p>
<p>引入 List 相關組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/List&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ListItem <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/ListItem&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ListItemIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/ListItemIcon&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ListItemText <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/ListItemText&#x27;</span></span><br></pre></td></tr></table></figure>
<p>建立 List</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;List&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ListItemText</span> <span class="attr">primary</span>=<span class="string">&quot;item1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ListItemText</span> <span class="attr">primary</span>=<span class="string">&quot;item2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ListItemText</span> <span class="attr">primary</span>=<span class="string">&quot;item2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line">&lt;/List&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/26/frontend-material-ui-tutorial-010-list/01.png" class="" title="01.png">
<span id="more"></span>
<p>我們可以發現有些程式碼都是重複的結構，所以我們用建立一個 array 物件，讓之後建立 List 時採用 map() 將其一一建構出 item</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> menuItems = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;My Notes&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="xml"><span class="tag">&lt;<span class="name">SubjectOutlined</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span> /&gt;</span></span>,</span><br><span class="line">        path: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;Create Note&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="xml"><span class="tag">&lt;<span class="name">AddCircleOutlineOutlined</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span> /&gt;</span></span>,</span><br><span class="line">        path: <span class="string">&#x27;/create&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">...</span><br><span class="line">&lt;List&gt;</span><br><span class="line">    &#123;menuItems.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ListItem</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">key</span>=<span class="string">&#123;item.text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ListItemIcon</span>&gt;</span>&#123;item.icon&#125;<span class="tag">&lt;/<span class="name">ListItemIcon</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ListItemText</span> <span class="attr">primary</span>=<span class="string">&#123;item.text&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line">    ))&#125;</span><br><span class="line">&lt;/List&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/26/frontend-material-ui-tutorial-010-list/02.png" class="" title="02.png">

<p>將原本做的超連結 <code>&lt;Link to=&#39;/create&#39;&gt;Create&lt;/Link&gt;</code> 改成由按下 ListItem 組件時觸發跳轉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;List&gt;</span><br><span class="line">    &#123;menuItems.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ListItem</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">key</span>=<span class="string">&#123;item.text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">component</span>=<span class="string">&#123;Link&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">to</span>=<span class="string">&#123;item.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ListItemIcon</span>&gt;</span>&#123;item.icon&#125;<span class="tag">&lt;/<span class="name">ListItemIcon</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ListItemText</span> <span class="attr">primary</span>=<span class="string">&#123;item.text&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line">    ))&#125;</span><br><span class="line">&lt;/List&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/26/frontend-material-ui-tutorial-010-list/03.png" class="" title="03.png">

<p>接下來我們要標示出我們是點選哪一個 ListItem，我們必須在 state 中紀錄我們是顯選哪一個 ListItem，當點選某個 ListItem 時，就將狀態更新到 state 中，並且使用 selected 定義出那一個 ListItem 被選到而改變顏色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleListItemClick = <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;path&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            ...</span><br><span class="line">                    &lt;List&gt;</span><br><span class="line">                        &#123;menuItems.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">                            <span class="xml"><span class="tag">&lt;<span class="name">ListItem</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">key</span>=<span class="string">&#123;item.text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">component</span>=<span class="string">&#123;Link&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">to</span>=<span class="string">&#123;item.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">selected</span>=<span class="string">&#123;this.state.path</span> === <span class="string">item.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">onClick</span>=<span class="string">&#123;(event)</span> =&gt;</span> this.handleListItemClick(item.path)&#125;</span></span><br><span class="line"><span class="xml">                            &gt;</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">ListItemIcon</span>&gt;</span>&#123;item.icon&#125;<span class="tag">&lt;/<span class="name">ListItemIcon</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">ListItemText</span> <span class="attr">primary</span>=<span class="string">&#123;item.text&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line">                        ))&#125;</span><br><span class="line">                    &lt;/List&gt;</span><br><span class="line">            ...</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (Layout)</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/List">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>List</tag>
        <tag>Link</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 011 useStyles 進階用法</title>
    <url>/2021/12/28/frontend-material-ui-tutorial-011-advanced-usestyles/</url>
    <content><![CDATA[<ol>
<li>傳入 theme<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useStyles = <span class="function">(<span class="params">theme</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">page</span>: &#123;</span><br><span class="line">        <span class="attr">background</span>: <span class="string">&#x27;#F9F9F9&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">        <span class="attr">padding</span>: theme.spacing(<span class="number">3</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drawer</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: drawerWith</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drawerPaper</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: drawerWith</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">root</span>: &#123;</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;flex&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">padding</span>: theme.spacing(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li>動態決定 CSS<br>利用 Props 中的數據動態決定要使用哪個樣式<br>src\components\NoteCard\index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withStyles &#125; <span class="keyword">from</span> <span class="string">&quot;@material-ui/core/styles&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">red_border</span>: &#123;</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&#x27;1px red solid&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoteCard</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id, title, category, details, classes&#125; = <span class="built_in">this</span>.props</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Card</span> <span class="attr">elevation</span>=<span class="string">&#123;1&#125;</span> <span class="attr">className</span>=<span class="string">&#123;(category</span> === <span class="string">&#x27;work&#x27;</span>)?<span class="attr">classes.red_border:null</span>&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (NoteCard)</span><br></pre></td></tr></table></figure>
<img src="/2021/12/28/frontend-material-ui-tutorial-011-advanced-usestyles/01.png" class="" title="01.png"></li>
</ol>
<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/advanced_useStyles">代碼</a></p>
]]></content>
      <tags>
        <tag>Custom CSS</tag>
        <tag>useStyles</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 012 App Bar</title>
    <url>/2021/12/28/frontend-material-ui-tutorial-012-app-bar/</url>
    <content><![CDATA[<p><a href="https://v4.mui.com/components/app-bar/#app-bar">App Bar</a><br>引入組件並使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> AppBar <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/AppBar&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Toolbar <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Toolbar&#x27;</span></span><br><span class="line">...</span><br><span class="line">                &#123;<span class="comment">/* app bar */</span>&#125;</span><br><span class="line">                &lt;AppBar className=&#123;classes.appbar&#125;&gt;</span><br><span class="line">                    <span class="xml"><span class="tag">&lt;<span class="name">Toolbar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            Welcome to Steven&#x27; nodes</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Toolbar</span>&gt;</span></span></span><br><span class="line">                &lt;/AppBar&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2021/12/28/frontend-material-ui-tutorial-012-app-bar/01.png" class="" title="01.png">
<span id="more"></span>
<p>雖然頂部多一條 App Bar，但是左邊被遮蔽掉了，我們藉由計算寬度來改善</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">(<span class="params">theme</span>) =&gt;</span> (&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">appbar</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="string">`calc(100% - <span class="subst">$&#123;drawerWith&#125;</span>px)`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&lt;AppBar className=&#123;classes.appbar&#125;&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Toolbar</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Welcome to Steven&#x27; nodes</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Toolbar</span>&gt;</span></span></span><br><span class="line">&lt;/AppBar&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2021/12/28/frontend-material-ui-tutorial-012-app-bar/02.png" class="" title="02.png">

<p>但還有一些問題，就是 note 的內容被遮蔽到了，我們在顯示 note 的上面再加一塊區域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">(<span class="params">theme</span>) =&gt;</span> (&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">toolbar</span>: theme.mixins.toolbar</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">                &lt;div className=&#123;classes.page&#125;&gt;</span><br><span class="line">                    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes.toolbar&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                    <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/create&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Create&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Note&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">                &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/28/frontend-material-ui-tutorial-012-app-bar/03.png" class="" title="03.png">

<p>而使用 elevation 消除陰影</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;AppBar </span><br><span class="line">    className=&#123;classes.appbar&#125;</span><br><span class="line">    elevation=&#123;<span class="number">0</span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Toolbar</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Welcome to Steven&#x27; nodes</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Toolbar</span>&gt;</span></span></span><br><span class="line">&lt;/AppBar&gt;</span><br></pre></td></tr></table></figure>

<p>利用 <a href="https://date-fns.org/">date-fns</a> 套件在 App Bar 上顯示時間</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install date-fns</span></span><br></pre></td></tr></table></figure>
<p>引入套件並使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">&#x27;date-fns&#x27;</span></span><br><span class="line">...</span><br><span class="line">&lt;Toolbar&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Today is the &#123; format(new Date(), &#x27;do MMMM Y&#x27;) &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">&lt;/Toolbar&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2021/12/28/frontend-material-ui-tutorial-012-app-bar/04.png" class="" title="04.png">

<p>再增加一個使用者名稱在 App Bar 上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;Toolbar&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Today is the &#123; format(new Date(), &#x27;do MMMM Y&#x27;) &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Steven</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">&lt;/Toolbar&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2021/12/28/frontend-material-ui-tutorial-012-app-bar/05.png" class="" title="05.png">

<p>會發現日期與時間都連在一起，利用 flexGrow 將 date 撐到滿</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useStyles = <span class="function">(<span class="params">theme</span>) =&gt;</span> (&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="attr">date</span>: &#123;</span><br><span class="line">        <span class="attr">flexGrow</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&lt;Toolbar&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Typography</span> <span class="attr">className</span>=<span class="string">&#123;classes.date&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Today is the &#123; format(new Date(), &#x27;do MMMM Y&#x27;) &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Steven</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">&lt;/Toolbar&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/app-bar">代碼</a></p>
]]></content>
      <tags>
        <tag>App Bar</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 013 Avatar</title>
    <url>/2021/12/29/frontend-material-ui-tutorial-013-avatar/</url>
    <content><![CDATA[<p><a href="https://v4.mui.com/components/avatars/">Avatar</a></p>
<p>引入並使用 Avatar</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> Avatar <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Avatar&#x27;</span></span><br><span class="line">...</span><br><span class="line">&lt;Toolbar&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Typography</span> <span class="attr">className</span>=<span class="string">&#123;classes.date&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Today is the &#123; format(new Date(), &#x27;do MMMM Y&#x27;) &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Steven</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">src</span>=<span class="string">&quot;/pluto.png&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/Toolbar&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/29/frontend-material-ui-tutorial-013-avatar/01.png" class="" title="01.png">
<span id="more"></span>
<p>調整一下頭像與名字間的距離</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">(<span class="params">theme</span>) =&gt;</span> (&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">avatar</span>: &#123;</span><br><span class="line">        <span class="attr">marginLeft</span>: theme.spacing(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">    &lt;Avatar src=<span class="string">&quot;/pluto.png&quot;</span> className=&#123;classes.avatar&#125;/&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2021/12/29/frontend-material-ui-tutorial-013-avatar/02.png" class="" title="02.png">

<p>幫每一張卡片頭部加上以類別開頭首字母大寫的頭像</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;CardHeader</span><br><span class="line">    avatar=&#123;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;category[0].toUpperCase()&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    action=&#123;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">IconButton</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.handleDelete(id)&#125;&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">DeleteOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">IconButton</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    title=&#123;title&#125;</span><br><span class="line">    subheader=&#123;category&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/29/frontend-material-ui-tutorial-013-avatar/03.png" class="" title="03.png">

<p>依據類別不同分別設置頭像顏色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> Avatar <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Avatar&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; withStyles &#125; <span class="keyword">from</span> <span class="string">&quot;@material-ui/core/styles&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; blue, green, pink, yellow &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/colors&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">red_border</span>: &#123;</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&#x27;1px red solid&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">avatar_work</span>: &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: yellow[<span class="number">700</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">avatar_money</span>: &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: green</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">avatar_todos</span>: &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: pink[<span class="number">500</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">avatar_others</span>: &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: blue[<span class="number">500</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkCategory = <span class="function">(<span class="params">category, classes</span>) =&gt;</span> (</span><br><span class="line">    (category === <span class="string">&#x27;work&#x27;</span>)?classes.red_border:<span class="literal">null</span>    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getAvatar = <span class="function">(<span class="params">category, classes</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (category === <span class="string">&#x27;work&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> classes.avatar_work</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (category === <span class="string">&#x27;money&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> classes.avatar_money</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (category === <span class="string">&#x27;todos&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> classes.avatar_todos</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classes.avatar_others</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoteCard</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id, title, category, details, classes&#125; = <span class="built_in">this</span>.props</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Card</span> <span class="attr">elevation</span>=<span class="string">&#123;1&#125;</span> <span class="attr">className</span>=<span class="string">&#123;checkCategory(category,</span> <span class="attr">classes</span>)&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">CardHeader</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">avatar</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                            &lt;<span class="attr">Avatar</span> <span class="attr">className</span>=<span class="string">&#123;getAvatar(category,</span> <span class="attr">classes</span>)&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                                &#123;category[0].toUpperCase()&#125;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                        ...</span></span><br><span class="line"><span class="xml">                    /&gt;</span></span><br><span class="line"><span class="xml">                    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withStyles(useStyles) (NoteCard)</span><br></pre></td></tr></table></figure>
<img src="/2021/12/29/frontend-material-ui-tutorial-013-avatar/04.png" class="" title="04.png">

<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/avatars">代碼</a></p>
]]></content>
      <tags>
        <tag>Avatar</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 教學 - 014 masonry</title>
    <url>/2022/01/03/frontend-material-ui-tutorial-014-masonry/</url>
    <content><![CDATA[<p><a href="https://www.npmjs.com/package/react-masonry-css">react-masonry-css</a><br>安裝套件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i react-masonry-css</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Container&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">container</span> <span class="attr">spacing</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;notes.map(note =&gt; (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">key</span>=<span class="string">&#123;note.id&#125;</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">md</span>=<span class="string">&#123;6&#125;</span> <span class="attr">lg</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">NoteCard</span> &#123;<span class="attr">...note</span>&#125; <span class="attr">handleDelete</span>=<span class="string">&#123;this.handleDelete&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ))&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">&lt;/Container&gt;</span><br></pre></td></tr></table></figure>
<p>將原本使用 <code>&lt;Grid&gt;</code> 改用 <code>&lt;Masonry&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> Masonry <span class="keyword">from</span> <span class="string">&#x27;react-masonry-css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> breakpoints = &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="number">3</span>,  <span class="comment">// 設定不同解析度具有的行數</span></span><br><span class="line">    <span class="number">1100</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="number">700</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&lt;Masonry</span><br><span class="line">    breakpointCols=&#123;breakpoints&#125;</span><br><span class="line">    className=<span class="string">&quot;my-masonry-grid&quot;</span></span><br><span class="line">    columnClassName=<span class="string">&quot;my-masonry-grid_column&quot;</span> </span><br><span class="line">&gt;</span><br><span class="line">    &#123;notes.map(<span class="function"><span class="params">note</span> =&gt;</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">item</span> <span class="attr">key</span>=<span class="string">&#123;note.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">NoteCard</span> &#123;<span class="attr">...note</span>&#125; <span class="attr">handleDelete</span>=<span class="string">&#123;this.handleDelete&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    ))&#125;</span><br><span class="line">&lt;/Masonry&gt;</span><br></pre></td></tr></table></figure>
<p>加入 CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.my-masonry-grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box; <span class="comment">/* Not needed if autoprefixing */</span></span><br><span class="line">    <span class="attribute">display</span>: -ms-flexbox; <span class="comment">/* Not needed if autoprefixing */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">30px</span>; <span class="comment">/* gutter size offset */</span></span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-masonry-grid_column</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>; <span class="comment">/* gutter size */</span></span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Style your items */</span></span><br><span class="line"><span class="selector-class">.my-masonry-grid_column</span> &gt; <span class="selector-tag">div</span> &#123; <span class="comment">/* change div to reference your elements you put in &lt;Masonry&gt; */</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/material_ui_tutorial/tree/masonry">代碼</a></p>
]]></content>
      <tags>
        <tag>Masonry</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security 文件筆記 - 001 Architecture</title>
    <url>/2021/12/30/backend-spring-security-001-architecture/</url>
    <content><![CDATA[<p><a href="https://docs.spring.io/spring-security/reference/index.html">Spring security 官方文檔</a></p>
<h1 id="Spring-Security-能使用的地方"><a href="#Spring-Security-能使用的地方" class="headerlink" title="Spring Security 能使用的地方"></a>Spring Security 能使用的地方</h1><p><a href="https://docs.spring.io/spring-security/reference/servlet/index.html">https://docs.spring.io/spring-security/reference/servlet/index.html</a><br>Spring Security 並不依賴於 Spring Boot/Cloud，只要是採用 standard Servlet Filter 的 Servlet Container 應用皆可以使用 Spring Security。即不一定需要 Spring Framework 的支援，但是需要是 Servlet-based 的應用才可以使用 Spring Security。</p>
<h1 id="Spring-Boot-中使用-Spring-Security"><a href="#Spring-Boot-中使用-Spring-Security" class="headerlink" title="Spring Boot 中使用 Spring Security"></a>Spring Boot 中使用 Spring Security</h1><p>一般只要是 Spring Boot 專案中引入 Spring Security，基本上就有幾個設定被啟動</p>
<ol>
<li>會建立一個 Servlet Filter (springSecurityFilterChain) 用來過濾 request 並處理所有與安全相關的程序，如 : 設定那些 URL 需要保護、驗證使用者帳戶與密碼、未被驗證授權的請求被重導向到 login form … 等</li>
<li>會建立一個 UserDetailsService 的實例，具有帳號名稱為 user，且會隨機產生對應的密碼並打印在 console 中。<br><a href="https://docs.spring.io/spring-security/reference/servlet/getting-started.html">參考</a></li>
</ol>
<h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a><a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html">Architecture</a></h1><span id="more"></span>
<ul>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filters-review">Filter</a></p>
<img src="/2021/12/30/backend-spring-security-001-architecture/filterchain.png" class="" title="filterchain.png">
<p>當應用一啟動後就會建立由一連串 Filter 所組成的一個 Filter Chain，而每一個 http request 都會流經這一個 Filter Chain，最後流到 DispatcherServlet 後就分配給 Servlet (對應的 url 的 controller) 處理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// do something before the rest of the application</span></span><br><span class="line">    chain.doFilter(request, response); <span class="comment">// invoke the rest of the application</span></span><br><span class="line">    <span class="comment">// do something after the rest of the application</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以 Filter 的順序關係是很重要的。</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filterchainproxy">FilterChainProxy</a></p>
<img src="/2021/12/30/backend-spring-security-001-architecture/filterchainproxy.png" class="" title="filterchainproxy.png">
<p>FilterChainProxy 是 Spring Security 所提供的一個 Filter，被包裹在 DelegatingFilterProxy 中。透過 SecurityFilterChain 可讓 Spring Security 委託多個 Filter 實例。</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-securityfilterchain">SecurityFilterChain</a></p>
<img src="/2021/12/30/backend-spring-security-001-architecture/securityfilterchain.png" class="" title="securityfilterchain.png">
<p>Spring Security 透過使用 FilterChainProxy 決定 request 需要經過 SecurityFilterChain 中的那些 Filter。<br>一個 Security filters 例子 :</p>
<img src="/2021/12/30/backend-spring-security-001-architecture/securityfilters.png" class="" title="securityfilters.png">
<p>FilterChainProxy 可以說是 Spring security 的起點，如果你要除錯或調適，會很適合將中斷點訂在 FilterChainProxy 中。FilterChainProxy 能清理 SecurityContext 避免 memory leaks。也應用 Spring Security’s HttpFirewall 保護我們的應用。FilterChainProxy 藉由 RequestMatcher 介面，比對 HttpServletRequest 的資訊決定出那些 SecurityFilterChain 要被調用。</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-multi-securityfilterchain-figure">Multiple SecurityFilterChain</a></p>
<img src="/2021/12/30/backend-spring-security-001-architecture/multi-securityfilterchain.png" class="" title="multi-securityfilterchain.png">
<p>可依據 request 的 url 決定要使用哪一組 SecurityFilterChain</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-security-filters">Security Filters</a><br>底下是 Spring Security Filter 的順序:</p>
<ul>
<li>ChannelProcessingFilter</li>
<li>WebAsyncManagerIntegrationFilter</li>
<li>SecurityContextPersistenceFilter</li>
<li>HeaderWriterFilter</li>
<li>CorsFilter</li>
<li>CsrfFilter</li>
<li>LogoutFilter</li>
<li>OAuth2AuthorizationRequestRedirectFilter</li>
<li>Saml2WebSsoAuthenticationRequestFilter</li>
<li>X509AuthenticationFilter</li>
<li>AbstractPreAuthenticatedProcessingFilter</li>
<li>CasAuthenticationFilter</li>
<li>OAuth2LoginAuthenticationFilter</li>
<li>Saml2WebSsoAuthenticationFilter</li>
<li>UsernamePasswordAuthenticationFilter</li>
<li>OpenIDAuthenticationFilter</li>
<li>DefaultLoginPageGeneratingFilter</li>
<li>DefaultLogoutPageGeneratingFilter</li>
<li>ConcurrentSessionFilter</li>
<li>DigestAuthenticationFilter</li>
<li>BearerTokenAuthenticationFilter</li>
<li>BasicAuthenticationFilter</li>
<li>RequestCacheAwareFilter</li>
<li>SecurityContextHolderAwareRequestFilter</li>
<li>JaasApiIntegrationFilter</li>
<li>RememberMeAuthenticationFilter</li>
<li>AnonymousAuthenticationFilter</li>
<li>OAuth2AuthorizationCodeGrantFilter</li>
<li>SessionManagementFilter</li>
<li>ExceptionTranslationFilter</li>
<li>FilterSecurityInterceptor</li>
<li>SwitchUserFilter</li>
</ul>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-exceptiontranslationfilter">Handling Security Exceptions</a><br>由上面的排序可以知道 ExceptionTranslationFilter 幾乎是在整個 Filter Chain 的底部，所以 ExceptionTranslationFilter 會攔截在他之前的 Filter 所拋出的異常， AccessDeniedException 和 AuthenticationException 會被攔截並且會啟動不同程序處理。</p>
<img src="/2021/12/30/backend-spring-security-001-architecture/exceptiontranslationfilter.png" class="" title="exceptiontranslationfilter.png">
<ol>
<li>ExceptionTranslationFilter 會繼續將 request 往下一個 Filter 傳送讓整個 Chain 正常運作</li>
<li>若使用者沒有被驗證過，則拋出 AuthenticationException 異常，然後被 ExceptionTranslationFilter 所攔截，就會開始驗證程序</li>
<li>若是 AccessDeniedException 被攔截到，則會調用 AccessDeniedHandler 進行處理。<br>Note : 如果這兩個異常在整個 Chain 中都沒有拋出，則 ExceptionTranslationFilter 將不會做任何事情。<br>底下是 ExceptionTranslationFilter 的虛擬碼 :<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	filterChain.doFilter(request, response); </span><br><span class="line">&#125; <span class="keyword">catch</span> (AccessDeniedException | AuthenticationException ex) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!authenticated || ex <span class="keyword">instanceof</span> AuthenticationException) &#123;  <span class="comment">// 如果是沒有驗證過或是驗證異常</span></span><br><span class="line">		startAuthentication();  <span class="comment">// 調用驗證程序</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		accessDenied();  <span class="comment">// 調用禁止存取程序</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Architecture</tag>
        <tag>Official Document</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security 文件筆記 - 002 Authentication</title>
    <url>/2021/12/30/backend-spring-security-002-authentication/</url>
    <content><![CDATA[<p><a href="https://docs.spring.io/spring-security/reference/index.html">Spring security 官方文檔</a></p>
<h1 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/index.html">Authentication</a></h1><ul>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html">Servlet Authentication Architecture</a><br>Spring Security 用來驗證的主要組件 :</p>
<ul>
<li>SecurityContextHolder : Spring Security 存放被驗證使用者詳細資料。</li>
<li>SecurityContext : 由 SecurityContextHolder 獲取到的，SecurityContext 包含當前被驗證使用者的 Authentication 物件。</li>
<li>Authentication - 為 AuthenticationManager 的輸入，由使用者提交用來作驗證的證書來，或由 SecurityContext 取得。</li>
<li>GrantedAuthority - 在 Authentication 物件上，授予主體的權限（即角色、範圍等）</li>
<li>AuthenticationManager - 為 API 定義 Spring Security 的 Filter 如何執行驗證。</li>
<li>ProviderManager - 一個常見的 AuthenticationManager 實作類。</li>
<li>AuthenticationProvider - 被 ProviderManager 使用去執行某個類型的驗證。</li>
<li>Request Credentials with AuthenticationEntryPoint - 用來要求客戶端提供證書 (如 : 傳導到登入頁面，或傳送 WWW-Authenticate 回應.. 等)</li>
<li>AbstractAuthenticationProcessingFilter - 一個 Filter 用於驗證。提供一個好了解的驗證流程和各部分如何協同工作。<span id="more"></span></li>
</ul>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder">SecurityContextHolder</a></p>
<img src="/2021/12/30/backend-spring-security-002-authentication/securitycontextholder.png" class="" title="securitycontextholder.png">
<p>SecurityContextHolder 是 Spring Security 用來存放驗證使用者的詳細資料。要設定一個使用者是被驗證過的最簡單方式就是直接設定 SecurityContextHolder</p>
<img src="/2021/12/30/backend-spring-security-002-authentication/setting_securitycontextholder.png" class="" title="setting_securitycontextholder.png">
<ol>
<li>先建立一個空的 SecurityContext 物件。這是一個重要的步驟，不要使用 SecurityContextHolder.getContext().setAuthentication(authentication) 方式以免造成在多執行緒中的 reac condition 現象。</li>
<li>接下來，建立一個新的 Authentication 物件，並且把他設定到 SecurityContext。在這裡我們使用 TestingAuthenticationToken，因為他很簡單。在常見的生產環境中是使用UsernamePasswordAuthenticationToken(userDetails, password, authorities)。</li>
<li>最後將 SecurityContext 設定給 SecurityContextHolder，而 Spring Security 將會使用新設定的資訊來驗證身分。</li>
</ol>
<p>如果要取得被驗證過的資訊，可以通過存取 SecurityContextHolder 獲得。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SecurityContext context = SecurityContextHolder.getContext();</span><br><span class="line">Authentication authentication = context.getAuthentication();</span><br><span class="line">String username = authentication.getName();</span><br><span class="line">Object principal = authentication.getPrincipal();</span><br><span class="line">Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br></pre></td></tr></table></figure>
<p>預設 SecurityContextHolder 會採用 ThreadLocal 方式進行詳細驗證資訊的儲存。也就是資訊只可以被同一個 Thread 所存取。所以當前請求被處理完後，thread 被清除一併也將資料清除掉。讓 FilterChainProxy 可確保 SecurityContext 可以被清除乾淨。<br>在有一些應用中會希望所有的 thread 都使用相同的 SecurityContext，我們可以在系統設定上做設定，另一種方式是調用     setStrategyName()。</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontext">SecurityContext</a><br>由 SecurityContextHolder 獲取到的驗證資訊，包含 Authentication 物件。</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication">Authentication</a><br>Authentication 有兩個主要目的 :</p>
<ul>
<li>提供 AuthenticationManager 的輸入，用來驗證使用者</li>
<li>提供已驗證使用者的資訊，可以由 SecurityContext 物件取的 Authentication</li>
</ul>
<p>Authentication 內包含 :</p>
<ul>
<li>principal - 識別使用者，在使用帳號與密碼方式時，通常是指 UserDetails 物件</li>
<li>credentials : 通常是指密碼，在大部分的情況下，通常會在用戶通過身分驗證後被消除，確保密碼不會被洩漏。</li>
<li>authorities - GrantedAuthority 是授予用戶權限。像是授予用戶角色或可見範圍。</li>
</ul>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-granted-authority">GrantedAuthority</a><br>能使用 Authentication.getAuthorities() 獲取一群 GrantedAuthority 物件的集合。GrantedAuthority 用來授權使用者權限，一般是使用角色方式區分權限，如 :<br>ROLE_ADMINISTRATOR 或 ROLE_HR_SUPERVISOR。這些東西可以在後續中使用在 Web、方法與 domain 物件上依角色限制使用者存取。基於帳密認證方式的架構中，可在 UserDetailsService 中取得。</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authenticationmanager">AuthenticationManager</a><br>AuthenticationManager 是定義 Spring Security 的過濾器如何執行身份驗證的 API。Spring Security的Filter 會調用   AuthenticationManager 然後設置在  SecurityContextHolder 中，並可由 SecurityContextHolder 中取得   Authentication。如果不與 Spring Security 的 Filters 集成，則可以直接設置 SecurityContextHolder 並不需要使用   AuthenticationManager.<br>雖然實現 AuthenticationManager 可以是任何方式，但最常見的 AuthenticationManager 是由 ProviderManager 實現。</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-providermanager">ProviderManager</a><br>ProviderManager 是一個對 AuthenticationManager 的常見實作。ProviderManager 委派一組 AuthenticationProviders 列表來進行認證工作。</p>
<img src="/2021/12/30/backend-spring-security-002-authentication/providermanager.png" class="" title="providermanager.png">
<p>AuthenticationProvider 都有機會表示身份驗證成功、失敗或表明它無法做出決定，並允許下個 AuthenticationProvider 做出決定。如果沒有配置 AuthenticationProviders 可以進行身份驗證，則身份驗證將會失敗，ProviderNotFoundException 這是一個特殊的AuthenticationException 會被拋出，表示 ProviderManager 未配置為支持 Authentication 類型。<br>AuthenticationProvider 知道如何執行特定的身分驗證。比如說一個 AuthenticationProvider 會執行驗證帳密方式，另一個 AuthenticationProvider 會使用 Security Assertion Markup Language (SAML) 方式驗證。我們可以使用不同的驗證方式，但是只需要不曝露出單一個 AuthenticationManager。<br>ProviderManager 允許配置一個可選的父類別 AuthenticationManager，在 AuthenticationProvider 無法執行身份驗證的情況下諮詢該父類別。父類別可以是任何類型 AuthenticationManager，但通常是實例 ProviderManager。</p>
<img src="/2021/12/30/backend-spring-security-002-authentication/providermanager-parent.png" class="" title="providermanager-parent.png">
<p>事實上，多個 ProviderManager 實例可能共享同一個父類別 AuthenticationManager。這在有些常見有多個 SecurityFilterChain 實例的情況下，具有共同身份驗證（共享父類別 AuthenticationManager），但也具有不同身份驗證機制（不同ProviderManager實例）。</p>
<img src="/2021/12/30/backend-spring-security-002-authentication/providermanagers-parent.png" class="" title="providermanagers-parent.png">
<p>默認情況下，ProviderManager 將嘗試從 Authentication 成功的身份驗證請求返回的對象之中，清除任何敏感憑據信息，這可以防  止密碼等信息在 HttpSession 上。<br>比如在一些無狀態應用中要增加效能，可能會緩存一個使用者物件，但這會造成一個問題，如果 Authentication 包含對緩存中對象  （例如UserDetails實例）的引用，並其憑據已刪除，則將無法再針對緩存值進行身份驗證。如果您使用緩存，則需要考慮到這一點。一個明顯的解決方案是緩存實作中或在 AuthenticationProvider 創建返回 Authentication 對象時，製作 Authentication 的副本。或者，您可以在 ProviderManager 上停用 eraseCredentialsAfterAuthentication 屬性。更多資訊<a href="https://docs.spring.io/spring-security/site/docs/5.6.0/api/org/springframework/security/authentication/ProviderManager.html">Javadoc</a></p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authenticationprovider">AuthenticationProvider</a><br>可以將多個 AuthenticationProvider 注入 ProviderManager。而每個 AuthenticationProvider 會執行特定類型的身份驗證。  例如 : DaoAuthenticationProvider 支持基於用戶名/密碼的身份驗證，同時 JwtAuthenticationProvider 支持對 JWT 令牌進  行身份驗證。</p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authenticationentrypoint">Request Credentials with AuthenticationEntryPoint</a><br>AuthenticationEntryPoint 是用於送出一個請求，要求客戶端傳送憑證資訊。有時候客戶端會發出一個資源請求，且主動將憑證   (如 : 帳號密碼) 包含在請求中，則 Spring Security 就不需要發起憑證請求。<br>在其他情況下，客戶端會發出一個沒有驗證過的資源請求，則 AuthenticationEntryPoint 將會觸發執行重導向到登入頁面，響應一  個 <a href="https://datatracker.ietf.org/doc/html/rfc7235#section-4.1">WWW-Authenticate header</a></p>
</li>
<li><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-abstractprocessingfilter">AbstractAuthenticationProcessingFilter</a><br>AbstractAuthenticationProcessingFilter 一個基礎 Filter 用於驗證使用者的憑證。在沒有憑證可被驗證前，Spring   Security 典型的作法是使用 AuthenticationEntryPoint 要求憑證。<br>接下來，AbstractAuthenticationProcessingFilter 可以對提交給它的任何身份驗證請求進行身份驗證。</p>
<img src="/2021/12/30/backend-spring-security-002-authentication/abstractauthenticationprocessingfilter.png" class="" title="abstractauthenticationprocessingfilter.png">
<ol>
<li>當使用者傳送他們的證書時，AbstractAuthenticationProcessingFilter 將會由 HttpServletRequest 創建一個   Authentication 物件，而 Authentication 類別則依據 AbstractAuthenticationProcessingFilter 的子類別。例如 :   UsernamePasswordAuthenticationFilter 會從一個提交帳戶和密碼的 HttpServletRequest 中創建   UsernamePasswordAuthenticationToken。</li>
<li>接下來，將 Authentication 被傳遞到 AuthenticationManager 中進行身份驗證 。</li>
<li>如果驗證失敗則會<ul>
<li>清除 SecurityContextHolder</li>
<li>調用 RememberMeServices.loginFail，如果 remember me 沒有設定，則此步驟將會沒作用</li>
<li>調用 AuthenticationFailureHandler</li>
</ul>
</li>
<li>如果驗證成功則會<ul>
<li>SessionAuthenticationStrategy 將會收到一個新登入通知</li>
<li>Authentication 將會被設置到 SecurityContextHolder，之後 SecurityContextPersistenceFilter 會將   SecurityContext 儲存到 HttpSession。</li>
<li>調用 RememberMeServices.loginSuccess，如果有設定的話。</li>
<li>ApplicationEventPublisher 發佈一個 InteractiveAuthenticationSuccessEvent。</li>
<li>調用 AuthenticationSuccessHandler。</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Official Document</tag>
        <tag>Authentication</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 練習 - 001 Sign In</title>
    <url>/2021/12/31/frontend-material-ui-practice-001-sign-in/</url>
    <content><![CDATA[<h1 id="初始化專案"><a href="#初始化專案" class="headerlink" title="初始化專案"></a>初始化專案</h1><p>使用 create-react-app 建立專案</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> create-react-app login_form</span></span><br></pre></td></tr></table></figure>
<p>安裝 Material-UI v4 及 icons</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/core</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/icons</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="建立-Login-組件"><a href="#建立-Login-組件" class="headerlink" title="建立 Ｌogin 組件"></a>建立 Ｌogin 組件</h1><p>src/components/Login/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">&quot;login&quot;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<p>清除專案初始化時產生的代碼，將 Login 組件放入 App 組件中<br>src/App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;./components/Login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/01.png" class="" title="01.png">

<p>引入 Grid 和 Paper 組件並使用 elevation 屬性，讓組件有隆起效果<br>src/components/Login/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                Sign in</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/02.png" class="" title="02.png">

<p>使用 style 設定 Paper 組件樣式，讓內容與邊界間有間距<br>vh (view height) 是指螢幕可視區域高度的百分比<br>vw (view width)，是指螢幕可視區域寬度的百分比<br>src/components/Login/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                Sign in</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/03.png" class="" title="03.png">

<p>加入 Avatar 及 icon<br>src/components/Login/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span>&gt;</span><span class="tag">&lt;<span class="name">LockOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/04.png" class="" title="04.png">

<p>將 Avatar 等物件置中<br>src/components/Login/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span> &#123;/* 將物件置中 */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span>&gt;</span><span class="tag">&lt;<span class="name">LockOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>

<p>一樣用 style 方式設定 Avatar 樣式<br>src/components/Login/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span> &#123;/* 將物件置中 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span> &#123;/* 將物件置中 */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">LockOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>

<p>加入供使用者輸入帳號與密碼的 TextField<br>fullWidth 是要將整個組件拉大到與父組件同寬<br>type 指定輸入類型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, TextField &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Username&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter username&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/05.png" class="" title="05.png">

<p>加入 CheckBox</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, TextField, Checkbox, FormControlLabel &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;checkedB&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    label=&quot;Remember me&quot;</span></span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/06.png" class="" title="06.png">

<p>加入 Sign In Button</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, TextField, Checkbox, FormControlLabel, Button &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/07.png" class="" title="07.png">

<p>加入忘記密碼與註冊的超連結</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, TextField, Checkbox, FormControlLabel, Button, Link, Typography &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span> &#123;/* 將物件置中 */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">LockOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Username&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter username&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;checkedB&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    label=&quot;Remember me&quot;</span></span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span> &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        Forget password ?</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span> &gt;</span> Do you have an account ?</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        Sign Up</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/08.png" class="" title="08.png">

<p>最後調整一下按鈕的上下間距</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> styleButton = &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;8px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;10&#125;</span> // 讓此組件隆起，產生陰影效果</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<img src="/2021/12/31/frontend-material-ui-practice-001-sign-in/09.png" class="" title="09.png">

<p><a href="https://github.com/pluto123/login_form/tree/Sign-In">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Login Form</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 練習 - 002 Sign Up</title>
    <url>/2022/01/01/frontend-material-ui-practice-002-sign-up/</url>
    <content><![CDATA[<p>由 Login 組件中保留部分結構，建立一個 SignUp 組件</p>
<span id="more"></span>
<p>src/components/SingUp/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-002-sign-up/01.png" class="" title="01.png">

<p>在 Sign Uo 下，加上說明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, Typography &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&#x27;caption&#x27;</span>&gt;</span>Please fill this form to create an account !<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-002-sign-up/02.png" class="" title="02.png">
<p>增加兩個輸入欄位 Name &amp; Email</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, Typography, TextField &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&#x27;caption&#x27;</span>&gt;</span>Please fill this form to create an account !<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-002-sign-up/03.png" class="" title="03.png">

<p>增加可以選性別的 Radio Button</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, Typography, TextField &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Radio, RadioGroup, FormControl, FormControlLabel, FormLabel &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&#x27;caption&#x27;</span>&gt;</span>Please fill this form to create an account !<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-002-sign-up/04.png" class="" title="04.png">

<p>利用 display 將 Radio 橫向排列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, Typography, TextField &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Radio, RadioGroup, FormControl, FormControlLabel, FormLabel &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> marginTop = &#123;</span><br><span class="line">        <span class="attr">marginTop</span>: <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&#x27;caption&#x27;</span>&gt;</span>Please fill this form to create an account !<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span> &#x27;<span class="attr">initial</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-002-sign-up/05.png" class="" title="05.png">

<p>再增加三個輸入欄，分別為 Phone Number、Password 及 Confirm Password</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, Typography, TextField &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Radio, RadioGroup, FormControl, FormControlLabel, FormLabel &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> marginTop = &#123;</span><br><span class="line">        <span class="attr">marginTop</span>: <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&#x27;caption&#x27;</span>&gt;</span>Please fill this form to create an account !<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span> &#x27;<span class="attr">initial</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Phone Number&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter phone number&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Confirm Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Comfirm password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-002-sign-up/06.png" class="" title="06.png">

<p>加上同意的 Check Box</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, Typography, TextField, Checkbox &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Radio, RadioGroup, FormControl, FormControlLabel, FormLabel &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> marginTop = &#123;</span><br><span class="line">        <span class="attr">marginTop</span>: <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&#x27;caption&#x27;</span>&gt;</span>Please fill this form to create an account !<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span> &#x27;<span class="attr">initial</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Phone Number&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter phone number&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Confirm Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Comfirm password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;checkedB&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    label=&quot;I accept the terms and conditions.&quot;</span></span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-002-sign-up/07.png" class="" title="07.png">

<p>最後加上提交按鈕</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, Typography, TextField, Checkbox, Button &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Radio, RadioGroup, FormControl, FormControlLabel, FormLabel &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> marginTop = &#123;</span><br><span class="line">        <span class="attr">marginTop</span>: <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> styleButton = &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;8px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&#x27;caption&#x27;</span>&gt;</span>Please fill this form to create an account !<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span> &#x27;<span class="attr">initial</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Phone Number&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter phone number&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Confirm Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Comfirm password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;checkedB&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    label=&quot;I accept the terms and conditions.&quot;</span></span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-002-sign-up/08.png" class="" title="08.png">


<p><a href="https://github.com/pluto123/login_form/tree/%EF%BC%B3ign-up">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Sign Up</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 練習 - 003 使用 Tabs</title>
    <url>/2022/01/01/frontend-material-ui-practice-003-tabs/</url>
    <content><![CDATA[<p>使用分頁功能將 Sign In 和 Sign Up 合在一起，先建立一個 SignInOutContainer 容器組件，並把 Material UI 官網的 <a href="https://v4.mui.com/components/tabs/#disabled-tab">tabs</a> 範例移植過來</p>
<span id="more"></span>
<p>src/containers/SignInOutContainer/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Paper <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Paper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Tabs <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Tabs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Tab <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Tab&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignInOutContainer=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = useState(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">event, newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        setValue(newValue);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Paper</span> <span class="attr">square</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Tabs</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">indicatorColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">textColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">aria-label</span>=<span class="string">&quot;disabled tabs example&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Active&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Disabled&quot;</span> <span class="attr">disabled</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Active&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignInOutContainer;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-003-tabs/01.png" class="" title="01.png">

<p>依據選擇顯示不同分頁，參考<a href="https://v4.mui.com/components/tabs/#full-width">官網</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Paper <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Paper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Tabs <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Tabs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Tab <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Tab&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Typography&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Box <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Box&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TabPanel</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; children, value, index, ...other &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">hidden</span>=<span class="string">&#123;value</span> !== <span class="string">index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">id</span>=<span class="string">&#123;</span>`<span class="attr">full-width-tabpanel-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">aria-labelledby</span>=<span class="string">&#123;</span>`<span class="attr">full-width-tab-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#123;<span class="attr">...other</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;value === index &amp;&amp; (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Box</span> <span class="attr">p</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Typography</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Box</span>&gt;</span></span></span><br><span class="line"><span class="xml">      )&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignInOutContainer=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = useState(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">event, newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        setValue(newValue);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Paper</span> <span class="attr">square</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Tabs</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">indicatorColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">textColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">aria-label</span>=<span class="string">&quot;disabled tabs example&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Item One&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Item Two&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">TabPanel</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">index</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                Item One</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TabPanel</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">TabPanel</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">index</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                Item Two</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TabPanel</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignInOutContainer;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-003-tabs/02.png" class="" title="02.png">

<p>將 Login 和 SignUp 組件放在分頁上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Paper <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Paper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Tabs <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Tabs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Tab <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Tab&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Typography&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Box <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Box&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;../../components/Login&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> SignUp <span class="keyword">from</span> <span class="string">&#x27;../../components/SingUp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TabPanel</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; children, value, index, ...other &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">hidden</span>=<span class="string">&#123;value</span> !== <span class="string">index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">id</span>=<span class="string">&#123;</span>`<span class="attr">full-width-tabpanel-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">aria-labelledby</span>=<span class="string">&#123;</span>`<span class="attr">full-width-tab-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#123;<span class="attr">...other</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;value === index &amp;&amp; (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Box</span> <span class="attr">p</span>=<span class="string">&#123;3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Typography</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Box</span>&gt;</span></span></span><br><span class="line"><span class="xml">      )&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignInOutContainer=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = useState(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">event, newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        setValue(newValue);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Paper</span> <span class="attr">square</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Tabs</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">indicatorColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">textColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">aria-label</span>=<span class="string">&quot;disabled tabs example&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Sign In&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Sign Up&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">TabPanel</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">index</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TabPanel</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">TabPanel</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">index</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">SignUp</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TabPanel</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignInOutContainer;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-003-tabs/03.png" class="" title="03.png">

<p>進行微調<br>src/components/Login/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, TextField, Checkbox, FormControlLabel, Button, Link, Typography &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;0px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> styleButton = &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;8px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> styleHeader = &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span> &#123;/* 將物件置中 */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">LockOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;styleHeader&#125;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Username&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter username&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;checkedB&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    label=&quot;Remember me&quot;</span></span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span> &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        Forget password ?</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span> &gt;</span> Do you have an account ?</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        Sign Up</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>
<p>src/components/SingUp/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, Typography, TextField, Checkbox, Button &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddCircleOutlineOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircleOutlineOutlined&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Radio, RadioGroup, FormControl, FormControlLabel, FormLabel &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;0px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> marginTop = &#123;</span><br><span class="line">        <span class="attr">marginTop</span>: <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> styleButton = &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;8px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> styleHeader = &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">AddCircleOutlineOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;styleHeader&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Typography</span> <span class="attr">variant</span>=<span class="string">&#x27;caption&#x27;</span>&gt;</span>Please fill this form to create an account !<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span> &#x27;<span class="attr">initial</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Phone Number&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter phone number&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Confirm Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Comfirm password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;checkedB&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    label=&quot;I accept the terms and conditions.&quot;</span></span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<p>src/containers/SignInOutContainer/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Paper <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Paper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Tabs <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Tabs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Tab <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Tab&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Typography&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Box <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/Box&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;../../components/Login&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> SignUp <span class="keyword">from</span> <span class="string">&#x27;../../components/SingUp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TabPanel</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; children, value, index, ...other &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">hidden</span>=<span class="string">&#123;value</span> !== <span class="string">index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">id</span>=<span class="string">&#123;</span>`<span class="attr">full-width-tabpanel-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">aria-labelledby</span>=<span class="string">&#123;</span>`<span class="attr">full-width-tab-</span>$&#123;<span class="attr">index</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#123;<span class="attr">...other</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;value === index &amp;&amp; (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Box</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Typography</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Box</span>&gt;</span></span></span><br><span class="line"><span class="xml">      )&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignInOutContainer=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = useState(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">event, newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        setValue(newValue);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;<span class="attr">width</span>: <span class="number">340</span>, <span class="attr">margin</span>: <span class="string">&#x27;20px auto&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Paper</span> <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span> <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Tabs</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">indicatorColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">textColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">aria-label</span>=<span class="string">&quot;disabled tabs example&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Sign In&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Sign Up&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">TabPanel</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">index</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TabPanel</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">TabPanel</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">index</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">SignUp</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TabPanel</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignInOutContainer;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-003-tabs/04.png" class="" title="04.png">
<img src="/2022/01/01/frontend-material-ui-practice-003-tabs/05.png" class="" title="05.png">

<p>將改變分頁的回調函數傳給 Login 組件，讓它可以在使用者按下 Sign Up 超連結時可以跳轉到 Sign Up 分頁<br>src/containers/SignInOutContainer/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignInOutContainer=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">event, newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        setValue(newValue);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Paper</span> <span class="attr">elevation</span>=<span class="string">&#123;20&#125;</span> <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Tabs</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">indicatorColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">textColor</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">aria-label</span>=<span class="string">&quot;disabled tabs example&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Sign In&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">label</span>=<span class="string">&quot;Sign Up&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">TabPanel</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">index</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Login</span> <span class="attr">handleChange</span>=<span class="string">&#123;handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TabPanel</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">TabPanel</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">index</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">SignUp</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">TabPanel</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignInOutContainer;</span><br></pre></td></tr></table></figure>
<p>src/components/Login/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Grid, Paper, Avatar, TextField, Checkbox, FormControlLabel, Button, Link, Typography &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LockOutlinedIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LockOutlined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Login=<span class="function">(<span class="params">&#123;handleChange&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> paperStyle = &#123;</span><br><span class="line">        <span class="attr">padding</span>: <span class="number">20</span>, </span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;70vh&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;0px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> avatarStyle = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> styleButton = &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&#x27;8px auto&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> styleHeader = &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span> // 設定 <span class="attr">Paper</span> 組件樣式</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span> &#123;/* 將物件置中 */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;avatarStyle&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">LockOutlinedIcon</span> /&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;styleHeader&#125;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Username&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter username&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">name</span>=<span class="string">&quot;checkedB&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    label=&quot;Remember me&quot;</span></span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span> &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        Forget password ?</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Typography</span> &gt;</span> Do you have an account ?</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>handleChange(&quot;event&quot;, 1)&#125;&gt;</span></span><br><span class="line"><span class="xml">                        Sign Up</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/login_form/tree/use-tabs">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Tabs</tag>
      </tags>
  </entry>
  <entry>
    <title>Material UI 練習 - 004 使用 Formik 驗證輸入格式</title>
    <url>/2022/01/01/frontend-material-ui-practice-004-validation-using-formik/</url>
    <content><![CDATA[<p>安裝 <a href="https://formik.org/">Formik</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install formik --save</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在 SignUp 組件中引入<br>src/components/SingUp/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; Formik, Field, Form &#125; <span class="keyword">from</span> <span class="string">&#x27;formik&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;(props) =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">initial</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Phone Number&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter phone number&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">label</span>=<span class="string">&#x27;Confirm Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Comfirm password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">name</span>=<span class="string">&quot;checkedB&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    /&gt;</span></span></span><br><span class="line"><span class="xml">                                &#125;</span></span><br><span class="line"><span class="xml">                                label=&quot;I accept the terms and conditions.&quot;</span></span><br><span class="line"><span class="xml">                            /&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    )&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>

<p>setup initial values</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> initialValues =&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">phoneNumber</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">confirmPassword</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">termsAndConditions</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span> <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;(props) =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">name</span>=<span class="string">&#x27;name&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">name</span>=<span class="string">&#x27;email&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;gender&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">initial</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">name</span>=<span class="string">&#x27;phoneNumber&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Phone Number&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter phone number&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">name</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">TextField</span> <span class="attr">name</span>=<span class="string">&#x27;confirmPassword&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Confirm Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Comfirm password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    &lt;<span class="attr">Checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">name</span>=<span class="string">&quot;termsAndConditions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    /&gt;</span></span></span><br><span class="line"><span class="xml">                                &#125;</span></span><br><span class="line"><span class="xml">                                label=&quot;I accept the terms and conditions.&quot;</span></span><br><span class="line"><span class="xml">                            /&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    )&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>

<p>將需要提交前做檢查的組件，都換成 Formik 的 Field 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span> <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;(props) =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;name&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;email&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;RadioGroup&#125;</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;gender&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">initial</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;phoneNumber&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Phone Number&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter phone number&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;confirmPassword&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Confirm Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Comfirm password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    &lt;<span class="attr">Field</span> <span class="attr">as</span>=<span class="string">&#123;Checkbox&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">name</span>=<span class="string">&quot;termsAndConditions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    /&gt;</span></span></span><br><span class="line"><span class="xml">                                &#125;</span></span><br><span class="line"><span class="xml">                                label=&quot;I accept the terms and conditions.&quot;</span></span><br><span class="line"><span class="xml">                            /&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    )&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>

<p>建立提交回調函數取得提交數據</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">values, props</span>) =&gt;</span> (</span><br><span class="line">        <span class="built_in">console</span>.log(values)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span> <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>

<p>驗證處理<br>安裝<a href="https://github.com/jquense/yup">yup</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i yup</span></span><br></pre></td></tr></table></figure>
<p>以處理 name 驗證為例，首先引入 Yup 及顯示錯誤訊息的 ErrorMessage 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Formik, Field, Form, ErrorMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;formik&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Yup <span class="keyword">from</span> <span class="string">&#x27;yup&#x27;</span></span><br></pre></td></tr></table></figure>
<p>接著編輯處理條件，針對 name 的驗證條件是字串且最小長度為 3，是個必要項</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> validationSchema = Yup.object().shape(&#123;</span><br><span class="line">        <span class="attr">name</span>: Yup.string().min(<span class="number">3</span>, <span class="string">&quot;It&#x27;s too short&quot;</span>).required(<span class="string">&quot;Required&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span> <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span> <span class="attr">validationSchema</span>=<span class="string">&#123;validationSchema&#125;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<p>加入顯示錯誤組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span> <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span> <span class="attr">validationSchema</span>=<span class="string">&#123;validationSchema&#125;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;(props) =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;name&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span>&#123; msg =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">ErrorMessage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            ...</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    )&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/01/frontend-material-ui-practice-004-validation-using-formik/01.png" class="" title="01.png">
<img src="/2022/01/01/frontend-material-ui-practice-004-validation-using-formik/02.png" class="" title="02.png">
<img src="/2022/01/01/frontend-material-ui-practice-004-validation-using-formik/03.png" class="" title="03.png">

<p>將其他輸入欄位補上驗證處理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> validationSchema = Yup.object().shape(&#123;</span><br><span class="line">        <span class="attr">name</span>: Yup.string().min(<span class="number">3</span>, <span class="string">&quot;It&#x27;s too short&quot;</span>).required(<span class="string">&quot;Required&quot;</span>),</span><br><span class="line">        <span class="attr">email</span>: Yup.string().email(<span class="string">&quot;Enter valid email&quot;</span>).required(<span class="string">&quot;Required&quot;</span>),</span><br><span class="line">        <span class="attr">phoneNumber</span>: Yup.number().typeError(<span class="string">&quot;Enter valid Phone Number&quot;</span>).required(<span class="string">&quot;Required&quot;</span>),</span><br><span class="line">        <span class="attr">password</span>: Yup.string().min(<span class="number">8</span>, <span class="string">&quot;Password minimue length should be 8&quot;</span>).required(<span class="string">&quot;Required&quot;</span>),</span><br><span class="line">        <span class="attr">confirmPassword</span>: Yup.string().oneOf([Yup.ref(<span class="string">&#x27;password&#x27;</span>)], <span class="string">&quot;Password not matched&quot;</span>).required(<span class="string">&quot;Required&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span> <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span> <span class="attr">validationSchema</span>=<span class="string">&#123;validationSchema&#125;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;(props) =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;name&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Name&#x27;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your name&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span>&#123; msg =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">ErrorMessage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;email&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter your e-mail&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&#x27;email&#x27;</span>&gt;</span>&#123; msg =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">ErrorMessage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;RadioGroup&#125;</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;gender&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">initial</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;phoneNumber&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Phone Number&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter phone number&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&#x27;phoneNumber&#x27;</span>&gt;</span>&#123; msg =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">ErrorMessage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Enter password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&#x27;password&#x27;</span>&gt;</span>&#123; msg =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">ErrorMessage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;TextField&#125;</span> <span class="attr">name</span>=<span class="string">&#x27;confirmPassword&#x27;</span> <span class="attr">label</span>=<span class="string">&#x27;Confirm Password&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;Comfirm password&#x27;</span> <span class="attr">fullWidth</span> <span class="attr">required</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&#x27;confirmPassword&#x27;</span>&gt;</span>&#123; msg =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">ErrorMessage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    &lt;<span class="attr">Field</span> <span class="attr">as</span>=<span class="string">&#123;Checkbox&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">name</span>=<span class="string">&quot;termsAndConditions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    /&gt;</span></span></span><br><span class="line"><span class="xml">                                &#125;</span></span><br><span class="line"><span class="xml">                                label=&quot;I accept the terms and conditions.&quot;</span></span><br><span class="line"><span class="xml">                            /&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    )&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>

<p>Radio Button 驗證處理，引入 FormHelperText 組件作為顯示錯誤用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Radio, RadioGroup, FormControl, FormControlLabel, FormLabel &#125; <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> validationSchema = Yup.object().shape(&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="attr">gender</span>: Yup.string().oneOf([<span class="string">&quot;male&quot;</span>, <span class="string">&quot;female&quot;</span>], <span class="string">&quot;Required&quot;</span>).required(<span class="string">&quot;Required&quot;</span>),</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span> <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span> <span class="attr">validationSchema</span>=<span class="string">&#123;validationSchema&#125;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;(props) =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            ...</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">component</span>=<span class="string">&quot;fieldset&quot;</span> <span class="attr">style</span>=<span class="string">&#123;marginTop&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">FormLabel</span> <span class="attr">component</span>=<span class="string">&quot;legend&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">FormLabel</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">Field</span> <span class="attr">as</span>=<span class="string">&#123;RadioGroup&#125;</span> <span class="attr">aria-label</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;gender&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">initial</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Female&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">FormControlLabel</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">control</span>=<span class="string">&#123;</span>&lt;<span class="attr">Radio</span> /&gt;</span>&#125; label=&quot;Male&quot; /&gt;</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">FormControl</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormHelperText</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&#x27;gender&#x27;</span>&gt;</span>&#123; msg =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">ErrorMessage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">FormHelperText</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            ...</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    )&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>

<p>CheckBox 驗證處理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SignUp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> validationSchema = Yup.object().shape(&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="attr">termsAndConditions</span>: Yup.string().oneOf([<span class="string">&quot;true&quot;</span>], <span class="string">&quot;Accept terms &amp; conditions&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Paper</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">style</span>=<span class="string">&#123;paperStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Formik</span> <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span> <span class="attr">validationSchema</span>=<span class="string">&#123;validationSchema&#125;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;(props) =&gt; (</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            ...</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormControlLabel</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                <span class="attr">control</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    &lt;<span class="attr">Field</span> <span class="attr">as</span>=<span class="string">&#123;Checkbox&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">name</span>=<span class="string">&quot;termsAndConditions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                        <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    /&gt;</span></span></span><br><span class="line"><span class="xml">                                &#125;</span></span><br><span class="line"><span class="xml">                                label=&quot;I accept the terms and conditions.&quot;</span></span><br><span class="line"><span class="xml">                            /&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">FormHelperText</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&#x27;termsAndConditions&#x27;</span>&gt;</span>&#123; msg =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">ErrorMessage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">FormHelperText</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    )&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Formik</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Paper</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SignUp;</span><br></pre></td></tr></table></figure>

<p>當使用者按下 Submit 按鈕後會變成 Loading</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Button type=<span class="string">&#x27;submit&#x27;</span> color=<span class="string">&#x27;primary&#x27;</span> variant=<span class="string">&#x27;contained&#x27;</span> </span><br><span class="line">    disabled=&#123;props.isSubmitting&#125; style=&#123;styleButton&#125;&gt;</span><br><span class="line">        &#123;props.isSubmitting?<span class="string">&quot;Loading&quot;</span>:<span class="string">&quot;Sign up&quot;</span>&#125;</span><br><span class="line">&lt;/Button&gt;</span><br></pre></td></tr></table></figure>
<p>設定兩秒後會清除全部輸入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">values, props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            props.resetForm()</span><br><span class="line">            props.setSubmitting(<span class="literal">false</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note:<br>如果 TextField 中有加入 required 屬性，則會出現以下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Field <span class="keyword">as</span>=&#123;TextField&#125; name=<span class="string">&#x27;name&#x27;</span> label=<span class="string">&#x27;Name&#x27;</span> </span><br><span class="line">    placeholder=<span class="string">&#x27;Enter your name&#x27;</span> fullWidth required /&gt;</span><br></pre></td></tr></table></figure>
<p>則會出現 Material-UI 的錯誤訊息提示</p>
<img src="/2022/01/01/frontend-material-ui-practice-004-validation-using-formik/04.png" class="" title="04.png">
<p>因為我們使用別的套件來處理驗證了，所以就必須把 required 移除掉．</p>
<p><a href="https://github.com/pluto123/login_form/tree/validate-with-Formik">代碼</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material UI</category>
      </categories>
      <tags>
        <tag>Validation</tag>
        <tag>Formik</tag>
        <tag>Yup</tag>
      </tags>
  </entry>
  <entry>
    <title>Material-Table 基本使用介紹</title>
    <url>/2022/01/02/frontend-material-table-basic/</url>
    <content><![CDATA[<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><h2 id="install-material-core-amp-material-table"><a href="#install-material-core-amp-material-table" class="headerlink" title="install material-core &amp; material-table"></a>install material-core &amp; material-table</h2><p><a href="https://material-table.com/">offcial website</a><br>material-table v1.36.1 以上需要 React v16.8.5 以上的版本支援</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install material-table --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/core --save</span></span><br></pre></td></tr></table></figure>
<h2 id="引入-icons"><a href="#引入-icons" class="headerlink" title="引入 icons"></a>引入 icons</h2><p>第一種方式在 index.html 中引入樣式<br>public/index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二種方式安裝 @material-ui/icons</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @material-ui/icons --save</span></span><br></pre></td></tr></table></figure>
<p>在需要用到 Material-Table 的頁面中，如下列方式引入<br>src/App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> AddBox <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddBox&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ArrowDownward <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/ArrowDownward&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Check <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Check&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ChevronLeft <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/ChevronLeft&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ChevronRight <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/ChevronRight&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Clear <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Clear&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> DeleteOutline <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/DeleteOutline&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Edit <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Edit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> FilterList <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/FilterList&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> FirstPage <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/FirstPage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LastPage <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LastPage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Remove <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Remove&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> SaveAlt <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/SaveAlt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Search&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ViewColumn <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/ViewColumn&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tableIcons = &#123;</span><br><span class="line">    <span class="attr">Add</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">AddBox</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">Check</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Check</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">Clear</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Clear</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">Delete</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">DeleteOutline</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">DetailPanel</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ChevronRight</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">Edit</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Edit</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">Export</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">SaveAlt</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">Filter</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">FilterList</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">FirstPage</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">FirstPage</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">LastPage</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">LastPage</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">NextPage</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ChevronRight</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">PreviousPage</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ChevronLeft</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">ResetSearch</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Clear</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">Search</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Search</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">SortArrow</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ArrowDownward</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">ThirdStateCheck</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Remove</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    <span class="attr">ViewColumn</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ViewColumn</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">MaterialTable</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="import-material-atble-and-create-a-empty-table"><a href="#import-material-atble-and-create-a-empty-table" class="headerlink" title="import material-atble and create a empty table"></a>import material-atble and create a empty table</h1><p>src/App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MaterialTable <span class="keyword">from</span> <span class="string">&#x27;material-table&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> AddBox <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddBox&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ArrowDownward <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/ArrowDownward&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Check <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Check&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ChevronLeft <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/ChevronLeft&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ChevronRight <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/ChevronRight&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Clear <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Clear&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> DeleteOutline <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/DeleteOutline&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Edit <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Edit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> FilterList <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/FilterList&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> FirstPage <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/FirstPage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LastPage <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/LastPage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Remove <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Remove&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> SaveAlt <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/SaveAlt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Search&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ViewColumn <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/ViewColumn&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tableIcons = &#123;</span><br><span class="line">  <span class="attr">Add</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">AddBox</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">Check</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Check</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">Clear</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Clear</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">Delete</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">DeleteOutline</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">DetailPanel</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ChevronRight</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">Edit</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Edit</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">Export</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">SaveAlt</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">Filter</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">FilterList</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">FirstPage</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">FirstPage</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">LastPage</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">LastPage</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">NextPage</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ChevronRight</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">PreviousPage</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ChevronLeft</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">ResetSearch</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Clear</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">Search</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Search</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">SortArrow</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ArrowDownward</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">ThirdStateCheck</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Remove</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">  <span class="attr">ViewColumn</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ViewColumn</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Name&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;name&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Email&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;email&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Phone Number&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;phone&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Age&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;age&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Gender&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;gender&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;City&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;city&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;School Fee&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;fee&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/01.png" class="" title="01.png">
<p><a href="https://github.com/pluto123/material_table">code</a><br>Note: 因為 Material-UI 由 v4 升級到 v5，導致 Material-Table 會出現以下警告，網路上的說法是等下次改版的 Material-Table 就會修正了，找了幾個暫解的方案，並沒沒有比較乾淨俐落的解法，不過不影響功能開發，所以我就先暫時沒去管它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Warning: Failed prop type: The prop <span class="string">`onPageChange`</span> is marked <span class="keyword">as</span> required <span class="keyword">in</span> <span class="string">`ForwardRef(TablePagination)`</span>, but its value is <span class="string">`undefined`</span>.</span><br><span class="line">    <span class="keyword">in</span> ForwardRef(TablePagination) (created by WithStyles(ForwardRef(TablePagination)))</span><br><span class="line">    <span class="keyword">in</span> WithStyles(ForwardRef(TablePagination)) (created by MaterialTable)</span><br><span class="line">    <span class="keyword">in</span> tr (created by ForwardRef(TableRow))</span><br><span class="line">    <span class="keyword">in</span> ForwardRef(TableRow) (created by WithStyles(ForwardRef(TableRow)))</span><br><span class="line">    <span class="keyword">in</span> WithStyles(ForwardRef(TableRow)) (created by MaterialTable)</span><br><span class="line">    <span class="keyword">in</span> tfoot (created by ForwardRef(TableFooter))</span><br><span class="line">    <span class="keyword">in</span> ForwardRef(TableFooter) (created by WithStyles(ForwardRef(TableFooter)))</span><br><span class="line">    <span class="keyword">in</span> WithStyles(ForwardRef(TableFooter)) (created by MaterialTable)</span><br><span class="line">    <span class="keyword">in</span> table (created by ForwardRef(Table))</span><br><span class="line">    <span class="keyword">in</span> ForwardRef(Table) (created by WithStyles(ForwardRef(Table)))</span><br><span class="line">    <span class="keyword">in</span> WithStyles(ForwardRef(Table)) (created by MaterialTable)</span><br><span class="line">    <span class="keyword">in</span> div (created by ForwardRef(Paper))</span><br><span class="line">    <span class="keyword">in</span> ForwardRef(Paper) (created by WithStyles(ForwardRef(Paper)))</span><br><span class="line">    <span class="keyword">in</span> WithStyles(ForwardRef(Paper)) (created by Container)</span><br><span class="line">    <span class="keyword">in</span> Container (created by MaterialTable)</span><br><span class="line">    <span class="keyword">in</span> Provider (created by App)</span><br><span class="line">    <span class="keyword">in</span> App (created by ErrorBoundary)</span><br><span class="line">    <span class="keyword">in</span> ErrorBoundary (created by DragDropContext)</span><br><span class="line">    <span class="keyword">in</span> DragDropContext (created by MaterialTable)</span><br><span class="line">    <span class="keyword">in</span> MaterialTable</span><br><span class="line">    <span class="keyword">in</span> Unknown (created by WithStyles(Component))</span><br><span class="line">    <span class="keyword">in</span> WithStyles(Component) (at App.js:<span class="number">52</span>)</span><br><span class="line">    <span class="keyword">in</span> div (at App.js:<span class="number">51</span>)</span><br><span class="line">    <span class="keyword">in</span> App (at src/index.js:<span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<h1 id="add-table-data-and-setup-table-title"><a href="#add-table-data-and-setup-table-title" class="headerlink" title="add table data and setup table title"></a>add table data and setup table title</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [tableData, setTableData] = useState([</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Steven&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;steven@gmail.com&quot;</span>, <span class="attr">phone</span>: <span class="string">&quot;0920765432&quot;</span>, <span class="attr">age</span>: <span class="number">45</span>, <span class="attr">gender</span>: <span class="string">&quot;M&quot;</span>, <span class="attr">city</span>: <span class="string">&quot;Taipei&quot;</span>, <span class="attr">fee</span>: <span class="number">46352</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Eric&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;eric@gmail.com&quot;</span>, <span class="attr">phone</span>: <span class="string">&quot;0921123456&quot;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&quot;M&quot;</span>, <span class="attr">city</span>: <span class="string">&quot;Taiwan&quot;</span>, <span class="attr">fee</span>: <span class="number">47625</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Oscar&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;oscar@gmail.com&quot;</span>, <span class="attr">phone</span>: <span class="string">&quot;0922567893&quot;</span>, <span class="attr">age</span>: <span class="number">11</span>, <span class="attr">gender</span>: <span class="string">&quot;M&quot;</span>, <span class="attr">city</span>: <span class="string">&quot;Japan&quot;</span>, <span class="attr">fee</span>: <span class="number">48712</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Amy&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;amy@gmail.com&quot;</span>, <span class="attr">phone</span>: <span class="string">&quot;0931679356&quot;</span>, <span class="attr">age</span>: <span class="number">45</span>, <span class="attr">gender</span>: <span class="string">&quot;F&quot;</span>, <span class="attr">city</span>: <span class="string">&quot;USA&quot;</span>, <span class="attr">fee</span>: <span class="number">46793</span> &#125;</span><br><span class="line">  ])</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/02.png" class="" title="02.png">
<p><a href="https://github.com/pluto123/material_table/tree/add-table-data-and-title">code</a></p>
<h1 id="alignment-of-column"><a href="#alignment-of-column" class="headerlink" title="alignment of column"></a>alignment of column</h1><p>align: [right | center | left]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Phone Number&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;phone&quot;</span>, <span class="attr">align</span>: <span class="string">&#x27;right&#x27;</span> &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/03.png" class="" title="03.png">
<p><a href="https://github.com/pluto123/material_table/tree/alignment-of-column">code</a></p>
<h1 id="lockup"><a href="#lockup" class="headerlink" title="lockup"></a>lockup</h1><p>將 M 轉換成 Male，F 轉換成 female</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> genderLookup = &#123; </span><br><span class="line">    <span class="attr">M</span>: <span class="string">&quot;Male&quot;</span>, </span><br><span class="line">    <span class="attr">F</span>: <span class="string">&quot;Female&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Gender&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;gender&quot;</span>, <span class="attr">lookup</span>: genderLookup &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/04.png" class="" title="04.png">
<p><a href="https://github.com/pluto123/material_table/tree/lockup">code</a></p>
<h1 id="set-empty-value-to-null"><a href="#set-empty-value-to-null" class="headerlink" title="set empty value to null"></a>set empty value to null</h1><p>因為只要是資料值是空字串或是 null，都會被顯示為空白</p>
<img src="/2022/01/02/frontend-material-table-basic/05.png" class="" title="05.png">
<p>為了將有空值的地方顯示為 null，則需要處理一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [tableData, setTableData] = useState([</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Steven&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;steven@gmail.com&quot;</span>, <span class="attr">phone</span>: <span class="string">&quot;0920765432&quot;</span>, <span class="attr">age</span>: <span class="literal">null</span>, <span class="attr">gender</span>: <span class="string">&quot;M&quot;</span>, <span class="attr">city</span>: <span class="string">&quot;Taipei&quot;</span>, <span class="attr">fee</span>: <span class="number">46352</span> &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ])</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Age&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">emptyValue</span>: <span class="function">()=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>null<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/06.png" class="" title="06.png">
<p><a href="https://github.com/pluto123/material_table/tree/set-empty-value-to-null">code</a></p>
<h1 id="column-type"><a href="#column-type" class="headerlink" title="column type"></a>column type</h1><p>type : boolean | numeric | date | time | currency</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;School Fee&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;fee&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;currency&quot;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/07.png" class="" title="07.png">

<h1 id="change-currency-code"><a href="#change-currency-code" class="headerlink" title="change currency code"></a>change currency code</h1><p>改變幣別符號，參考 <a href="https://docs.1010data.com/1010dataReferenceManual/DataTypesAndFormats/currencyUnitCodes.html">Currency codes (ISO 4217)</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;School Fee&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;fee&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;currency&quot;</span>, <span class="attr">currencySetting</span>: &#123; <span class="attr">currencyCode</span>: <span class="string">&quot;TWD&quot;</span> &#125; &#125;</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>原本 $ 符號變成 NT$</p>
<img src="/2022/01/02/frontend-material-table-basic/08.png" class="" title="08.png">
<p><a href="https://github.com/pluto123/material_table/tree/column-type">code</a></p>
<h1 id="設定小數點位數"><a href="#設定小數點位數" class="headerlink" title="設定小數點位數"></a>設定小數點位數</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;School Fee&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;fee&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;currency&quot;</span>, <span class="attr">currencySetting</span>:&#123;<span class="attr">currencyCode</span>: <span class="string">&quot;TWD&quot;</span>, <span class="attr">minimumFractionDigits</span>: <span class="number">1</span>&#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/09.png" class="" title="09.png">
<p><a href="https://github.com/pluto123/material_table/tree/column-type">code</a></p>
<h1 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h1><p>原本預設是每個欄位都可以進行排序，藉由設定 options 中的 sorting 值可以關閉欄位名稱旁的排序功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> <span class="attr">options</span>=<span class="string">&#123;&#123;sorting:</span> <span class="attr">false</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>若只要關閉特定欄位的排序功能，則在該欄位的 sorting 設為 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Name&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;name&quot;</span>, <span class="attr">sorting</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>若要設定預設排序方向時，用 defaultSort 設定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Age&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">emptyValue</span>: <span class="function">()=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>null<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>, defaultSort: <span class="string">&quot;asc&quot;</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>客製化排序，use customSort</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Name&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;name&quot;</span>, <span class="attr">customSort</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.name.length - b.name.length&#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/pluto123/material_table/tree/Sort">code</a></p>
<h1 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h1><p>關閉 search 功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> <span class="attr">options</span>=<span class="string">&#123;&#123;sorting:</span> <span class="attr">false</span>, <span class="attr">search</span>=<span class="string">false&#125;&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>原本在表的右上角有個 search 欄位消失</p>
<img src="/2022/01/02/frontend-material-table-basic/10.png" class="" title="10.png">

<p>使用 searchTest 設定預設搜尋文本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">steven</span>&quot;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/11.png" class="" title="11.png">

<p>指定不搜尋某個欄位，使用 searchable</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Age&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">emptyValue</span>: <span class="function">()=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>null<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>, defaultSort: <span class="string">&quot;asc&quot;</span>, <span class="attr">searchable</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/12.png" class="" title="12.png">

<p>使用 searchFieldAlignment 調整搜尋欄位位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">steven</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/13.png" class="" title="13.png">

<p>使用 searchAutoFocus 載入頁面後 search 欄位自動取得焦點</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">steven</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/14.png" class="" title="14.png">

<p>使用 searchFieldVariant 設定搜尋框樣式<br>searchFieldVariant: [standard | filled | outlined]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/15.png" class="" title="15.png">
<p><a href="https://github.com/pluto123/material_table/tree/Search">code</a></p>
<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>使用 filtering 將過濾功能打開</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/16.png" class="" title="16.png">

<p>欲關閉某欄位過濾功能，則使用 filtering 關閉該欄位的過濾功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Name&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;name&quot;</span>, <span class="attr">customSort</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.name.length - b.name.length, <span class="attr">filtering</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/17.png" class="" title="17.png">

<p>使用 filterPlaceholder 設定提示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Email&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;email&quot;</span>, <span class="attr">filterPlaceholder</span>: <span class="string">&quot;Filter by email&quot;</span> &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/18.png" class="" title="18.png">
<p><a href="https://github.com/pluto123/material_table/tree/Filter">code</a></p>
<h1 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h1><p>使用 paging 關閉分頁功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">false</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/19.png" class="" title="19.png">

<p>使用 pageSizeOptions 設定一頁顯示的資料數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSizeOptions:</span>[<span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">20</span>, <span class="attr">25</span>, <span class="attr">50</span>, <span class="attr">100</span>]&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/20.png" class="" title="20.png">

<p>使用 pageSize 設定一頁預設顯示的資料數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSizeOptions:</span>[<span class="attr">2</span>, <span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">20</span>, <span class="attr">25</span>, <span class="attr">50</span>, <span class="attr">100</span>],</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSize:</span> <span class="attr">2</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/21.png" class="" title="21.png">

<p>使用 paginationType 改變換頁方式<br>paginationType: [normal | stepped]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSizeOptions:</span>[<span class="attr">2</span>, <span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">20</span>, <span class="attr">25</span>, <span class="attr">50</span>, <span class="attr">100</span>],</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSize:</span> <span class="attr">2</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationType:</span> &quot;<span class="attr">stepped</span>&quot;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/22.png" class="" title="22.png">

<p>使用 showFirstLastPageButtons 開關跳至第一頁及跳至最後一頁的按鈕</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSizeOptions:</span>[<span class="attr">2</span>, <span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">20</span>, <span class="attr">25</span>, <span class="attr">50</span>, <span class="attr">100</span>],</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSize:</span> <span class="attr">2</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationType:</span> &quot;<span class="attr">stepped</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">showFirstLastPageButtons:</span> <span class="attr">false</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/23.png" class="" title="23.png">

<p>使用 paginationPosition 改變分頁按鈕位置<br>paginationPosition: [top | bottom | both]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSizeOptions:</span>[<span class="attr">2</span>, <span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">20</span>, <span class="attr">25</span>, <span class="attr">50</span>, <span class="attr">100</span>],</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSize:</span> <span class="attr">2</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationType:</span> &quot;<span class="attr">stepped</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">showFirstLastPageButtons:</span> <span class="attr">false</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationPosition:</span> &quot;<span class="attr">top</span>&quot;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/24.png" class="" title="24.png">
<p><a href="https://github.com/pluto123/material_table/tree/Pagination">code</a></p>
<h1 id="Export-Table"><a href="#Export-Table" class="headerlink" title="Export Table"></a>Export Table</h1><p>使用 exportButton 開關匯出資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSizeOptions:</span>[<span class="attr">2</span>, <span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">20</span>, <span class="attr">25</span>, <span class="attr">50</span>, <span class="attr">100</span>],</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSize:</span> <span class="attr">2</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationType:</span> &quot;<span class="attr">stepped</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">showFirstLastPageButtons:</span> <span class="attr">false</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationPosition:</span> &quot;<span class="attr">top</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">exportButton:</span> <span class="attr">true</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/25.png" class="" title="25.png">
<p>只有當前分頁的資料被匯出</p>
<img src="/2022/01/02/frontend-material-table-basic/26.png" class="" title="26.png">

<p>使用 exportAllData 讓 export 按鈕是匯出全部分頁的資料，而不是只匯出當前分頁的資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSizeOptions:</span>[<span class="attr">2</span>, <span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">20</span>, <span class="attr">25</span>, <span class="attr">50</span>, <span class="attr">100</span>],</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSize:</span> <span class="attr">2</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationType:</span> &quot;<span class="attr">stepped</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">showFirstLastPageButtons:</span> <span class="attr">false</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationPosition:</span> &quot;<span class="attr">top</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">exportButton:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">exportAllData:</span> <span class="attr">true</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>全部資料被匯出</p>
<img src="/2022/01/02/frontend-material-table-basic/27.png" class="" title="27.png">

<p>不想將某欄位匯出，則使用 export 不讓該欄位被匯出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Age&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">emptyValue</span>: <span class="function">()=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>null<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>, defaultSort: <span class="string">&quot;asc&quot;</span>, <span class="attr">searchable</span>: <span class="literal">false</span>, <span class="attr">export</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>不輸出 Age 欄位</p>
<img src="/2022/01/02/frontend-material-table-basic/28.png" class="" title="28.png">

<p>使用 exportFileName 設定匯出的預設檔名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> <span class="attr">icons</span>=<span class="string">&#123;tableIcons&#125;</span> <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span> <span class="attr">data</span>=<span class="string">&#123;tableData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">title</span>=<span class="string">&quot;Student Information&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">sorting:</span> <span class="attr">true</span>, </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">search:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchText:</span>&quot;<span class="attr">raj</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldAlignment:</span> &quot;<span class="attr">left</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchAutoFocus:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">searchFieldVariant:</span> &quot;<span class="attr">outlined</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">filtering:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paging:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSizeOptions:</span>[<span class="attr">2</span>, <span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">20</span>, <span class="attr">25</span>, <span class="attr">50</span>, <span class="attr">100</span>],</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">pageSize:</span> <span class="attr">2</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationType:</span> &quot;<span class="attr">stepped</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">showFirstLastPageButtons:</span> <span class="attr">false</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">paginationPosition:</span> &quot;<span class="attr">top</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">exportButton:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">exportAllData:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">exportFileName:</span> &quot;<span class="attr">MyTableData</span>&quot;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/pluto123/material_table/tree/Export-Table">code</a></p>
<h1 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h1><p>使用 editable 打開添加資料的按鈕</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">editable</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onRowAdd:</span> ()=&gt;</span>new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/29.png" class="" title="29.png">

<p>改變新添加列的位置<br>addRowPosition: [first | last]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">addRowPosition:</span> &quot;<span class="attr">first</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/30.png" class="" title="30.png">

<p>把新增與取消的按鈕往最右邊擺</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">actionsColumnIndex:</span> <span class="attr">-1</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/31.png" class="" title="31.png">

<p>在 Console 中顯示新增資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">editable</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onRowAdd:</span> (<span class="attr">newRow</span>)=&gt;</span>new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line"><span class="xml">            console.log(newRow)</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/32.png" class="" title="32.png">

<p>將新增的資料存入 state 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">editable</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onRowAdd:</span> (<span class="attr">newRow</span>)=&gt;</span>new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line"><span class="xml">            setTableData([...tableData, newRow])</span></span><br><span class="line"><span class="xml">            setTimeout(()=&gt;resolve(), 1000)  // 模擬花費一秒的時間儲存</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/33.png" class="" title="33.png">

<p>在 Console 中顯示更新資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">editable</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onRowUpdate:</span> (<span class="attr">newRow</span>, <span class="attr">oldRow</span>)=&gt;</span>new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line"><span class="xml">            console.log(newRow, oldRow)</span></span><br><span class="line"><span class="xml">            setTimeout(()=&gt;resolve(), 1000)</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/34.png" class="" title="34.png">
<p>可發現 oldRow 中有一個 tableData 的 id 就是資料原先的位置，可用來當矩陣的索引完成更新</p>
<p>完成更新功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">editable</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onRowUpdate:</span> (<span class="attr">newRow</span>, <span class="attr">oldRow</span>)=&gt;</span>new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line"><span class="xml">            const updateData = [...tableData]</span></span><br><span class="line"><span class="xml">            updateData[oldRow.tableData.id] = newRow</span></span><br><span class="line"><span class="xml">            setTableData(updateData)</span></span><br><span class="line"><span class="xml">            //console.log(newRow, oldRow)</span></span><br><span class="line"><span class="xml">            setTimeout(()=&gt;resolve(), 1000)</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<p>在 Console 中顯示刪除資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">editable</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onRowDelete:</span> (<span class="attr">selectedRow</span>)=&gt;</span> new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line"><span class="xml">            console.log(selectedRow)</span></span><br><span class="line"><span class="xml">            setTimeout(()=&gt;resolve(), 1000)</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/35.png" class="" title="35.png">
<p>可發現 selectedRow 中有一個 tableData 的 id 就是資料原先的位置，可用來當矩陣的索引完成刪除</p>
<p>完成刪除功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">editable</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onRowUpdate:</span> (<span class="attr">newRow</span>, <span class="attr">oldRow</span>)=&gt;</span>new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line"><span class="xml">            const updateData = [...tableData]</span></span><br><span class="line"><span class="xml">            updateData.splice(selectedRow.tableData.id, 1)</span></span><br><span class="line"><span class="xml">            setTableData(updateData)</span></span><br><span class="line"><span class="xml">            //console.log(selectedRow)</span></span><br><span class="line"><span class="xml">            setTimeout(()=&gt;resolve(), 1000)</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/36.png" class="" title="36.png">
<p><a href="https://github.com/pluto123/material_table/tree/CURD">code</a></p>
<h1 id="客製化動作按鈕"><a href="#客製化動作按鈕" class="headerlink" title="客製化動作按鈕"></a>客製化動作按鈕</h1><p>有時候除了 CURD 之外，會需要製作一些客製化動作按鈕，如將資料寄出之類的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">actions</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">icon:</span>()=&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">            tooltip: &quot;Click me&quot;,</span></span><br><span class="line"><span class="xml">            onClick:(event, data)=&gt;console.log(data)</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        ]&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>當我們按下第二列的 Click me 按鈕時，Console 將會輸出該筆資料</p>
<img src="/2022/01/02/frontend-material-table-basic/37.png" class="" title="37.png">

<p>上面是針對每筆資料有自己個別的 Action Button，如果想要不是針對個別資料做處理動作，則需要設定 isFreeAction，此時只會有動作的觸發，若需要資料的部分就由 state 中取得資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">actions</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">icon:</span>()=&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">            tooltip: &quot;Click me&quot;,</span></span><br><span class="line"><span class="xml">            onClick:(event)=&gt;console.log(event),</span></span><br><span class="line"><span class="xml">            isFreeAction: true</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        ]&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/38.png" class="" title="38.png">

<p>使用 Icon Button，首先要安裝 @material-ui/icons，才可以使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> HomeIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/Home&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">actions</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">icon:</span>()=&gt;</span><span class="tag">&lt;<span class="name">HomeIcon</span> /&gt;</span>,</span></span><br><span class="line"><span class="xml">            tooltip: &quot;Click me&quot;,</span></span><br><span class="line"><span class="xml">            onClick:(event)=&gt;console.log(event),</span></span><br><span class="line"><span class="xml">            isFreeAction: true</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        ]&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/39.png" class="" title="39.png">
<p><a href="https://github.com/pluto123/material_table/tree/custom-action">code</a></p>
<h1 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h1><p>打開選擇按鈕讓使用者可勾選資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">selection:</span> <span class="attr">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/40.png" class="" title="40.png">

<p>disable 全選的 checkbox</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">showSelectAllCheckbox:</span> <span class="attr">false</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/41.png" class="" title="41.png">

<p>如下圖所示，當我們選擇了某幾個資料時，將會有一個紅色提示框顯示我們選擇了幾列，同時在 Search 右邊的 export 和 add 圖示按鈕也消失了</p>
<img src="/2022/01/02/frontend-material-table-basic/42.png" class="" title="42.png">
<p>如果我們要消除該提示的話，要設定 showTextRowsSelected </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">showTextRowsSelected:</span> <span class="attr">false</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/43.png" class="" title="43.png">

<p>如果有設定 selection 為 true，則客製化 action button 中的 isFreeAction 設定為 false，也不會出現在每個列中，而當有資料被選擇時才會出現</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">selection:</span> <span class="attr">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">actions</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">isFreeAction:</span> <span class="attr">false</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>沒有選擇資料時，客製化 action button 不出現</p>
<img src="/2022/01/02/frontend-material-table-basic/44.png" class="" title="44.png">
<p>有選擇資料時，客製化 action button 出現</p>
<img src="/2022/01/02/frontend-material-table-basic/45.png" class="" title="45.png">

<p>而當我們設定 selection 為 true，則客製化 action button 中的 isFreeAction 設定為 true，也不會出現在每個列中，但是會出現在 search 框的右邊，而當有資料被選擇時就消失掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">selection:</span> <span class="attr">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">actions</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">isFreeAction:</span> <span class="attr">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>沒有選擇資料時，客製化 action button 出現</p>
<img src="/2022/01/02/frontend-material-table-basic/46.png" class="" title="46.png">
<p>有選擇資料時，客製化 action button 消失</p>
<img src="/2022/01/02/frontend-material-table-basic/47.png" class="" title="47.png">

<table>
<thead>
<tr>
<th>Selection</th>
<th>isFreeAction</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>false</td>
<td>false</td>
<td>在每列中會有 action button</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>在搜尋框旁邊</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>沒有勾選資料時，不出現；勾選資料後，出現在搜尋框旁邊</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>沒有勾選資料時，出現；勾選資料後，不出現</td>
</tr>
</tbody></table>
<p>監控當有資料被勾選或取消時的觸發事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onSelectionChange</span>=<span class="string">&#123;(selectedRows)</span>=&gt;</span>console.log(selectedRows)&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/48.png" class="" title="48.png">

<p>依據資料設定勾選框為 disabled，或是想改變勾選顏色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">selectionProps:</span> <span class="attr">rowData</span>=&gt;</span>(&#123;</span></span><br><span class="line"><span class="xml">            disabled: rowData.age==null,</span></span><br><span class="line"><span class="xml">            color: &quot;primary&quot;</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/49.png" class="" title="49.png">
<p><a href="https://github.com/pluto123/material_table/tree/selection">code</a></p>
<h1 id="Grouping"><a href="#Grouping" class="headerlink" title="Grouping"></a>Grouping</h1><p>打開分組功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">selectionProps:</span> <span class="attr">rowData</span>=&gt;</span>(&#123;</span></span><br><span class="line"><span class="xml">            disabled: rowData.age==null,</span></span><br><span class="line"><span class="xml">            color: &quot;primary&quot;</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/50.png" class="" title="50.png">
<p>拖曳 Gender 欄位進行分組</p>
<img src="/2022/01/02/frontend-material-table-basic/51.png" class="" title="51.png">

<p>設定預設分組與順序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Age&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">defaultGroupOrder</span>:<span class="number">1</span>, <span class="attr">emptyValue</span>: <span class="function">()=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>null<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>&#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Gender&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;gender&quot;</span>, <span class="attr">defaultGroupOrder</span>:<span class="number">0</span>, <span class="attr">lookup</span>: genderLookup &#125;,</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/52.png" class="" title="52.png">

<p>讓某個欄位不可被分組</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Phone Number&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;phone&quot;</span>, <span class="attr">grouping</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/pluto123/material_table/tree/gouping">code</a></p>
<h1 id="Hide-Column"><a href="#Hide-Column" class="headerlink" title="Hide Column"></a>Hide Column</h1><p>讓使用者選擇要顯示哪些欄位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">columnsButton:</span> <span class="attr">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/53.png" class="" title="53.png">
<img src="/2022/01/02/frontend-material-table-basic/54.png" class="" title="54.png">
<p><a href="https://github.com/pluto123/material_table/tree/hide-column">code</a></p>
<h1 id="Custom-Cell"><a href="#Custom-Cell" class="headerlink" title="Custom Cell"></a>Custom Cell</h1><p>依據欄位值改變 cell 樣式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Age&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">render</span>: <span class="function">(<span class="params">rowData</span>)=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span> <span class="attr">rowData.age</span> &gt;</span>= 18 ? &quot;green&quot; : &quot;red&quot;&#125;&#125;&gt;&#123;rowData.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, emptyValue: <span class="function">()=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>null<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span> &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/55.png" class="" title="55.png">

<p>也可以依據欄位值決定要顯示什麼值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Age&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">render</span>: <span class="function">(<span class="params">rowData</span>)=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span> <span class="attr">rowData.age</span> &gt;</span>= 18 ? &quot;green&quot; : &quot;red&quot;&#125;&#125;&gt;&#123;rowData.age&gt;=18 ? &quot;18+&quot; : &quot;18-&quot;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, emptyValue: <span class="function">()=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>null<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span> &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/56.png" class="" title="56.png">
<p><a href="https://github.com/pluto123/material_table/tree/custom-cell">code</a></p>
<h1 id="Row-Style"><a href="#Row-Style" class="headerlink" title="Row Style"></a>Row Style</h1><p>設定列的背景顏色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">rowStyle:</span> ()=&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">            return &#123;</span></span><br><span class="line"><span class="xml">              backgroundColor: &quot;#E9E0FF&quot;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/57.png" class="" title="57.png">

<p>依據條件改變樣式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">rowStyle:</span> (<span class="attr">data</span>, <span class="attr">index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">            if (index%2 == 0)</span></span><br><span class="line"><span class="xml">              return &#123;</span></span><br><span class="line"><span class="xml">                backgroundColor: &quot;#E9E0FF&quot;</span></span><br><span class="line"><span class="xml">              &#125;</span></span><br><span class="line"><span class="xml">            else</span></span><br><span class="line"><span class="xml">              return &#123;</span></span><br><span class="line"><span class="xml">                backgroundColor: null</span></span><br><span class="line"><span class="xml">              &#125;</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/58.png" class="" title="58.png">
<p><a href="https://github.com/pluto123/material_table/tree/row-style">code</a></p>
<h1 id="Header-Style"><a href="#Header-Style" class="headerlink" title="Header Style"></a>Header Style</h1><p>改變標題列樣式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MaterialTable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">options</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">headerStyle:</span> &#123;<span class="attr">background:</span> &quot;<span class="attr">green</span>&quot;, <span class="attr">fontStyle:</span> &quot;<span class="attr">italic</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/59.png" class="" title="59.png">
<p><a href="https://github.com/pluto123/material_table/tree/header-style">code</a></p>
<h1 id="改變某欄位-Cell-Style"><a href="#改變某欄位-Cell-Style" class="headerlink" title="改變某欄位 Cell Style"></a>改變某欄位 Cell Style</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Name&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;name&quot;</span>, <span class="attr">cellStyle</span>: &#123;<span class="attr">color</span>: <span class="string">&quot;blue&quot;</span>&#125; &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/60.png" class="" title="60.png">
<p><a href="https://github.com/pluto123/material_table/tree/cell-style">code</a></p>
<h1 id="改變某欄位-Header-Style"><a href="#改變某欄位-Header-Style" class="headerlink" title="改變某欄位 Header Style"></a>改變某欄位 Header Style</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;Name&quot;</span>, <span class="attr">field</span>: <span class="string">&quot;name&quot;</span>, <span class="attr">headerStyle</span>: &#123;<span class="attr">color</span>: <span class="string">&quot;#FFFFFF&quot;</span>&#125; &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/61.png" class="" title="61.png">
<p><a href="https://github.com/pluto123/material_table/tree/one-header-style">code</a></p>
<h1 id="改變預設-Icon"><a href="#改變預設-Icon" class="headerlink" title="改變預設 Icon"></a>改變預設 Icon</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> AddCircleIcon <span class="keyword">from</span> <span class="string">&#x27;@material-ui/icons/AddCircle&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">const</span> tableIcons = &#123;</span><br><span class="line">    <span class="attr">Add</span>: forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">AddCircleIcon</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>),</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<img src="/2022/01/02/frontend-material-table-basic/62.png" class="" title="62.png">
<p><a href="https://github.com/pluto123/material_table/tree/change-default-icon-button">code</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>Material Table</category>
      </categories>
      <tags>
        <tag>Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security 文件筆記 - 003 Username/Password Authentication</title>
    <url>/2022/01/03/backend-spring-security-003-username-password/</url>
    <content><![CDATA[<p>透過檢驗用戶與密碼是否正確，是一種最常見的身分驗證方式。</p>
<h1 id="Reading-the-Username-amp-Password"><a href="#Reading-the-Username-amp-Password" class="headerlink" title="Reading the Username &amp; Password"></a><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/input.html">Reading the Username &amp; Password</a></h1><p>Spring Security 提供了幾個內建機制由 HttpServletRequest 讀取使用者名稱與密碼。</p>
<h2 id="Form-Login"><a href="#Form-Login" class="headerlink" title="Form Login"></a><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/form.html">Form Login</a></h2><p>  由 html 的 form 表單提交使用者名稱與密碼。假設使用者未經過驗證就想要取用被保護的資源，則 Spring Security 將會重導到登入頁面。<br>  下圖是一個 SecurityFilterChain 中的流程說明<br>  <img src="/2022/01/03/backend-spring-security-003-username-password/loginurlauthenticationentrypoint.png" class="" title="loginurlauthenticationentrypoint.png"></p>
<span id="more"></span>
<ol>
<li>使用者發出一個未驗證過的請求，試圖存取一個受保護的資源 /private</li>
<li>Spring Security 的 FilterSecurityInterceptor 透過丟出 AccessDeniedException 異常來指出該未經驗證的請求是被禁止的。</li>
<li>由於使用者未被驗證，因此 ExceptionTranslationFilter 啟動身份驗證並由 AuthenticationEntryPoint 發送重定向。一般 AuthenticationEntryPoint 是一個 LoginUrlAuthenticationEntryPoint 的實例。</li>
<li>然後瀏覽器會向伺服器請求 /login 資料</li>
<li>瀏覽器取得 login.html 後進行渲染讓使用者看到登入頁面</li>
</ol>
<p>  當使用者名稱與密碼被提交，則會由一個繼承 <a href="https://docs.spring.io/spring-security/site/docs/5.6.0/api/org/springframework/security/web/authentication/AbstractAuthenticationProcessingFilter.html">AbstractAuthenticationProcessingFilter</a> 類別的子類別 <a href="https://docs.spring.io/spring-security/site/docs/5.6.0/api/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.html">UsernamePasswordAuthenticationFilter</a> 處理。<br>  <img src="/2022/01/03/backend-spring-security-003-username-password/usernamepasswordauthenticationfilter.png" class="" title="usernamepasswordauthenticationfilter.png"></p>
<ol>
<li>當使用者提交用戶名與密碼時，UsernamePasswordAuthenticationFilter 會抽取 HttpServletRequest 建立一個具有 Authentication 類型的 UsernamePasswordAuthenticationToken。</li>
<li>接著 UsernamePasswordAuthenticationToken 會被傳入 AuthenticationManager 中做身分驗證。詳細的 AuthenticationManager 動作會取決於如何儲存使用者資訊。</li>
<li>如果驗證失敗則會<ul>
<li>清除 SecurityContextHolder</li>
<li>調用 RememberMeServices.loginFail，如果 remember me 沒有設定，則此步驟將會沒作用</li>
<li>調用 AuthenticationFailureHandler</li>
</ul>
</li>
<li>如果驗證成功則會<ul>
<li>SessionAuthenticationStrategy 將會收到一個新登入通知</li>
<li>Authentication 將會被設置到 SecurityContextHolder。</li>
<li>調用 RememberMeServices.loginSuccess，如果有設定的話。</li>
<li>ApplicationEventPublisher 發佈一個 InteractiveAuthenticationSuccessEvent。</li>
<li>調用 AuthenticationSuccessHandler。未驗證過的請求會被 ExceptionTranslationFilter 儲存並且重定向到登入頁面，等到登入驗證成功後，通常 AuthenticationSuccessHandler 的實作類 SimpleUrlAuthenticationSuccessHandler 將會把使用者導向原本未被認證的請求 (如 : /private)</li>
</ul>
</li>
</ol>
<p>  預設 Spring Security 登入表單是開啟的，底下是一個最簡的例子 :<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">protected <span class="keyword">void</span> <span class="function"><span class="title">configure</span>(<span class="params">HttpSecurity http</span>)</span> &#123;</span><br><span class="line">    http</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      .formLogin(withDefaults());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <img src="/2022/01/03/backend-spring-security-003-username-password/default_login_form.png" class="" title="default_login_form.png"><br>  上面這段程式碼會渲染一個預設的登入頁面，而一般應用產品都會有自己客製化的登入頁面。<br>  底下是一個定義客製化頁面的例子 :<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">protected <span class="keyword">void</span> configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">    http</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        .formLogin(form -&gt; form</span><br><span class="line">            .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  上面設定了登入頁面的 url，接著就要自定義頁面，以 Thymeleaf 為例，在底下位置中定義頁面，則會對應到 /login<br>  src/main/resources/templates/login.html<br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;https://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Please Log In<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Please Log In<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.error&#125;&quot;</span>&gt;</span></span><br><span class="line">            Invalid username and password.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.logout&#125;&quot;</span>&gt;</span></span><br><span class="line">            You have been logged out.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Log in&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>  關於以上的 Html 文件有幾個重點 :</p>
<ul>
<li>表單必須使用 POST 方式提交到 /login</li>
<li>表單將會需要包含 CSRF Token，這部分會由 Thymeleaf 自動完成。</li>
<li>表單必須將使用者輸入的用戶名，放在參數名稱為 username 中。</li>
<li>表單必須將使用者輸入的密碼，放在參數名為 password 中。</li>
<li>如果使用者提供有效的用戶名或密碼時，則會顯示 “Invalid username and password.”。</li>
<li>如果參數被設定，則會顯示 “You have been logged out.”。</li>
</ul>
<p>  如果是使用 Spring MVC，則還需要實作一個 controller，用來處理 GET /login 並返回自定義登入頁面。最簡的例子 LoginController 如下所示 :<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    @GetMapping(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    <span class="built_in">String</span> <span class="function"><span class="title">login</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Basic-Authentication"><a href="#Basic-Authentication" class="headerlink" title="Basic Authentication"></a><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/basic.html">Basic Authentication</a></h2><p>  Spring Security 也提供 <a href="https://tools.ietf.org/html/rfc7617">Basic HTTP Authentication</a> 的驗證方式。<br>  在此種模式下 Spring Security 會針對未驗證過的請求，回送 <a href="https://tools.ietf.org/html/rfc7235#section-4.1">WWW-Authenticate</a> header 給客戶端。<br>  <img src="/2022/01/03/backend-spring-security-003-username-password/basicauthenticationentrypoint.png" class="" title="basicauthenticationentrypoint.png"></p>
<ol>
<li>使用者發出一個未驗證過的請求，試圖存取一個受保護的資源 /private</li>
<li>Spring Security 的 FilterSecurityInterceptor 透過丟出 AccessDeniedException 異常來指出該未經驗證的請求是被禁止的。</li>
<li>由於使用者未被驗證，因此 ExceptionTranslationFilter 啟動身份驗證並由 AuthenticationEntryPoint 發送重定向。一般 AuthenticationEntryPoint 是一個 BasicAuthenticationEntryPoint 的實例，它會送出具有 WWW-Authenticate header 的回應。而 RequestCache 通常是一個 NullRequestCache，不像 Login Form 模式會儲存未驗證的請求，等到登入成功後就會自動取出該請求跳轉到使用者想要去的地方，在此模式下並不會記錄未驗證的請求，因為客戶端在驗證過後，會重新發起請求。</li>
</ol>
<p>  當客戶端收到 WWW-Authenticate header 時，它應該試著使用用戶名與密碼進行驗證。<br>  <img src="/2022/01/03/backend-spring-security-003-username-password/basicauthenticationfilter.png" class="" title="basicauthenticationfilter.png"></p>
<ol>
<li>當使用者提交用戶名與密碼時，BasicAuthenticationFilter 會抽取 HttpServletRequest 建立一個具有 Authentication 類型的 UsernamePasswordAuthenticationToken。</li>
<li>接著 UsernamePasswordAuthenticationToken 會被傳入 AuthenticationManager 中做身分驗證。詳細的 AuthenticationManager 動作會取決於如何儲存使用者資訊。</li>
<li>如果驗證失敗則會<ul>
<li>清除 SecurityContextHolder。</li>
<li>調用 RememberMeServices.loginFail，如果 remember me 沒有設定，則此步驟將會沒作用。</li>
<li>調用 AuthenticationEntryPoint 再次發送具有 WWW-Authenticate header 的回應。</li>
</ul>
</li>
<li>如果驗證成功則會<ul>
<li>Authentication 將會被設置到 SecurityContextHolder。</li>
<li>調用 RememberMeServices.loginSuccess，如果有設定的話。</li>
<li>BasicAuthenticationFilter 會調用 FilterChain.doFilter(request,response) 繼續後續的應用程序。</li>
</ul>
</li>
</ol>
<p>  Spring Security 也提供預設的 HTTP Basic Authentication<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">protected <span class="keyword">void</span> <span class="function"><span class="title">configure</span>(<span class="params">HttpSecurity http</span>)</span> &#123;</span><br><span class="line">    http</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        .httpBasic(withDefaults());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Digest-Authentication-不建議使用"><a href="#Digest-Authentication-不建議使用" class="headerlink" title="Digest Authentication (不建議使用)"></a><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/digest.html">Digest Authentication</a><font color="#FF0000"> (不建議使用)</font></h2><p><font color="#FF0000">Warning</font><br>You should not use Digest Authentication in modern applications because it is not considered secure. The most obvious problem is that you must store your passwords in plaintext, encrypted, or an MD5 format. All of these storage formats are considered insecure. Instead, you should store credentials using a one way adaptive password hash (i.e. bCrypt, PBKDF2, SCrypt, etc) which is not supported by Digest Authentication.<br>摘要式身份驗證嘗試解決基本身份驗證的許多弱點，特別是通過確保永遠不會以明文形式通過網絡發送憑據。許多瀏覽器都支持摘要式身份驗證。<br>管理 HTTP 摘要身份驗證的標準由 <a href="https://tools.ietf.org/html/rfc2617">RFC 2617</a> 定義，它更新了 <a href="https://tools.ietf.org/html/rfc2069">RFC 2069</a> 規定的摘要身份驗證標準的早期版本。大多數用戶代理實現 RFC 2617。Spring Security 的 Digest Authentication 支持與qopRFC 2617 規定的“auth”保護質量（）兼容，它還提供與 RFC 2069 的向後兼容性。如果您需要，Digest Authentication 被視為更具吸引力的選項使用未加密的 HTTP（即沒有 TLS/HTTPS）並希望最大限度地提高身份驗證過程的安全性。但是，<font color="#FF0000">每個人都應該使用HTTPS</font>。</p>
<p>摘要式身份驗證的核心是“隨機數”。這是服務器生成的值。Spring Security 的 nonce 採用以下格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64(expirationTime + &quot;:&quot; + md5Hex(expirationTime + &quot;:&quot; + key))</span><br><span class="line">expirationTime:   The date and time when the nonce expires, expressed in milliseconds</span><br><span class="line">key:              A private key to prevent modification of the nonce token</span><br></pre></td></tr></table></figure>
<p>你需要確保你配置不安全的明文密碼存儲使用NoOpPasswordEncoder。以下提供了使用 Java 配置配置摘要式身份驗證的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="function">DigestAuthenticationEntryPoint <span class="title">entryPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	DigestAuthenticationEntryPoint result = <span class="keyword">new</span> DigestAuthenticationEntryPoint();</span><br><span class="line">	result.setRealmName(<span class="string">&quot;My App Relam&quot;</span>);</span><br><span class="line">	result.setKey(<span class="string">&quot;3028472b-da34-4501-bfd8-a355c42bdf92&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DigestAuthenticationFilter <span class="title">digestAuthenticationFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	DigestAuthenticationFilter result = <span class="keyword">new</span> DigestAuthenticationFilter();</span><br><span class="line">	result.setUserDetailsService(userDetailsService);</span><br><span class="line">	result.setAuthenticationEntryPoint(entryPoint());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	http</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">		.exceptionHandling(e -&gt; e.authenticationEntryPoint(authenticationEntryPoint()))</span><br><span class="line">		.addFilterBefore(digestFilter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Official Document</tag>
        <tag>Username/Password Authentication</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 001 SVG 簡介</title>
    <url>/2022/01/16/frontend-d3-001-basic/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>Scalable Vetor Graphics (SVG) 是個向量圖形格式，用於建立二維圖形，也支援互動操作與動畫．SVG 檔案是基於 XML 的文字檔案．SVG 產生的是 DOM 樹．</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>SVG 定義一系列可渲染的圖形元素，像是基本的形狀、文字元素及直線與曲線．這些元素的外觀可以透過外觀屬性加以控制，像是尺寸、位置等．<br>SVG 也定義一些結構化的元素，除了可被組織在一個 SVG 檔案中，也可以把其他元素組合在一起，進行轉換或重用．<br>SVG 的渲染是依據文件的先後順序的，所以在文件前面的元素會被後面的元素壓在底下．<br>SVG 使用圖形座標，原點在圖的左上角．<br>SVG 可以接收使用者事件，然後呼叫對應的事件處理程式．</p>
<h1 id="形狀"><a href="#形狀" class="headerlink" title="形狀"></a>形狀</h1><p>每個形狀都有自己的屬性組可以控制其大小與位置．</p>
<table>
<thead>
<tr>
<th>tag</th>
<th>attribute</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;rect&gt;</td>
<td>x, y</td>
<td>左上角的座標</td>
</tr>
<tr>
<td></td>
<td>width, height</td>
<td>寬高</td>
</tr>
<tr>
<td></td>
<td>rx, ry</td>
<td>邊角半徑</td>
</tr>
<tr>
<td>&lt;circle&gt;</td>
<td>cx, cy</td>
<td>中心座標</td>
</tr>
<tr>
<td></td>
<td>r</td>
<td>半徑</td>
</tr>
<tr>
<td>&lt;ellipse&gt;</td>
<td>cx, cy</td>
<td>中心座標</td>
</tr>
<tr>
<td></td>
<td>rx, ry</td>
<td>水平與垂直半徑</td>
</tr>
<tr>
<td>&lt;line&gt;</td>
<td>x1, y1</td>
<td>開始點</td>
</tr>
<tr>
<td></td>
<td>x2, y2</td>
<td>結束點</td>
</tr>
</tbody></table>
<h1 id="路徑"><a href="#路徑" class="headerlink" title="路徑"></a>路徑</h1><p><path> 元素只有一個屬性 d，這個屬性 d 是由命令與座標結合的字串，中間以空白作為分隔符．所以有命令皆是以一個字母構成，命令如果是大寫字母，則表示之後的座標是絕對座標，如果是小寫字母，則表示之後的是相對座標．<br>一般 path 字串會從一個 M 命令開始，如 :</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;4cm&quot;</span> <span class="attr">height</span>=<span class="string">&quot;4cm&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 400 400&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example triangle01- simple example of a &#x27;path&#x27;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">desc</span>&gt;</span>A path that draws a triangle<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;1&quot;</span> <span class="attr">y</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;398&quot;</span> <span class="attr">height</span>=<span class="string">&quot;398&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 100 100 L 300 100 L 200 300 z&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/16/frontend-d3-001-basic/01.png" class="" title="01.png">
<p><a href="https://www.w3.org/TR/SVG2/paths.html">SVG 參考文件</a></p>
<ul>
<li>&lt;path&gt; 元素 d 屬性<table>
<thead>
<tr>
<th>命令</th>
<th>座標</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>M, m</td>
<td>x y, dx dy</td>
<td>畫筆移動 (不會畫出線)</td>
</tr>
<tr>
<td>L, l</td>
<td>x y, dx dy</td>
<td>畫一條線</td>
</tr>
<tr>
<td>V, v</td>
<td>y, dy</td>
<td>垂直線</td>
</tr>
<tr>
<td>H, h</td>
<td>x, dx</td>
<td>水平線</td>
</tr>
<tr>
<td>Z, z</td>
<td></td>
<td>把目前座標點和第一個座標點連接起來成一個封閉路徑</td>
</tr>
<tr>
<td>Q, q</td>
<td>cx cy x y</td>
<td>二次貝茲曲線</td>
</tr>
<tr>
<td>T, t</td>
<td>多控制點</td>
<td>從多個控制點中繪製二次貝茲曲線</td>
</tr>
<tr>
<td>C, c</td>
<td>cx1 cy1 cx2 cy2 x y</td>
<td>立方貝茲曲線</td>
</tr>
<tr>
<td>S, s</td>
<td>多控制點</td>
<td>從多個控制點中繪製立方貝茲曲線</td>
</tr>
<tr>
<td>A, a</td>
<td>rx ry phi arg sweep x y</td>
<td>繪製橢圓弧線</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 100 100&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10,30</span></span></span><br><span class="line"><span class="string"><span class="tag">           A 20,20 0,0,1 50,30</span></span></span><br><span class="line"><span class="string"><span class="tag">           A 20,20 0,0,1 90,30</span></span></span><br><span class="line"><span class="string"><span class="tag">           Q 90,60 50,90</span></span></span><br><span class="line"><span class="string"><span class="tag">           Q 10,60 10,30 z&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/16/frontend-d3-001-basic/02.png" class="" title="02.png">
<p><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d">path attribute d</a></p>
<h1 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h1><p>可使用 &lt;text&gt; 元素將文字包含在 SVG 圖形中，可以內嵌 &lt;tspan&gt; 元素，它用於在原本字串中定義出子字串</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 240 40&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    text  &#123; <span class="attribute">font</span>: italic <span class="number">12px</span> serif; &#125;</span></span><br><span class="line"><span class="css">    tspan &#123; <span class="attribute">font</span>: bold <span class="number">10px</span> sans-serif; fill: red; &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;30&quot;</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">    You are</span><br><span class="line">    <span class="tag">&lt;<span class="name">tspan</span>&gt;</span>not<span class="tag">&lt;/<span class="name">tspan</span>&gt;</span></span><br><span class="line">    a banana!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/16/frontend-d3-001-basic/03.png" class="" title="03.png">
<p>只有 &lt;text&gt; 中才有 text-anchor 屬性，是控制對齊方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 120 120&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Materialization of anchors --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M60,15 L60,110 M30,40 L90,40 M30,75 L90,75 M30,110 L90,110&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;grey&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Anchors in action --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">&quot;start&quot;</span> <span class="attr">x</span>=<span class="string">&quot;60&quot;</span> <span class="attr">y</span>=<span class="string">&quot;40&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">x</span>=<span class="string">&quot;60&quot;</span> <span class="attr">y</span>=<span class="string">&quot;75&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">&quot;end&quot;</span> <span class="attr">x</span>=<span class="string">&quot;60&quot;</span> <span class="attr">y</span>=<span class="string">&quot;110&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Materialization of anchors --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;60&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;40&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;60&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;60&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;110&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml">&lt;![CDATA[</span></span><br><span class="line"><span class="xml">  text &#123;</span></span><br><span class="line"><span class="xml">    font: bold 36px Verdana, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  ]]&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/16/frontend-d3-001-basic/04.png" class="" title="04.png">

<p>&lt;textPath&gt; 可以沿著指定的 &lt;path&gt; 上顯示文字</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 100 100&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- to hide the path, it is usually wrapped in a &lt;defs&gt; element --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;defs&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;MyPath&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">d</span>=<span class="string">&quot;M10,90 Q90,90 90,45 Q90,10 50,10 Q10,10 10,40 Q10,70 45,70 Q70,70 75,50&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;/defs&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textPath</span> <span class="attr">href</span>=<span class="string">&quot;#MyPath&quot;</span>&gt;</span></span><br><span class="line">      Quick brown fox jumps over the lazy dog.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/16/frontend-d3-001-basic/05.png" class="" title="05.png">

<p>文字字體的顏色是由 fill 屬性所控制，而 stroke 則是在字型的外圍有一個框線顏色，只有在字體較大時才明顯<br>&lt;text&gt; 並不會有文字換行機制，多行文字必須由多個獨立的 &lt;text&gt; 組合而成．</p>
<h1 id="外觀顯示屬性"><a href="#外觀顯示屬性" class="headerlink" title="外觀顯示屬性"></a>外觀顯示屬性</h1><table>
<thead>
<tr>
<th>屬性</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>stroke</td>
<td>元素外框線顏色，預設為 none</td>
</tr>
<tr>
<td>stroke-width</td>
<td>元素外框線寬度，預設為 1</td>
</tr>
<tr>
<td>stroke-opacity</td>
<td>元素外框線的透明度，0 為完全透明，預設為 1</td>
</tr>
<tr>
<td>stroke-dasharray</td>
<td>元素外框線的破折線和差距樣式</td>
</tr>
<tr>
<td>fill</td>
<td>元素內要填充的顏色，預設為黑色</td>
</tr>
<tr>
<td>fill-opacity</td>
<td>元素內不透明度，0 為完全透明，預設為 1</td>
</tr>
<tr>
<td>font-family</td>
<td>字體家族</td>
</tr>
<tr>
<td>font-size</td>
<td>字體大小</td>
</tr>
<tr>
<td>font-style</td>
<td>字體樣式</td>
</tr>
<tr>
<td>font-weight</td>
<td>字體粗細</td>
</tr>
<tr>
<td>cursor</td>
<td>當滑鼠游標放在元素上方時要顯示的游標形狀</td>
</tr>
<tr>
<td>opacity</td>
<td>控制元素的透明度</td>
</tr>
<tr>
<td>display</td>
<td>控制元素顯示與否，不可被繼承，當設為 none 時，接收不到事件</td>
</tr>
<tr>
<td>visibility</td>
<td>控制元素是否可見，可以被繼承，當設為 hidden 或 collapse 時，也會接收到事件</td>
</tr>
</tbody></table>
<h1 id="轉換"><a href="#轉換" class="headerlink" title="轉換"></a>轉換</h1><p>使用 &lt;transform&gt; 進行元素轉換</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>translate(dx, dy)</td>
<td>把目前元素平移</td>
</tr>
<tr>
<td>rotate(phi, x, y)</td>
<td>以座標 x, y 旋轉一個角度 phi</td>
</tr>
<tr>
<td>scale(fx, fy)</td>
<td>縮放</td>
</tr>
<tr>
<td>skewX(phi)</td>
<td>沿著水平推移轉換</td>
</tr>
<tr>
<td>skewY(phi)</td>
<td>沿著垂直推移轉換</td>
</tr>
<tr>
<td>matrix(a, b, c, d, e, f)</td>
<td>座標轉換</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;-40 0 150 100&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">fill</span>=<span class="string">&quot;grey&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">transform</span>=<span class="string">&quot;rotate(-10 50 100)</span></span></span><br><span class="line"><span class="string"><span class="tag">                translate(-36 45.5)</span></span></span><br><span class="line"><span class="string"><span class="tag">                skewX(40)</span></span></span><br><span class="line"><span class="string"><span class="tag">                scale(1 0.5)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;heart&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M 10,30 A 20,20 0,0,1 50,30 A 20,20 0,0,1 90,30 Q 90,60 50,90 Q 10,60 10,30 z&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#heart&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/16/frontend-d3-001-basic/06.png" class="" title="06.png">

<h1 id="結構元素與文件組織"><a href="#結構元素與文件組織" class="headerlink" title="結構元素與文件組織"></a>結構元素與文件組織</h1><p>用來組織元素</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;svg&gt;</td>
<td>一個容器</td>
</tr>
<tr>
<td>&lt;g&gt;</td>
<td>把一些元素分成一個群組，可被當成一個複合元素使用</td>
</tr>
<tr>
<td>&lt;defs&gt;</td>
<td>容器元素，可定義並被重複使用</td>
</tr>
<tr>
<td>&lt;use&gt;</td>
<td>可參考到另一個元素</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#test&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="SVG-和-CSS"><a href="#SVG-和-CSS" class="headerlink" title="SVG 和 CSS"></a>SVG 和 CSS</h1><ol>
<li>可在 <code>&lt;defs&gt;</code> 中使用 <code>&lt;style&gt;</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      circle &#123;fill: <span class="string">&quot;red&quot;</span>&#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>連結到外部的樣式表<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>行內樣式<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">style</span>=<span class="string">&quot;fill: red&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="資源"><a href="#資源" class="headerlink" title="資源"></a>資源</h1><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/SVG/Tutorial">https://developer.mozilla.org/zh-TW/docs/Web/SVG/Tutorial</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/SVG">https://developer.mozilla.org/en-US/docs/Web/SVG</a><br><a href="https://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html">https://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html</a></p>
]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security Notes - 001 基礎概念</title>
    <url>/2022/01/18/backend-spring-security-001-basic/</url>
    <content><![CDATA[<h1 id="Spring-自動配置項目"><a href="#Spring-自動配置項目" class="headerlink" title="Spring 自動配置項目"></a>Spring 自動配置項目</h1><p>當專案一引入底下依賴，Spring Security 就會自動配置一些東西</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>當專案一啟動時，可以在 Console 中看到底下文字，表示 Spring Security 自動幫我們建立一個帳號為 user，密碼為 bbd1ed75-49a8-4284-9bef-297fd4378d31，此密碼為動態產生的，每次啟動都會不同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">2022-01-18 11:36:49.501  INFO 41800 --- [           main] .s.s.UserDetailsServiceAutoConfiguration : </span><br><span class="line"></span><br><span class="line">Using generated security password: bbd1ed75-49a8-4284-9bef-297fd4378d31</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>根據配置，Spring Sercuity 會配置不同的 Filter Chains，底下只是其中一個範例</p>
<img src="/2022/01/18/backend-spring-security-001-basic/01.png" class="" title="01.png"></li>
<li><p>預設所有請求都必須經過認證，且會產生一個頁面 (/login)，讓使用者輸入帳號與密碼</p>
<img src="/2022/01/18/backend-spring-security-001-basic/02.png" class="" title="02.png">
<span id="more"></span></li>
</ol>
<h1 id="Spring-Security-三大設定模塊"><a href="#Spring-Security-三大設定模塊" class="headerlink" title="Spring Security 三大設定模塊"></a>Spring Security 三大設定模塊</h1><h2 id="AuthenticationManagerBuilder"><a href="#AuthenticationManagerBuilder" class="headerlink" title="AuthenticationManagerBuilder"></a>AuthenticationManagerBuilder</h2><p>主要可配置</p>
<ul>
<li>AuthenticationProvider，提供驗證服務<br>先建立一個 CustomAuthenticationProvider 類別實作 AuthenticationProvider 介面<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> </span></span><br><span class="line"><span class="function">        ...</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    @Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
透過繼承 WebSecurityConfigurerAdapter 的類別中設定<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationProvider authProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.authenticationProvider(authProvider);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>UserDetailsService，提供使用者詳情服務<br>先建立一個 CustomUserDetailsService 類別實作 UserDetailsService 介面<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
透過繼承 WebSecurityConfigurerAdapter 的類別中設定<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomUserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="WebSecurity"><a href="#WebSecurity" class="headerlink" title="WebSecurity"></a>WebSecurity</h2><p><font color="#FF0000">此設定一般都不太會去做修改，以免危害到系統安全</font></p>
<ul>
<li><p>HttpFirewall 配置<br>先建立一個 Bean，透過繼承 WebSecurityConfigurerAdapter 的類別中設定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">HttpFirewall <span class="title">httpFirewall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StrictHttpFirewall firewall = <span class="keyword">new</span> StrictHttpFirewall();</span><br><span class="line">        <span class="comment">// 不檢查請求的方法，不限定方法是 DELETE、GET、HEAD、OPTIONS、PATCH、POST 及 PUT 中的一個</span></span><br><span class="line">        firewall.setUnsafeAllowAnyHttpMethod(<span class="keyword">true</span>); </span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> firewall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.httpFirewall(httpFirewall());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意 : 雖然提供修改方式解除一些限制，一般都不建議做任何的改變，以免影響系統安全</font></p>
</li>
<li><p>debug 配置<br>透過繼承 WebSecurityConfigurerAdapter 的類別中設定是否要輸出除錯訊息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.debug(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>全局請求忽略規則配置<br>底下設定會忽略檢查存取 /static/ 下的所有請求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web</span><br><span class="line">            .ignoring()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/static/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>全局 SecurityFilterChain 配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.addSecurityFilterChainBuilder(...);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>權限評估器<br>默認是 DefaultWebInvocationPrivilegeEvaluator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         web.privilegeEvaluator(...);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>表達式處理器<br>默認是 DefaultWebSecurityExpressionHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.expressionHandler(...);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HttpSecurity"><a href="#HttpSecurity" class="headerlink" title="HttpSecurity"></a>HttpSecurity</h2><p>配置各種驗證相關的設定，常用到的配置項</p>
<ul>
<li>csrf()<br>支援 CSRF 支持</li>
<li>authorizeRequests()<br>配置路徑訪問是否需要通過認證與所需要的權限</li>
<li>formLogin()<br>開啟使用表單的身份驗證，如果沒有透過 loginPage(URL) 設定登入頁面的路徑，則預設路徑為 /login </li>
<li>rememberMe()<br>開啟 Remember Me 驗證</li>
<li>httpBasic()<br>配置 basic 登錄</li>
</ul>
<h1 id="WebSecurityConfigurerAdapter"><a href="#WebSecurityConfigurerAdapter" class="headerlink" title="WebSecurityConfigurerAdapter"></a>WebSecurityConfigurerAdapter</h1><p>以上設定都是通過繼承 WebSecurityConfigurerAdapter 後覆寫底下三種方法來做設定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://kknews.cc/zh-tw/code/y5y2x9a.html">https://kknews.cc/zh-tw/code/y5y2x9a.html</a><br><a href="https://www.gushiciku.cn/pl/a4Fv/zh-tw">https://www.gushiciku.cn/pl/a4Fv/zh-tw</a></p>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security Notes - 002 使用者帳密訊息儲存於 Memory (僅限測試時用)</title>
    <url>/2022/01/19/backend-spring-security-002-in-memory/</url>
    <content><![CDATA[<h1 id="實作-UserDetailsService-介面"><a href="#實作-UserDetailsService-介面" class="headerlink" title="實作 UserDetailsService 介面"></a>實作 UserDetailsService 介面</h1><p>src/main/java/tw/com/pluto/service/MyUserDetailsService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        UserDetails userDetails = User.builder()</span><br><span class="line">                .username(<span class="string">&quot;user123&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;&#123;noop&#125;user123&quot;</span>) <span class="comment">// 密碼前面加上&quot;&#123;noop&#125;&quot;，不對密碼進行任何格式的編碼。</span></span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDetails;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="配置-UserDetailsService"><a href="#配置-UserDetailsService" class="headerlink" title="配置 UserDetailsService"></a>配置 UserDetailsService</h1><p>繼承 WebSecurityConfigurerAdapter 並在 configure(AuthenticationManagerBuilder auth) 中設定<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDetailsService myUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(myUserDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="設定密碼加密"><a href="#設定密碼加密" class="headerlink" title="設定密碼加密"></a>設定密碼加密</h1><ol>
<li>加入加密的 bean 並使用加密函數將密碼加密<br>src/main/java/tw/com/pluto/service/MyUserDetailsService.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        UserDetails userDetails = User.builder()</span><br><span class="line">                .username(<span class="string">&quot;user123&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;user123&quot;</span>)) <span class="comment">// 對密碼加密，不儲存明碼</span></span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDetails;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>將加密函數設定給驗證模組，以便在使用者輸入明碼時，將明碼經過加密函數加密後與伺服器上的密碼比對<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.service.MyUserDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyUserDetailsService myUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(myUserDetailsService).passwordEncoder(myUserDetailsService.passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
目前 Spring Security 提供的加密函數，預設是使用 BCryptPasswordEncoder()<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordEncoderFactories</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PasswordEncoderFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PasswordEncoder <span class="title">createDelegatingPasswordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String encodingId = <span class="string">&quot;bcrypt&quot;</span>;</span><br><span class="line">        Map&lt;String, PasswordEncoder&gt; encoders = <span class="keyword">new</span> HashMap();</span><br><span class="line">        encoders.put(encodingId, <span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">        encoders.put(<span class="string">&quot;ldap&quot;</span>, <span class="keyword">new</span> LdapShaPasswordEncoder());</span><br><span class="line">        encoders.put(<span class="string">&quot;MD4&quot;</span>, <span class="keyword">new</span> Md4PasswordEncoder());</span><br><span class="line">        encoders.put(<span class="string">&quot;MD5&quot;</span>, <span class="keyword">new</span> MessageDigestPasswordEncoder(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">        encoders.put(<span class="string">&quot;noop&quot;</span>, NoOpPasswordEncoder.getInstance());</span><br><span class="line">        encoders.put(<span class="string">&quot;pbkdf2&quot;</span>, <span class="keyword">new</span> Pbkdf2PasswordEncoder());</span><br><span class="line">        encoders.put(<span class="string">&quot;scrypt&quot;</span>, <span class="keyword">new</span> SCryptPasswordEncoder());</span><br><span class="line">        encoders.put(<span class="string">&quot;SHA-1&quot;</span>, <span class="keyword">new</span> MessageDigestPasswordEncoder(<span class="string">&quot;SHA-1&quot;</span>));</span><br><span class="line">        encoders.put(<span class="string">&quot;SHA-256&quot;</span>, <span class="keyword">new</span> MessageDigestPasswordEncoder(<span class="string">&quot;SHA-256&quot;</span>));</span><br><span class="line">        encoders.put(<span class="string">&quot;sha256&quot;</span>, <span class="keyword">new</span> StandardPasswordEncoder());</span><br><span class="line">        encoders.put(<span class="string">&quot;argon2&quot;</span>, <span class="keyword">new</span> Argon2PasswordEncoder());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DelegatingPasswordEncoder(encodingId, encoders);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="權限設定"><a href="#權限設定" class="headerlink" title="權限設定"></a>權限設定</h1><p>路徑權限的設定必須繼承 WebSecurityConfigurerAdapter 後，覆寫 configure(HttpSecurity http) 設定<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.service.MyUserDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyUserDetailsService myUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(myUserDetailsService).passwordEncoder(myUserDetailsService.passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            .formLogin().and()</span><br><span class="line">            .authorizeRequests() <span class="comment">//.authorizeHttpRequests() 不要用這個!!!</span></span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/user&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/admin&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的設定是 URL = / 的話，不用登入就可以取得頁面</p>
<img src="/2022/01/19/backend-spring-security-002-in-memory/01.png" class="" title="01.png">
<p>URL = /user 的話，必須具有角色 USER 的身分，因為目前使用者 user123 具有該角色身分，所以可順利取得</p>
<img src="/2022/01/19/backend-spring-security-002-in-memory/02.png" class="" title="02.png">
<p>URL = /user 的話，必須具有角色 USER 的身分，因為目前使用者 user123 不具有該角色身分，所以被禁止</p>
<img src="/2022/01/19/backend-spring-security-002-in-memory/03.png" class="" title="03.png">

<p>Note:</p>
<ol>
<li>如果有設定路徑權限的話就必須要明確設定 formLogin() 才可以</li>
<li>mvcMatchers() 和 antMatcher() 的差異，基本上 mvcMatchers() 會考慮比較完備，詳細請參考 <a href="https://stackoverflow.com/questions/50536292/difference-between-antmatcher-and-mvcmatcher">https://stackoverflow.com/questions/50536292/difference-between-antmatcher-and-mvcmatcher</a></li>
</ol>
<h1 id="階層權限設定"><a href="#階層權限設定" class="headerlink" title="階層權限設定"></a>階層權限設定</h1><p>Spring Security 的角色權限一般是不具有別的角色的權限, 如有兩個角色 ADMIN 和 USER，具有 ADMIN 角色的使用者只有 ADMIN 權限，沒辦法儲存需 USER 權限的資源，但是一般應用的情景會讓 ADMIN 也具有 USER 的權限。</p>
<img src="/2022/01/19/backend-spring-security-002-in-memory/04.png" class="" title="04.png">

<p>新增一個 RoleHierarchy Bean<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.hierarchicalroles.RoleHierarchy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RoleHierarchy <span class="title">hierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">        hierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hierarchy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font color="#FF0000">注意!</font><br><font color="#FF0000">注意!!</font><br><font color="#FF0000">注意!!!</font><br>記得要使用 authorizeRequests() 不要使用 authorizeHttpRequests() 設定權限，否則將會沒有效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            ...</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/spring-security-exercise/tree/in_memory">code</a></p>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>In-Mmeory</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security Notes - 003 使用者帳密訊息儲存於資料庫</title>
    <url>/2022/01/19/backend-spring-security-003-jdbc/</url>
    <content><![CDATA[<h1 id="加入依賴"><a href="#加入依賴" class="headerlink" title="加入依賴"></a>加入依賴</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="在資料庫中建立帳密資訊"><a href="#在資料庫中建立帳密資訊" class="headerlink" title="在資料庫中建立帳密資訊"></a>在資料庫中建立帳密資訊</h1><h2 id="資料來源設定"><a href="#資料來源設定" class="headerlink" title="資料來源設定"></a>資料來源設定</h2><p>src/main/resources/application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9191</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:33060/authDB?createDatabaseIfNotExist=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Ml22099478</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">generate-ddl:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">naming:</span></span><br><span class="line">        <span class="attr">physical-strategy:</span> <span class="string">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">show_sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">  <span class="attr">logging:</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">hibernate:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">trace</span></span><br></pre></td></tr></table></figure>

<h2 id="建立-Model"><a href="#建立-Model" class="headerlink" title="建立 Model"></a>建立 Model</h2><p>我們建立兩個表，一個是 user 表，用來記錄使用者帳號相關訊息，另一個是 role 表，用來建立系統上有哪些角色，最後一個是 role_user 表，用來表示使用者具有那些角色，ER-Model 圖如下所示 :</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/01.png" class="" title="01.png">
<p>src/main/java/tw/com/pluto/model/User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity(name = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column(unique = true, length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonExpired;</span><br><span class="line">    <span class="keyword">private</span> Boolean credentialsNonExpired;</span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonLocked;</span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;users&quot;, cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(Boolean enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountNonExpired</span><span class="params">(Boolean accountNonExpired)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountNonExpired = accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCredentialsNonExpired</span><span class="params">(Boolean credentialsNonExpired)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.credentialsNonExpired = credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountNonLocked</span><span class="params">(Boolean accountNonLocked)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountNonLocked = accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Set&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>src/main/java/tw/com/pluto/model/Role.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity(name = &quot;role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column(unique = true, length = 100)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)</span></span><br><span class="line">    <span class="meta">@JoinTable(</span></span><br><span class="line"><span class="meta">            name = &quot;role_user&quot;,</span></span><br><span class="line"><span class="meta">            joinColumns = &#123;@JoinColumn(name = &quot;role_id&quot;)&#125;,</span></span><br><span class="line"><span class="meta">            inverseJoinColumns = &#123;@JoinColumn(name = &quot;user_id&quot;)&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Set&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建立-user-Seervice-及-Repository"><a href="#建立-user-Seervice-及-Repository" class="headerlink" title="建立 user Seervice 及 Repository"></a>建立 user Seervice 及 Repository</h2><p>我們建立一個 user service 用來對資料表 user 進行 CURD 操作<br>src/main/java/tw/com/pluto/repository/UserRepository.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.model.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 user 服務介面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實作 user 服務<br>src/main/java/tw/com/pluto/service/impl/UserServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.model.User;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.saveAndFlush(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        userRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 Controller，建立一個可以使用 user id 查詢使用者姓名<br>src/main/java/tw/com/pluto/controller/MyController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id).getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>輸入 user 與 role 資訊以供測試</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> role (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;ROLE_ADMIN&#x27;</span>),(<span class="string">&#x27;ROLE_USER&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, username, password, email, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;amy&#x27;</span>, <span class="string">&#x27;&#123;bcrypt&#125;$2a$12$zyChV73xSbrS24A8b59tN.vnMkVx/AxhfBxAa/j.sAQOtXyy6bPtW&#x27;</span>, <span class="string">&#x27;amy@gmail.com&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, username, password, email, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;steven&#x27;</span>, <span class="string">&#x27;&#123;bcrypt&#125;$2a$12$D3ovZHLx7SEhHByV2IBwnOkDYFGLvaX9xcUmhin3rXYmP4qHWbPdq&#x27;</span>, <span class="string">&#x27;steven@gmail.com&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> role_user (role_id, user_id) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>),(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> username <span class="operator">|</span> password  <span class="operator">|</span> role  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">+</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">+</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">+</span></span><br><span class="line"><span class="operator">|</span> amy      <span class="operator">|</span> amy123    <span class="operator">|</span> ADMIN <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> steven   <span class="operator">|</span> steven123 <span class="operator">|</span> <span class="keyword">USER</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------+</span></span><br></pre></td></tr></table></figure>

<p>啟動後輸入網址為 <a href="http://localhost:9191/user/1%EF%BC%8C%E5%B0%87%E6%9C%83%E8%B7%B3%E5%88%B0">http://localhost:9191/user/1，將會跳到</a> login 頁面，輸入使用者為 user 及在控制台打印的密碼進入後可以看到如下結果 :</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/02.png" class="" title="02.png">
<p>這樣基本上由資料庫讀取帳戶資訊已經完成。</p>
<h1 id="由資料庫中取得帳密並提供驗證"><a href="#由資料庫中取得帳密並提供驗證" class="headerlink" title="由資料庫中取得帳密並提供驗證"></a>由資料庫中取得帳密並提供驗證</h1><h2 id="藉由-username-取得帳密資訊"><a href="#藉由-username-取得帳密資訊" class="headerlink" title="藉由 username 取得帳密資訊"></a>藉由 username 取得帳密資訊</h2><p>因為本專案帳密資訊是儲存在資料庫中的 user 表中，所以我們在 Repository 中，就必須提供藉由 username 取得 user 物件的 API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Optional&lt;User&gt; <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="實作-UserDetailsService-介面"><a href="#實作-UserDetailsService-介面" class="headerlink" title="實作 UserDetailsService 介面"></a>實作 UserDetailsService 介面</h2><p>當 Spring Security 由網頁中取得 username 後，會呼叫 UserDetailsService 中的 UserDetails loadUserByUsername(String username) 方法取得資料庫(或其他方式)中的帳密資訊，將其封裝成 UserDetails 物件，並返回給 Spring Security 做比對密碼的動作與授權。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.model.User;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.repository.UserRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        Optional&lt;User&gt; optionalUser = userRepository.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (optionalUser.isPresent()) &#123;</span><br><span class="line">            UserDetails userDetails = <span class="keyword">new</span> MyUserDetails(optionalUser.get());</span><br><span class="line">            <span class="keyword">return</span> userDetails;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;username not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="實作-UserDetails-介面"><a href="#實作-UserDetails-介面" class="headerlink" title="實作 UserDetails 介面"></a>實作 UserDetails 介面</h2><p>因為在 UserDetailsService 的 loadUserByUsername() 必須返回一個 UserDetails 物件，所以我們必須實作 UserDetails 介面以提供相關資訊。<br>src/main/java/tw/com/pluto/security/MyUserDetails.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.model.Role;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetails</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyUserDetails</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; grantedAuthorityList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Role role : user.getRoles()) &#123;</span><br><span class="line">            grantedAuthorityList.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grantedAuthorityList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getAccountNonExpired();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getAccountNonLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getCredentialsNonExpired();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getEnabled();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="設定-UserDetailsService"><a href="#設定-UserDetailsService" class="headerlink" title="設定 UserDetailsService"></a>設定 UserDetailsService</h2><p>設定讓 Spring Security 使用我們提供的 UserDetailsService 物件<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> tw.com.pluto.security.MyUserDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyUserDetailsService myUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(myUserDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="設定權限"><a href="#設定權限" class="headerlink" title="設定權限"></a>設定權限</h1><p>繼承 WebSecurityConfigurerAdapter 並且覆寫 void configure(HttpSecurity http)<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .formLogin().and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用具有 ADMIN 角色的使用者 amy 登入</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/03.png" class="" title="03.png">
<p>因為 /user/1 只有具有 USER 角色才可進入，所以使用者 amy 不可進入</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/04.png" class="" title="04.png">
<p>因為 amy 具有 ADMIN 角色，所以可以進入 /admin</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/05.png" class="" title="05.png">
<p>同理使用者 steven 只具有 USER 角色，不具有 ADMIN 角色，所以只可以存取 /user/1，但不可存取 /admin</p>
<h1 id="階層權限設定"><a href="#階層權限設定" class="headerlink" title="階層權限設定"></a>階層權限設定</h1><p>由上一面文章可知，使用者 amy 雖然具有管理權限的 ADMIN 角色，但是卻不能存取一般權限的 USER 角色，這裡和我們一般對管理權限有差異，最主要是因為 Spring Security 若沒有特別設定階層權限的話，每個角色都是一樣的，我們可以透過底下設定，設定角色 ADMIN 也具有 USER 角色的權限 :<br>新增一個 RoleHierarchy Bean<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.hierarchicalroles.RoleHierarchy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RoleHierarchy <span class="title">hierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">        hierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hierarchy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自定義驗證方式"><a href="#自定義驗證方式" class="headerlink" title="自定義驗證方式"></a>自定義驗證方式</h1><p>先自訂一個密碼加密方法，之後在自訂驗證方法中會使用到<br>src/main/java/tw/com/pluto/security/MyPasswordEncoder.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPasswordEncoder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">getPasswordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.passwordEncoder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要實作 AuthenticationProvider 介面<br>src/main/java/tw/com/pluto/security/MyAuthenticationProvider.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.BadCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyUserDetailsService myUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyPasswordEncoder myPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String username = authentication.getName();</span><br><span class="line">        String password = (String) authentication.getCredentials();</span><br><span class="line">        UserDetails userDetails = myUserDetailsService.loadUserByUsername(username);</span><br><span class="line">        String dd = myPasswordEncoder.getPasswordEncoder().encode(password);</span><br><span class="line">        <span class="keyword">boolean</span> matchPassword = myPasswordEncoder.getPasswordEncoder().matches(password, userDetails.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (!matchPassword) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">&quot;密碼錯誤&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password, userDetails.getAuthorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>設定使用自訂的驗證方法<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyAuthenticationProvider myAuthenticationProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.authenticationProvider(myAuthenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改資料庫中使用者密碼，將前面的<code>&#123;bcrypt&#125;</code>刪掉</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/06.png" class="" title="06.png">

<h1 id="自訂禁止存取處理器"><a href="#自訂禁止存取處理器" class="headerlink" title="自訂禁止存取處理器"></a>自訂禁止存取處理器</h1><p>實作 AccessDeniedHandler 介面<br>src/main/java/tw/com/pluto/security/MyAccessDeny.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDeny</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> GsonBuilder().disableHtmlEscaping().create(); <span class="comment">// Gson 預設會將字串中的一些特殊字元轉碼，如 = 會轉成 \U003D</span></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = ResponseEntity</span><br><span class="line">                .status(HttpStatus.FORBIDDEN.value())</span><br><span class="line">                .contentType(<span class="keyword">new</span> MediaType(MediaType.APPLICATION_JSON, StandardCharsets.UTF_8))</span><br><span class="line">                .body(<span class="string">&quot;無權限訪問&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(gson.toJson(responseEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>設定自訂的禁止存取處理器<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyAccessDeny myAccessDeny;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                ...</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(myAccessDeny);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當使用者不具該資源的存取權限時</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/07.png" class="" title="07.png">

<h1 id="自訂驗證失敗處理器"><a href="#自訂驗證失敗處理器" class="headerlink" title="自訂驗證失敗處理器"></a>自訂驗證失敗處理器</h1><p>會捕獲底下的驗證失敗異常:</p>
<ol>
<li>UsernameNotFoundException : 會在 UserDetailsService 的 loadUserByUsername() 中找不到使用者時拋出</li>
<li>BadCredentialsException : 會在 AuthenticationProvider 的 authenticate() 中驗證失敗時拋出</li>
</ol>
<p>並且可依據異常類型做不同的處理方式，我在這邊依據拋出異常，去回應不同的狀態碼 :<br>src/main/java/tw/com/pluto/security/MyAuthenticationFailureHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.BadCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> GsonBuilder().disableHtmlEscaping().create(); <span class="comment">// Gson 預設會將字串中的一些特殊字元轉碼，如 = 會轉成 \U003D</span></span><br><span class="line">        <span class="keyword">int</span> statue = HttpStatus.BAD_REQUEST.value();</span><br><span class="line">        MediaType contentType = <span class="keyword">new</span> MediaType(MediaType.APPLICATION_JSON, StandardCharsets.UTF_8);</span><br><span class="line">        String body = exception.getMessage();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若有需要可以依據異常，產生不同的回應</span></span><br><span class="line">        <span class="comment">//  - UsernameNotFoundException : 會在 UserDetailsService 的 loadUserByUsername() 中找不到使用者時拋出</span></span><br><span class="line">        <span class="comment">//  - BadCredentialsException : 會在 AuthenticationProvider 的 authenticate() 中驗證失敗時拋出</span></span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> UsernameNotFoundException) &#123;</span><br><span class="line"><span class="comment">//            statue = HttpStatus.BAD_REQUEST.value();</span></span><br><span class="line">            statue = <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line"> <span class="comment">//           statue = HttpStatus.BAD_REQUEST.value();</span></span><br><span class="line">            statue = <span class="number">456</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = ResponseEntity</span><br><span class="line">                .status(statue)</span><br><span class="line">                .contentType(contentType)</span><br><span class="line">                .body(body);</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(gson.toJson(responseEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>設定自訂驗證失敗處理器<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyAuthenticationFailureHandler myAuthenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .formLogin()</span><br><span class="line">                .failureHandler(myAuthenticationFailureHandler).and()</span><br><span class="line">                ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>輸入一個不存在的使用者名稱，回應狀態碼為 123</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/08.png" class="" title="08.png">
<p>輸入錯誤的密碼，回應狀態碼為 456</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/09.png" class="" title="09.png">

<h1 id="自訂驗證成功處理器"><a href="#自訂驗證成功處理器" class="headerlink" title="自訂驗證成功處理器"></a>自訂驗證成功處理器</h1><p>實作 AuthenticationSuccessHandler 介面<br>src/main/java/tw/com/pluto/security/MyAuthenticationSuccessHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> GsonBuilder().disableHtmlEscaping().create(); <span class="comment">// Gson 預設會將字串中的一些特殊字元轉碼，如 = 會轉成 \U003D</span></span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = ResponseEntity</span><br><span class="line">                .status(HttpStatus.OK.value())</span><br><span class="line">                .contentType(<span class="keyword">new</span> MediaType(MediaType.APPLICATION_JSON, StandardCharsets.UTF_8))</span><br><span class="line">                .body(<span class="string">&quot;登入成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(gson.toJson(responseEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>設定自訂驗證成功處理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyAuthenticationSuccessHandler myAuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .formLogin()</span><br><span class="line">                .successHandler(myAuthenticationSuccessHandler)</span><br><span class="line">                ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RoleHierarchy <span class="title">hierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">        hierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hierarchy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>驗證成功時</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/10.png" class="" title="10.png">

<h1 id="登出成功處理器"><a href="#登出成功處理器" class="headerlink" title="登出成功處理器"></a>登出成功處理器</h1><p>實作 LogoutSuccessHandler 介面<br>src/main/java/tw/com/pluto/security/MyLogoutSuccessHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title">LogoutSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> GsonBuilder().disableHtmlEscaping().create(); <span class="comment">// Gson 預設會將字串中的一些特殊字元轉碼，如 = 會轉成 \U003D</span></span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = ResponseEntity</span><br><span class="line">                .status(HttpStatus.OK.value())</span><br><span class="line">                .contentType(<span class="keyword">new</span> MediaType(MediaType.APPLICATION_JSON, StandardCharsets.UTF_8))</span><br><span class="line">                .body(<span class="string">&quot;登出成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(gson.toJson(responseEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>設定自訂登出成功處理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyLogoutSuccessHandler myLogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                ...</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutSuccessHandler(myLogoutSuccessHandler)</span><br><span class="line">                .deleteCookies(<span class="string">&quot;JSESSIONID&quot;</span>).and()</span><br><span class="line">                ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>登出成功並清除 Cookies</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/11.png" class="" title="11.png">

<h1 id="自訂驗證進入點"><a href="#自訂驗證進入點" class="headerlink" title="自訂驗證進入點"></a>自訂驗證進入點</h1><p>預設的 AuthenticationEntryPoint 會返回一個預設的登入頁面讓使用者輸入使用者名稱與密碼，如下所示 :</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/12.png" class="" title="12.png">
<p>實作 AuthenticationEntryPoint 介面<br>src/main/java/tw/com/pluto/security/MyAuthenticationEntryPoint.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tw.com.pluto.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> GsonBuilder().disableHtmlEscaping().create();</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = ResponseEntity</span><br><span class="line">                .status(HttpStatus.UNAUTHORIZED.value())</span><br><span class="line">                .contentType(<span class="keyword">new</span> MediaType(MediaType.APPLICATION_JSON, StandardCharsets.UTF_8))</span><br><span class="line">                .body(<span class="string">&quot;未驗證&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(gson.toJson(responseEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>設定自訂驗證進入點<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyAuthenticationEntryPoint myAuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                ...</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(myAccessDeny)</span><br><span class="line">                .authenticationEntryPoint(myAuthenticationEntryPoint);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此時沒有登入過就去存取資源，就不會跳轉到登入頁面，而是顯示錯誤訊息如下 :</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/13.png" class="" title="13.png">
<p>若使用 Postman 進行登入，會出現底下錯誤訊息，這是因為 Spring Security 的 CSRF 保護造成的</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/14.png" class="" title="14.png">

<p>所以我們可以將將 CSRF 保護關閉，以測試是否真的是 CSRF 保護機制所造成的<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/19/backend-spring-security-003-jdbc/15.png" class="" title="15.png">
<p>確認問題後，在生產環境中還是需要將 CSRF 機制打開，我們可以忽略檢查登入路徑，並且將 XSRF-TOKEN 儲存在 Cookies 中<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                ...</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().ignoringAntMatchers(<span class="string">&quot;/login&quot;</span>).csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用者登入</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/16.png" class="" title="16.png">
<p>返回登入成功</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/17.png" class="" title="17.png">
<p>並且返回 XSRF-TOKEN</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/18.png" class="" title="18.png">
<p>不需要特別設定，只要登入成功並傳回 XSRF-TOKEN 就可以取得資源</p>
<img src="/2022/01/19/backend-spring-security-003-jdbc/19.png" class="" title="19.png">

<p>若是前後端分離的架構，就必須允許跨域<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        .and().cors();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/pluto123/spring-security-exercise/tree/jdbc">code</a></p>
<h1 id="文章參考"><a href="#文章參考" class="headerlink" title="文章參考 :"></a>文章參考 :</h1><p><a href="https://blog.techbridge.cc/2017/02/25/csrf-introduction/">https://blog.techbridge.cc/2017/02/25/csrf-introduction/</a><br><a href="https://matthung0807.blogspot.com/2019/10/spring-security-get-current-csrftoken.html">https://matthung0807.blogspot.com/2019/10/spring-security-get-current-csrftoken.html</a><br><a href="http://www.javaboy.org/2020/0519/springsecurity-csrf.html">http://www.javaboy.org/2020/0519/springsecurity-csrf.html</a></p>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>Customize</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 003 D3 安裝和結合 React 的小範例</title>
    <url>/2022/01/23/frontend-d3-002-installing/</url>
    <content><![CDATA[<h1 id="安裝-D3"><a href="#安裝-D3" class="headerlink" title="安裝 D3"></a>安裝 D3</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install d3 --save</span></span><br></pre></td></tr></table></figure>

<h1 id="引入並建立第一個練習"><a href="#引入並建立第一個練習" class="headerlink" title="引入並建立第一個練習"></a>引入並建立第一個練習</h1><p>在 React 的生命週期 componentDidMount 時，建立 D3</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    d3.select(<span class="string">&#x27;.App&#x27;</span>)</span><br><span class="line">      .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">      .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">      .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">500</span>)</span><br><span class="line">      .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">      d3.select(test)</span><br><span class="line">      .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">      .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">      .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">500</span>)</span><br><span class="line">      .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>頁面呈現結果</p>
<img src="/2022/01/23/frontend-d3-002-installing/01.png" class="" title="01.png">

<h1 id="讀取文件進行繪製"><a href="#讀取文件進行繪製" class="headerlink" title="讀取文件進行繪製"></a>讀取文件進行繪製</h1><p>首先將資料檔放在 public/data/examples-simple.tsv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x	y</span><br><span class="line">100	50</span><br><span class="line">200	100</span><br><span class="line">300	150</span><br><span class="line">400	200</span><br><span class="line">500	250</span><br></pre></td></tr></table></figure>
<p>接著在 App.js 中讀取檔案並繪製<br>src/App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.App&#x27;</span>)</span><br><span class="line">            .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">600</span>)</span><br><span class="line">            .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            d3.tsv(<span class="string">&quot;data/examples-simple.tsv&quot;</span>) <span class="comment">// 讀取資料</span></span><br><span class="line">            .then( <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            d3.select(<span class="string">&quot;svg&quot;</span>) <span class="comment">// 傳回第一個匹配的點</span></span><br><span class="line">                .selectAll(<span class="string">&quot;circle&quot;</span>) <span class="comment">// 傳回所有匹配的點，在此時因為沒有找不到任何一個，所以將會建立一個空的 collection</span></span><br><span class="line">                .data(data) <span class="comment">// 將 circle 元素與資料集一對一地結合在一起</span></span><br><span class="line">                .enter() <span class="comment">// 但是並沒有任何的 circle 元素可以對應資料集，所以使用此方法讓 D3 先幫我們佔著</span></span><br><span class="line">                .append(<span class="string">&quot;circle&quot;</span>) <span class="comment">// 針對只有資料沒有元素對應的點，使用 circle 元素幫我們填充</span></span><br><span class="line">                .attr(<span class="string">&quot;r&quot;</span>, <span class="number">5</span>) <span class="comment">// 設定半徑固定為 5</span></span><br><span class="line">                .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span>) <span class="comment">// 設定填充的顏色為 red</span></span><br><span class="line">                .attr(<span class="string">&quot;cx&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;<span class="keyword">return</span> d[<span class="string">&quot;x&quot;</span>]&#125;) <span class="comment">// 取得 data 的 x 欄位來設定 cx</span></span><br><span class="line">                .attr(<span class="string">&quot;cy&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;<span class="keyword">return</span> d[<span class="string">&quot;y&quot;</span>]&#125;); <span class="comment">// 取得 data 的 y 欄位來設定 cy</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>頁面呈現結果</p>
<img src="/2022/01/23/frontend-d3-002-installing/02.png" class="" title="02.png">

<h1 id="封裝組件"><a href="#封裝組件" class="headerlink" title="封裝組件"></a>封裝組件</h1><p>將原本寫在 App 組件中的 D3 程式碼，封裝到另一個組件 Demo1 中<br>src/components/Demo1/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo1&#x27;</span>)</span><br><span class="line">          .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">600</span>)</span><br><span class="line">          .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">          d3.tsv(<span class="string">&quot;examples-simple.tsv&quot;</span>) <span class="comment">// 讀取資料</span></span><br><span class="line">            .then( <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            d3.select(<span class="string">&quot;svg&quot;</span>) <span class="comment">// 傳回第一個匹配的點</span></span><br><span class="line">              .selectAll(<span class="string">&quot;circle&quot;</span>) <span class="comment">// 傳回所有匹配的點，在此時因為沒有找不到任何一個，所以將會建立一個空的 collection</span></span><br><span class="line">              .data(data) <span class="comment">// 將 circle 元素與資料集一對一地結合在一起</span></span><br><span class="line">              .enter() <span class="comment">// 但是並沒有任何的 circle 元素可以對應資料集，所以使用此方法讓 D3 先幫我們佔著</span></span><br><span class="line">              .append(<span class="string">&quot;circle&quot;</span>) <span class="comment">// 針對只有資料沒有元素對應的點，使用 circle 元素幫我們填充</span></span><br><span class="line">              .attr(<span class="string">&quot;r&quot;</span>, <span class="number">5</span>) <span class="comment">// 設定半徑固定為 5</span></span><br><span class="line">              .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span>) <span class="comment">// 設定填充的顏色為 red</span></span><br><span class="line">              .attr(<span class="string">&quot;cx&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;<span class="keyword">return</span> d[<span class="string">&quot;x&quot;</span>]&#125;) <span class="comment">// 取得 data 的 x 欄位來設定 cx</span></span><br><span class="line">              .attr(<span class="string">&quot;cy&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;<span class="keyword">return</span> d[<span class="string">&quot;y&quot;</span>]&#125;); <span class="comment">// 取得 data 的 y 欄位來設定 cy</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo1;</span><br></pre></td></tr></table></figure>
<p>修改 App.js，引入組件 Demo1<br>src/App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Demo1 <span class="keyword">from</span> <span class="string">&#x27;./components/Demo1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Demo1</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>頁面呈現結果</p>
<img src="/2022/01/23/frontend-d3-002-installing/03.png" class="" title="03.png">

<h1 id="使用兩個資料集"><a href="#使用兩個資料集" class="headerlink" title="使用兩個資料集"></a>使用兩個資料集</h1><p>使用 public/data/examples-multiple.tsv 當資料集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x	y1	    y2</span><br><span class="line">1.0	0.001	0.63</span><br><span class="line">3.0	0.003	0.84</span><br><span class="line">4.0	0.024	0.56</span><br><span class="line">4.5	0.054	0.22</span><br><span class="line">4.6	0.062	0.15</span><br><span class="line">5.0	0.100	0.08</span><br><span class="line">6.0	0.176	0.20</span><br><span class="line">8.0	0.198	0.71</span><br><span class="line">9.0	0.199	0.65</span><br></pre></td></tr></table></figure>
<p>建立 Ｄemo2 組件<br>src/components/Demo2/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo2&#x27;</span>)</span><br><span class="line">          .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">600</span>)</span><br><span class="line">          .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">          d3.tsv(<span class="string">&quot;data/examples-multiple.tsv&quot;</span>) <span class="comment">// 讀取資料</span></span><br><span class="line">            .then( <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> pxX = <span class="number">600</span>, pxY = <span class="number">300</span>; <span class="comment">// 設定 SVG 區域大小</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用線性縮放，將 domain 映射到 range 中，</span></span><br><span class="line">            <span class="comment">// 也就說是將資料中的值，依據 SVG 尺寸來做線性縮放</span></span><br><span class="line">            <span class="keyword">var</span> scX = d3.scaleLinear()</span><br><span class="line">              .domain(d3.extent(data, <span class="function"><span class="params">d</span> =&gt;</span> d[<span class="string">&quot;x&quot;</span>])) <span class="comment">// extent() : 傳回 data 的 x 欄位中的最小值及最大值，以 [min, max] 形式傳回</span></span><br><span class="line">              .range([<span class="number">0</span>, pxX]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> scY1 = d3.scaleLinear()</span><br><span class="line">              .domain(d3.extent(data, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="string">&quot;y1&quot;</span>]))</span><br><span class="line">              .range([pxY, <span class="number">0</span>]) <span class="comment">// 因為座標原點在左上角，越往下越大，所以我們故意反轉來做修正</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> scY2 = d3.scaleLinear()</span><br><span class="line">              .domain(d3.extent(data, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="string">&quot;y2&quot;</span>]))</span><br><span class="line">              .range([pxY, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            d3.select(<span class="string">&quot;svg&quot;</span>) <span class="comment">// 傳回第一個匹配的點</span></span><br><span class="line">              .append(<span class="string">&quot;g&quot;</span>) <span class="comment">// 建立一個邏輯分組後，才把圖形元素加入其中</span></span><br><span class="line">              .attr(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;ds1&quot;</span>) <span class="comment">// 設定唯一標識</span></span><br><span class="line">              .selectAll(<span class="string">&quot;circle&quot;</span>) <span class="comment">// 在分組(ds1)中的子元素建立空的 circle collection</span></span><br><span class="line">              .data(data).enter().append(<span class="string">&quot;circle&quot;</span>) <span class="comment">// 將 data 套用到 circle 元素</span></span><br><span class="line">              .attr(<span class="string">&quot;r&quot;</span>, <span class="number">5</span>) <span class="comment">// 設定半徑固定為 5</span></span><br><span class="line">              .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;green&quot;</span>) <span class="comment">// 設定 &lt;g&gt; 元素的填充顏色為 green，也會一併套用到子元素中</span></span><br><span class="line">              .attr(<span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scX(d[<span class="string">&quot;x&quot;</span>])) <span class="comment">// 此處是取得縮放過後的 x 值</span></span><br><span class="line">              .attr(<span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scY1(d[<span class="string">&quot;y1&quot;</span>])); <span class="comment">// 此處是取得縮放過後的 y1 值</span></span><br><span class="line"></span><br><span class="line">            d3.select(<span class="string">&quot;svg&quot;</span>)</span><br><span class="line">              .append(<span class="string">&quot;g&quot;</span>)</span><br><span class="line">              .attr(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;ds2&quot;</span>)</span><br><span class="line">              .selectAll(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">              .data(data).enter().append(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">              .attr(<span class="string">&quot;r&quot;</span>, <span class="number">5</span>)</span><br><span class="line">              .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">              .attr(<span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scX(d[<span class="string">&quot;x&quot;</span>]))</span><br><span class="line">              .attr(<span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scY2(d[<span class="string">&quot;y2&quot;</span>]));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> lineMaker = d3.line() <span class="comment">// 使用 line() 幫助我們產生 &lt;ptah&gt; 中的 d 屬性</span></span><br><span class="line">                .x( <span class="function"><span class="params">d</span> =&gt;</span> scX( d[<span class="string">&quot;x&quot;</span>] ) )</span><br><span class="line">                .y( <span class="function"><span class="params">d</span> =&gt;</span> scY1( d[<span class="string">&quot;y1&quot;</span>] ) );</span><br><span class="line">            </span><br><span class="line">            d3.select( <span class="string">&quot;#ds1&quot;</span> )  <span class="comment">// 選到 &lt;g id=&quot;ds1&quot;&gt;</span></span><br><span class="line">                .append( <span class="string">&quot;path&quot;</span> )  <span class="comment">// 添加一段路徑</span></span><br><span class="line">                .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> )  <span class="comment">// 實線</span></span><br><span class="line">                .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> )  <span class="comment">// 顏色為 red</span></span><br><span class="line">                .attr( <span class="string">&quot;d&quot;</span>, lineMaker(data) );</span><br><span class="line">           </span><br><span class="line">            lineMaker.y( <span class="function"><span class="params">d</span> =&gt;</span> scY2( d[<span class="string">&quot;y2&quot;</span>] ) );</span><br><span class="line"></span><br><span class="line">            d3.select( <span class="string">&quot;#ds2&quot;</span> )</span><br><span class="line">                .append( <span class="string">&quot;path&quot;</span> )</span><br><span class="line">                .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> )</span><br><span class="line">                .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;cyan&quot;</span> )</span><br><span class="line">                .attr( <span class="string">&quot;d&quot;</span>, lineMaker(data) );</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo2;</span><br></pre></td></tr></table></figure>
<p>頁面呈現結果</p>
<img src="/2022/01/23/frontend-d3-002-installing/04.png" class="" title="04.png">

<h1 id="建立可重用元件並且添加座標軸"><a href="#建立可重用元件並且添加座標軸" class="headerlink" title="建立可重用元件並且添加座標軸"></a>建立可重用元件並且添加座標軸</h1><p>將一些重複的程式碼合併成一個 function<br>src/components/Demo3/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.tsv(<span class="string">&quot;data/examples-multiple.tsv&quot;</span>)</span><br><span class="line">        .then( <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> );</span><br><span class="line">            <span class="keyword">var</span> pxX = svg.attr( <span class="string">&quot;width&quot;</span> );</span><br><span class="line">            <span class="keyword">var</span> pxY = svg.attr( <span class="string">&quot;height&quot;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> makeScale = <span class="function"><span class="keyword">function</span>(<span class="params"> accessor, range</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d3.scaleLinear()</span><br><span class="line">                    .domain(d3.extent(data, accessor))</span><br><span class="line">                    .range( range ).nice();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> scX = makeScale( <span class="function"><span class="params">d</span> =&gt;</span> d[<span class="string">&quot;x&quot;</span>], [<span class="number">0</span>, pxX]);</span><br><span class="line">            <span class="keyword">var</span> scY1 = makeScale( <span class="function"><span class="params">d</span> =&gt;</span> d[<span class="string">&quot;y1&quot;</span>], [pxY, <span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> scY2 = makeScale( <span class="function"><span class="params">d</span> =&gt;</span> d[<span class="string">&quot;y2&quot;</span>], [pxY, <span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> drawData = <span class="function"><span class="keyword">function</span>(<span class="params">g, accessor, curve</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// draw circles</span></span><br><span class="line">                g.selectAll(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">                    .data(data).enter().append(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">                    .attr(<span class="string">&quot;r&quot;</span>, <span class="number">5</span>)</span><br><span class="line">                    .attr(<span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scX(d[<span class="string">&quot;x&quot;</span>]))</span><br><span class="line">                    .attr(<span class="string">&quot;cy&quot;</span>, accessor);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// draw lines</span></span><br><span class="line">                <span class="keyword">var</span> lineMaker = d3.line().curve( curve )</span><br><span class="line">                    .x( <span class="function"><span class="params">d</span> =&gt;</span> scX( d[<span class="string">&quot;x&quot;</span>] ) )</span><br><span class="line">                    .y( accessor );</span><br><span class="line">                g.append( <span class="string">&quot;path&quot;</span> )</span><br><span class="line">                    .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> )</span><br><span class="line">                    .attr( <span class="string">&quot;d&quot;</span>, lineMaker(data) );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> g1 = svg.append(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> g2 = svg.append(<span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line">            drawData( g1, <span class="function"><span class="params">d</span> =&gt;</span> scY1( d[<span class="string">&quot;y1&quot;</span>] ), d3.curveStep);</span><br><span class="line">            drawData( g2, <span class="function"><span class="params">d</span> =&gt;</span> scY2( d[<span class="string">&quot;y2&quot;</span>] ), d3.curveNatural);</span><br><span class="line"></span><br><span class="line">            g1.selectAll( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">            g1.selectAll( <span class="string">&quot;path&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;cyan&quot;</span>);</span><br><span class="line"></span><br><span class="line">            g2.selectAll( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">            g2.selectAll( <span class="string">&quot;path&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> axMkr = d3.axisRight( scY1 ); <span class="comment">// 所有元素都是由左上角的原點畫起，所以是這會是在圖形的左邊畫出軸，在軸的右邊標出刻度</span></span><br><span class="line">            axMkr( svg.append(<span class="string">&quot;g&quot;</span>) ); <span class="comment">// 將軸元素附加到一個容器元素中，通常是使用 &lt;g&gt;</span></span><br><span class="line"></span><br><span class="line">            axMkr = d3.axisLeft( scY2 );</span><br><span class="line">            svg.append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">                .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(&quot;</span> + pxX + <span class="string">&quot;,0)&quot;</span> ) <span class="comment">// 因為繪圖是由左上角的原點畫起，所以我們要將元素都往右邊移</span></span><br><span class="line">                .call( axMkr ); <span class="comment">// call() 會呼叫傳入的參數 axMkr，此參數為一個 function 就會被呼叫用來會軸</span></span><br><span class="line"></span><br><span class="line">            svg.append( <span class="string">&quot;g&quot;</span> ).call( d3.axisTop( scX ) )</span><br><span class="line">                .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(0,&quot;</span>+pxY+<span class="string">&quot;)&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo3&#x27;</span>)</span><br><span class="line">          .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">600</span>)</span><br><span class="line">          .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">          makeDemo3()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo3;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<img src="/2022/01/23/frontend-d3-002-installing/05.png" class="" title="05.png">

<h1 id="互動"><a href="#互動" class="headerlink" title="互動"></a>互動</h1><ol>
<li>D3 不只可以產生 SVG，也可以操作 DOM </li>
<li>可依據事件加以回應<br>src/components/Demo4/index.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> vs = [<span class="string">&quot;From East&quot;</span>, <span class="string">&quot;to West&quot;</span>, <span class="string">&quot;at Home&quot;</span>, <span class="string">&quot;is Best&quot;</span>]</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo4&#x27;</span>)</span><br><span class="line">          .append(<span class="string">&#x27;ul&#x27;</span>).selectAll(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">          .data(vs).enter()</span><br><span class="line">          .append(<span class="string">&quot;li&quot;</span>).text(<span class="function"><span class="params">d</span>=&gt;</span>d)</span><br><span class="line">          .on( <span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="built_in">this</span>.toggleState = !<span class="built_in">this</span>.toggleState;</span><br><span class="line">              d3.select(<span class="built_in">this</span>)  <span class="comment">// 選擇被點選的元素</span></span><br><span class="line">              .transition().duration(<span class="number">1000</span>)</span><br><span class="line">              .style(<span class="string">&quot;color&quot;</span>, <span class="built_in">this</span>.toggleState?<span class="string">&quot;red&quot;</span>:<span class="string">&quot;black&quot;</span>)</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo4;</span><br></pre></td></tr></table></figure>
點選第一個項目的結果顯示<img src="/2022/01/23/frontend-d3-002-installing/06.png" class="" title="06.png"></li>
</ol>
<h1 id="參考與出處"><a href="#參考與出處" class="headerlink" title="參考與出處"></a>參考與出處</h1><p><a href="https://github.com/janert/d3-for-the-impatient">https://github.com/janert/d3-for-the-impatient</a></p>
]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>Installing</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security Notes - 004 Remember Me</title>
    <url>/2022/01/27/backend-spring-security-004-remember-me/</url>
    <content><![CDATA[<h1 id="開啟-Remember-Me"><a href="#開啟-Remember-Me" class="headerlink" title="開啟 Remember Me"></a>開啟 Remember Me</h1><p>在設定中打開 Remember Me 功能，並且先使用預設的驗證進入點<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                ...</span><br><span class="line">                <span class="comment">//.authenticationEntryPoint(myAuthenticationEntryPoint).and()</span></span><br><span class="line">                ...</span><br><span class="line">                .rememberMe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到預設的登入頁面除了可輸入使用者名稱和密碼之外，多了一個 Remember Me 的 Check Box 可勾選</p>
<img src="/2022/01/27/backend-spring-security-004-remember-me/01.png" class="" title="01.png">
<p>此時如果輸入使用者名稱和密碼後，並勾選 Remember Me，則會發生底下錯誤</p>
<img src="/2022/01/27/backend-spring-security-004-remember-me/02.png" class="" title="02.png">
<p>這是因為登入成功後，因為安全機制會將密碼清除，所以 Remember Me 服務將會使用 UserDetailsService 重新取得密碼，所以我們也必須要設定使用哪個 UserDetailsService<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyUserDetailsService myUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                </span><br><span class="line">                .rememberMe()</span><br><span class="line">                .userDetailsService(myUserDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次輸入使用者名稱和密碼後，並勾選 Remember Me，則會可以看到底下的資訊，知道除了傳遞參數 username 及 password 外，還多了一個參數 remember-me</p>
<img src="/2022/01/27/backend-spring-security-004-remember-me/03.png" class="" title="03.png">
<p>而且後端也會傳回一個新 cookie 名為 remember-me</p>
<img src="/2022/01/27/backend-spring-security-004-remember-me/04.png" class="" title="04.png">
<p>當我們另開一個瀏覽器頁面並連線到後端時，瀏覽器會帶上剛剛的 cookie (remember-me)，所以後端就會讓此請求通行</p>
<img src="/2022/01/27/backend-spring-security-004-remember-me/05.png" class="" title="05.png">
<p>但是當我們後端重新啟動後，再次連上後端，可以發現後端已經不認得此 cookie (remember-me) 了，這是因為我們並沒有一個持久化儲存機制。</p>
<img src="/2022/01/27/backend-spring-security-004-remember-me/06.png" class="" title="06.png">

<h1 id="使用-MySQL-儲存-remember-me"><a href="#使用-MySQL-儲存-remember-me" class="headerlink" title="使用 MySQL 儲存 remember-me"></a>使用 MySQL 儲存 remember-me</h1><p>使用 Spring Security 預設的 JdbcTokenRepositoryImpl 類別，我們需要先建立一個 beean 並請設置 DataSource，設定使用 jdbcTokenRepository 儲存 remember-me 資訊<br>src/main/java/tw/com/pluto/config/MyWebSecurityConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JdbcTokenRepositoryImpl <span class="title">jdbcTokenRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                ...</span><br><span class="line">                .rememberMe()</span><br><span class="line">                .userDetailsService(myUserDetailsService)</span><br><span class="line">                .tokenRepository(jdbcTokenRepository());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據底下 JdbcTokenRepositoryImpl 的原始碼可以知道需要一個資料表名為 persistent_logins，有四個欄位 username、series、token 及 last_used</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTokenRepositoryImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">PersistentTokenRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_TABLE_SQL = <span class="string">&quot;create table persistent_logins (username varchar(64) not null, series varchar(64) primary key, token varchar(64) not null, last_used timestamp not null)&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEF_TOKEN_BY_SERIES_SQL = <span class="string">&quot;select username,series,token,last_used from persistent_logins where series = ?&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEF_INSERT_TOKEN_SQL = <span class="string">&quot;insert into persistent_logins (username, series, token, last_used) values(?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEF_UPDATE_TOKEN_SQL = <span class="string">&quot;update persistent_logins set token = ?, last_used = ? where series = ?&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEF_REMOVE_USER_TOKENS_SQL = <span class="string">&quot;delete from persistent_logins where username = ?&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String tokensBySeriesSql = <span class="string">&quot;select username,series,token,last_used from persistent_logins where series = ?&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String insertTokenSql = <span class="string">&quot;insert into persistent_logins (username, series, token, last_used) values(?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String updateTokenSql = <span class="string">&quot;update persistent_logins set token = ?, last_used = ? where series = ?&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String removeUserTokensSql = <span class="string">&quot;delete from persistent_logins where username = ?&quot;</span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>所以我們建立一個 SQL Script<br>src/main/resources/remember_me.txt</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `persistent_logins` (</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `series` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `token` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `last_used` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`series`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>
<p>在資料庫中建立該資料表</p>
<img src="/2022/01/27/backend-spring-security-004-remember-me/07.png" class="" title="07.png">
<p>此時我們重新啟動伺服器進行登入，可以發現資料庫中將會有一筆紀錄</p>
<img src="/2022/01/27/backend-spring-security-004-remember-me/08.png" class="" title="08.png">
<p>此時就算後端重新啟動也不會需要再重新登入</p>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>RememberMe</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 003 選擇元素與繫結資料</title>
    <url>/2022/01/27/frontend-d3-003-selection-and-binding/</url>
    <content><![CDATA[<h1 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h1><p>可利用 d3 物件上的 select(selector) 取得第一個匹配 selector 的元素；利用 selectAll(selector) 取得所有匹配 selector 的元素．<br>selector 是為 CSS 選擇器字串，底下是幾個不同類型的選擇器 :</p>
<ol>
<li>type<br>由標籤名稱所組成，像是 p 或 svg，也有一個萬用選擇器 *，常用來選則某一選擇器的所有後代，如 : div *</li>
<li>#id<br>使用元素的 id 值來選取元素</li>
<li>.calss<br>使用元素的 class 值來選取元素</li>
<li>:pseudo-class<br>以元素的狀態或位置來選取，如 : :hover、:visited、:first-child … 等</li>
<li>[attribute]<br>根據擁有的屬性或屬性值來選取，如 : [width] 表示選取具有屬性 width 的元素；[width=600] 表示選取具有屬性 width 且值為 600 的元素．<br>雖然以上選擇器也可以組合，讓我們可以有更豐富的方式選擇元素，不過對 D3 比較重要的是 type 和 ID 選擇器的組合，而 :pseudo-class 選擇器對 D3 也是蠻常用到的，而組合式選擇器對 D3 而言，比較會使用 d3.selectAll(“p”).selectAll(“b”) 的方式取代．<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Selectors">CSS Selectors</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/Pseudo-classes">Pseudo classes</a></li>
</ol>
<h1 id="繫結資料"><a href="#繫結資料" class="headerlink" title="繫結資料"></a>繫結資料</h1><p>data() 接受任意資料的陣列或物件，然後嘗試在目前的選取到的元素集合上，建立陣列項目與元素間一對一關係．<br>除非有提供 key，否則陣列與元素集合是依據順序對應，陣列大小與元素個數並非一定要相等．<br>如果資料已經繫結到元素了，則會被儲存到元素的 <strong>data</strong> 屬性中，除非被明確地被覆寫 (將另一個資料集傳入 data() 中)，否則資料會一直被儲存在元素中．</p>
<ol>
<li>元素個數 = 資料個數<img src="/2022/01/27/frontend-d3-003-selection-and-binding/01.png" class="" title="01.png">
data() 取出有對應到的元素集合</li>
<li>元素個數 &lt; 資料個數<img src="/2022/01/27/frontend-d3-003-selection-and-binding/02.png" class="" title="02.png">
enter() 取出沒有對應到的空集合，然後可以用 &lt;append&gt; 添加元素，<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d3.select( <span class="string">&quot;svg&quot;</span> ).selectAll( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">    .data( data ).enter()</span><br><span class="line">    .append(<span class="string">&quot;circle&quot;</span>).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span> );</span><br></pre></td></tr></table></figure></li>
<li>元素個數 &gt; 資料個數<img src="/2022/01/27/frontend-d3-003-selection-and-binding/03.png" class="" title="03.png">
exit() 取出沒有資料綁定的元素，然後可以用 &lt;remove&gt; 移除元素，<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d3.select( <span class="string">&quot;svg&quot;</span> ).selectAll( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">    .data( data ).exit()</span><br><span class="line">    .remove();</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="透過-key-更新資料"><a href="#透過-key-更新資料" class="headerlink" title="透過 key 更新資料"></a>透過 key 更新資料</h1><p>data( data, key) : data 為資料集，key 為更新所依據的鍵值<br>若與之前的資料集有差異的話，其更新情況如下 :</p>
<img src="/2022/01/27/frontend-d3-003-selection-and-binding/04.png" class="" title="04.png">
<p>若資料集有重複的 key 時，更新情況如下，重複的會被放在 enter() 中 :</p>
<img src="/2022/01/27/frontend-d3-003-selection-and-binding/05.png" class="" title="05.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo03_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ds1 = [[<span class="string">&quot;Steven&quot;</span>, <span class="number">1</span>], [<span class="string">&quot;Amy&quot;</span>, <span class="number">5</span>], [<span class="string">&quot;Eric&quot;</span>, <span class="number">9</span>]];</span><br><span class="line">    <span class="keyword">var</span> ds2 = [[<span class="string">&quot;Eric&quot;</span>, <span class="number">3</span>], [<span class="string">&quot;Amy&quot;</span>, <span class="number">7</span>]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scX = d3.scaleLinear().domain([<span class="number">0</span>, <span class="number">10</span>]).range([<span class="number">50</span>, <span class="number">550</span>]),</span><br><span class="line">        scY = d3.scaleLinear().domain([<span class="number">0</span>, <span class="number">3</span>]).range([<span class="number">30</span>, <span class="number">120</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> );</span><br><span class="line"></span><br><span class="line">    svg.selectAll( <span class="string">&quot;text&quot;</span> )  <span class="comment">// d3 會返回一個空集合</span></span><br><span class="line">        .data(ds1).enter().append( <span class="string">&quot;text&quot;</span> )  <span class="comment">// 繫結資料並以 &lt;text&gt; 填充</span></span><br><span class="line">        .attr( <span class="string">&quot;x&quot;</span>, <span class="number">20</span> ).attr( <span class="string">&quot;y&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scY(j++) ).text( <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>] );  <span class="comment">// 設定外觀</span></span><br><span class="line">    </span><br><span class="line">    svg.selectAll(<span class="string">&quot;circle&quot;</span>).data(ds1).enter().append( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scX(d[<span class="number">1</span>]) ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scY(k++)-<span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    svg.on( <span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cs = svg.selectAll( <span class="string">&quot;circle&quot;</span> ).data( ds2, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>] );  <span class="comment">// 用 ds2 更新資料，並以 d[0] (&quot;Eric&quot; 和 &quot;Amy&quot;) 為 key 值更新</span></span><br><span class="line"></span><br><span class="line">        cs.transition().duration(<span class="number">1000</span>).attr(<span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scX(d[<span class="number">1</span>]) );  <span class="comment">// 移動圓點</span></span><br><span class="line">        cs.exit().attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;blue&quot;</span> );  <span class="comment">// 取剩下沒有繫結到的元素 (&quot;Steven&quot;) 設定外觀 </span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo03_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo03_1&#x27;</span>)</span><br><span class="line">          .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">120</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">600</span>)</span><br><span class="line">          .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">          makeDemo03_1()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo03_1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo03_1;</span><br></pre></td></tr></table></figure>
<p>初始</p>
<img src="/2022/01/27/frontend-d3-003-selection-and-binding/06.png" class="" title="06.png">
<p>點擊後</p>
<img src="/2022/01/27/frontend-d3-003-selection-and-binding/07.png" class="" title="07.png">


<h1 id="一般更新流程"><a href="#一般更新流程" class="headerlink" title="一般更新流程"></a>一般更新流程</h1><p>一般情況下，不可能資料都是一直準備好不動的，有可能因為使用者輸入了一個新資料而必須新增一個元素，所以一個新增元素並將他合併回原本的元素集的流程是必需的，步驟如下 :</p>
<ol>
<li>繫結 (data()) 新的資料到現存的元素集</li>
<li>移除不再連結的元素 (exit()remove())</li>
<li>因為新增資料而沒有連結到元素必須建立並配置新元素 (enter().append())</li>
<li>將新建的元素合併回原始的元素集 (merge())</li>
<li>配置合併完成後元素集的外觀<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo03_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ds1 = [ [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;red&quot;</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="string">&quot;yellow&quot;</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;green&quot;</span>],</span><br><span class="line">                [<span class="number">4</span>, <span class="number">4</span>, <span class="string">&quot;blue&quot;</span>] ];    </span><br><span class="line">    <span class="keyword">var</span> ds2 = [ [<span class="number">4</span>, <span class="number">4</span>, <span class="string">&quot;red&quot;</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="string">&quot;black&quot;</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;lime&quot;</span>],</span><br><span class="line">                [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;blue&quot;</span>]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> scX = d3.scaleLinear().domain([<span class="number">1</span>, <span class="number">4</span>]).range([<span class="number">50</span>, <span class="number">250</span>]);</span><br><span class="line">    <span class="keyword">var</span> scY = d3.scaleLinear().domain([<span class="number">1</span>, <span class="number">4</span>]).range([<span class="number">50</span>, <span class="number">250</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> );</span><br><span class="line">    </span><br><span class="line">    svg.on( <span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        [ ds1, ds2 ] = [ ds2, ds1 ];  <span class="comment">// 置換資料集</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> cs = svg.selectAll( <span class="string">&quot;circle&quot;</span> ).data( ds1, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">2</span>] );  <span class="comment">// 1. 第一次將會建立空集合，第二次會根據 key 更新元素集</span></span><br><span class="line">        </span><br><span class="line">        cs.exit().remove();  <span class="comment">// 2. 移除多餘的元素</span></span><br><span class="line">        </span><br><span class="line">        cs = cs.enter().append( <span class="string">&quot;circle&quot;</span> )  <span class="comment">// 3. 建立新的元素</span></span><br><span class="line">            .attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">2</span>] )  <span class="comment">// 3. 配置新元素外觀</span></span><br><span class="line">            .merge( cs );  <span class="comment">// 4. 合併回原本的元素集</span></span><br><span class="line"></span><br><span class="line">        cs.attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scX(d[<span class="number">0</span>]) ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scY(d[<span class="number">1</span>]) );  <span class="comment">// 5. 調整外觀</span></span><br><span class="line">    &#125; );</span><br><span class="line">    </span><br><span class="line">    svg.dispatch( <span class="string">&quot;click&quot;</span> );  <span class="comment">// 因為一開始並沒有建立圓點，所以必須觸發一次 click 以便可以進行圓點的繪製</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo03_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo03_2&#x27;</span>)</span><br><span class="line">          .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">          makeDemo03_2()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo03_2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo03_2;</span><br></pre></td></tr></table></figure>
初始<img src="/2022/01/27/frontend-d3-003-selection-and-binding/08.png" class="" title="08.png">
點擊後<img src="/2022/01/27/frontend-d3-003-selection-and-binding/09.png" class="" title="09.png"></li>
</ol>
<h1 id="selection-的一些操作"><a href="#selection-的一些操作" class="headerlink" title="selection 的一些操作"></a>selection 的一些操作</h1><ul>
<li>sel.attr(name, value) : set attribute</li>
<li>sel.style(name, value, priority) : set style</li>
<li>sel.property(name, value) : set property<br>value 可以是一個值<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sel.attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure>
也可以是一個函數<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sel.attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i, ns</span>) </span>&#123; <span class="keyword">return</span> d&lt;<span class="number">0</span>?<span class="string">&quot;red&quot;</span>:<span class="string">&quot;green&quot;</span> &#125; );</span><br></pre></td></tr></table></figure>
或是用 =&gt;<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sel.attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d&lt;<span class="number">0</span> ? <span class="string">&quot;red&quot;</span>:<span class="string">&quot;green&quot;</span>)</span><br></pre></td></tr></table></figure>
若要取得指向目前 DOM 元素本身，即使用 this，則必須使用關鍵字 function 的方式</li>
</ul>
<p>其他操作</p>
<ul>
<li><p>sel.classed(value, flag) : set class name</p>
</li>
<li><p>sel.text(value) : set &lt;text&gt; value</p>
</li>
<li><p>sel.html(value) : set inner HTML</p>
</li>
<li><p>sel.datum(value) : 將 value 綁定到該元素</p>
</li>
<li><p>sel.each(function) : 每個元素都呼叫一次 gfunction</p>
</li>
<li><p>sel.append(item) : 新增一個元素</p>
</li>
<li><p>sel.insert(item, before) : 在匹配 before 前插入一個元素</p>
</li>
<li><p>sel.merge(selection) : 合併兩個元素集</p>
</li>
<li><p>sel.remove() : 移除元素</p>
</li>
<li><p>sel.sort(comparator) : 根據 comparator 排序元素集</p>
</li>
<li><p>sel.call(function, arguments) : 呼叫一次 function</p>
</li>
<li><p>sel.nodes() : 以 DOM 節點陣列方式傳回所有非空值的節點</p>
</li>
<li><p>sel.node() : 以 DOM 節點陣列方式傳回第一個非空值的節點</p>
</li>
<li><p>sel.size() : 元素個數</p>
</li>
<li><p>sel.empty() : 檢查元素集中是否具有非空值元素</p>
</li>
<li><p>底下的操作會傳回新的 selection<br>select()、selectAll()<br>data()、enter()、exit()<br>append()、insert()、remove()<br>merge()、filter()、sort()<br>create()</p>
</li>
</ul>
<h1 id="插入元素並排序"><a href="#插入元素並排序" class="headerlink" title="插入元素並排序"></a>插入元素並排序</h1><p>使用 insert() 插入新元素後，使用 datum() 繫結元素，而使用 sort() 可針對選取出的元素集做排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo03_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = [ <span class="string">&quot;Steven&quot;</span>, <span class="string">&quot;Amy&quot;</span>, <span class="string">&quot;Eric&quot;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ul = d3.select( <span class="string">&quot;ul&quot;</span> );</span><br><span class="line">    ul.selectAll( <span class="string">&quot;li&quot;</span> )</span><br><span class="line">        .data( data ).enter().append( <span class="string">&quot;li&quot;</span> )</span><br><span class="line">        .text( <span class="function"><span class="params">d</span>=&gt;</span>d ); <span class="comment">// &lt;li&gt;text&lt;/li&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> done;</span><br><span class="line">    ul.on( <span class="string">&quot;mouseenter&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 當滑鼠移進 &lt;ul&gt; 時</span></span><br><span class="line">        <span class="keyword">if</span>( done ) &#123; <span class="keyword">return</span>; &#125;  <span class="comment">// 若已經移進過了就直接返回</span></span><br><span class="line">        done = <span class="number">1</span>;</span><br><span class="line">        ul.insert( <span class="string">&quot;li&quot;</span>, <span class="string">&quot;:nth-child(2)&quot;</span> )  <span class="comment">// 將 &lt;li&gt; 插入第二個元素 (Amy) 之前</span></span><br><span class="line">            .datum( <span class="string">&quot;Oscar&quot;</span> ).text( <span class="string">&quot;Oscar&quot;</span> );  <span class="comment">// 只會繫結 Oscar 這筆資料到所選的元素上</span></span><br><span class="line">        ul.insert( <span class="string">&quot;li&quot;</span>, <span class="string">&quot;:first-child&quot;</span> )</span><br><span class="line">            .datum( <span class="string">&quot;Rose&quot;</span> ).text( <span class="string">&quot;Rose&quot;</span> );</span><br><span class="line">    &#125; );</span><br><span class="line">        </span><br><span class="line">    ul.on( <span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ul.selectAll( <span class="string">&quot;li&quot;</span> ).sort( <span class="function">(<span class="params">a,b</span>)=&gt;</span>( a&lt;b?<span class="number">1</span>:b&lt;a?-<span class="number">1</span>:<span class="number">0</span> ) );  <span class="comment">// 選擇所有 &lt;li&gt; 元素進行排序</span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo03_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo03_3&#x27;</span>)</span><br><span class="line">          .append(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">          makeDemo03_3()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo03_3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo03_3;</span><br></pre></td></tr></table></figure>
<p>初始</p>
<img src="/2022/01/27/frontend-d3-003-selection-and-binding/10.png" class="" title="10.png">
<p>插入元素</p>
<img src="/2022/01/27/frontend-d3-003-selection-and-binding/11.png" class="" title="11.png">
<p>排序元素</p>
<img src="/2022/01/27/frontend-d3-003-selection-and-binding/12.png" class="" title="12.png">

<h1 id="節點選取"><a href="#節點選取" class="headerlink" title="節點選取"></a>節點選取</h1><p>比如說有個 Html 如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>A<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>B<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>D<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果我們使用底下方式選取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d3.selectAll(<span class="string">&quot;tr&quot;</span>).selectAll(<span class="string">&quot;td&quot;</span>).attr(..., (d, i, ns));</span><br></pre></td></tr></table></figure>
<p>則可以想成取回所有的 &lt;tr&gt; 元素集，並且又取出第一個 &lt;tr&gt; 下的所有 &lt;td&gt;，所以 i 只有 0 和 1，ns 也只會有兩個．<br>但是如果用底下方式取 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ds.selectAll(<span class="string">&quot;td&quot;</span>).attr(..., (d, i, ns));</span><br></pre></td></tr></table></figure>
<p>則表示取出文件中的四個 &lt;td&gt; 元素，i = 0, 1, 2, 3，且 ns 會有四個</p>
]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>Selection</tag>
        <tag>Bind data</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 004 事件與動畫</title>
    <url>/2022/01/29/frontend-d3-004-event/</url>
    <content><![CDATA[<h1 id="設定事件回調函數並取得事件相關資訊"><a href="#設定事件回調函數並取得事件相關資訊" class="headerlink" title="設定事件回調函數並取得事件相關資訊"></a>設定事件回調函數並取得事件相關資訊</h1><p>D3 中一些重要的事件</p>
<ul>
<li>click : 點擊滑鼠</li>
<li>mousemove : 滑鼠滑過元素</li>
<li>mousedown、mouseup : 按下/釋放滑鼠鍵</li>
<li>mouseenter、mouseleave : 滑鼠移進/移出</li>
<li>mouseover、mouseout : 滑鼠移進/移出</li>
<li>keydown、keyup : 按鍵按下/釋放</li>
</ul>
<p>設定某事件處理的回調函數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sel.on( type, callback )</span><br></pre></td></tr></table></figure>
<p>若要移除回調函數，則使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sel.on( type, <span class="literal">null</span> )</span><br></pre></td></tr></table></figure>
<p>如果對同一個事件註冊兩次回調函數，則後者會把前者給覆蓋掉，若要對相同事件註冊多個回調函數，則必須在該事件名稱之後加上逗點 (.) 並取一個任意字串，如 ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sel.on( <span class="string">&quot;click.event1&quot;</span>, callback1)</span><br><span class="line">...</span><br><span class="line">sel.on( <span class="string">&quot;click_event2&quot;</span>, callback2)</span><br></pre></td></tr></table></figure>
<p>取得滑鼠座標並顯示，注意 D3 v6 以上的版本取得事件相關資訊方式有變，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> txt = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;text&quot;</span> );</span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> ).attr( <span class="string">&quot;cursor&quot;</span>, <span class="string">&quot;crosshair&quot;</span> )  <span class="comment">// 把鼠標設為十字</span></span><br><span class="line">        .on( <span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pt = d3.pointer( event, svg.node() );  <span class="comment">// D3 v6 以上的版本是使用 pointer() 取得事件相關資訊</span></span><br><span class="line">            txt.attr( <span class="string">&quot;x&quot;</span>, <span class="number">18</span>+pt[<span class="number">0</span>] ).attr( <span class="string">&quot;y&quot;</span>, <span class="number">6</span>+pt[<span class="number">1</span>] )</span><br><span class="line">                .text( <span class="string">&quot;&quot;</span> + pt[<span class="number">0</span>] + <span class="string">&quot;,&quot;</span> + pt[<span class="number">1</span>] );</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo04_1&#x27;</span>)</span><br><span class="line">          .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">          .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">          makeDemo04_1()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo04_1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_1;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/29/frontend-d3-004-event/01.png" class="" title="01.png">

<h1 id="案例-同步標記"><a href="#案例-同步標記" class="headerlink" title="案例 - 同步標記"></a>案例 - 同步標記</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.csv( <span class="string">&quot;data/dense.csv&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> svg1 = d3.select( <span class="string">&quot;#svg1&quot;</span> );</span><br><span class="line">        <span class="keyword">var</span> svg2 = d3.select( <span class="string">&quot;#svg2&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sc1=d3.scaleLinear().domain([<span class="number">0</span>,<span class="number">10</span>,<span class="number">50</span>])  <span class="comment">// 在顏色之間填入差值，產生一個顏色梯度</span></span><br><span class="line">            .range([<span class="string">&quot;lime&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;red&quot;</span>]);</span><br><span class="line">        <span class="keyword">var</span> sc2=d3.scaleLinear().domain([<span class="number">0</span>,<span class="number">10</span>,<span class="number">50</span>])</span><br><span class="line">            .range([<span class="string">&quot;lime&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;blue&quot;</span>]);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> cs1 = drawCircles(svg1,data,<span class="function"><span class="params">d</span>=&gt;</span>d[<span class="string">&quot;A&quot;</span>],<span class="function"><span class="params">d</span>=&gt;</span>d[<span class="string">&quot;B&quot;</span>],sc1);  <span class="comment">// 建立左側 svg 的圓點</span></span><br><span class="line">        <span class="keyword">var</span> cs2 = drawCircles(svg2,data,<span class="function"><span class="params">d</span>=&gt;</span>d[<span class="string">&quot;A&quot;</span>],<span class="function"><span class="params">d</span>=&gt;</span>d[<span class="string">&quot;C&quot;</span>],sc2);  <span class="comment">// 建立右側 svg 的圓點</span></span><br><span class="line">    </span><br><span class="line">        svg1.call( installHandlers, data, cs1, cs2, sc1, sc2 );  <span class="comment">// 使用 call() 呼叫 installHanders(data, cs1, cs2, sc1, sc2)</span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircles</span>(<span class="params"> svg, data, accX, accY, sc </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = sc(<span class="literal">Infinity</span>);  <span class="comment">// 設定初始的顏色值，皆採用顏色梯度做大值 (red / blue)</span></span><br><span class="line">    <span class="keyword">return</span> svg.selectAll( <span class="string">&quot;circle&quot;</span> ).data( data ).enter()</span><br><span class="line">        .append( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> ).attr( <span class="string">&quot;cx&quot;</span>, accX ).attr( <span class="string">&quot;cy&quot;</span>, accY )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, color ).attr( <span class="string">&quot;fill-opacity&quot;</span>, <span class="number">0.4</span> );  <span class="comment">// 設定透明度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installHandlers</span>(<span class="params"> svg, data, cs1, cs2, sc1, sc2 </span>) </span>&#123;</span><br><span class="line">    svg.attr( <span class="string">&quot;cursor&quot;</span>, <span class="string">&quot;crosshair&quot;</span> )</span><br><span class="line">        .on( <span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;  <span class="comment">// 當滑鼠移入左側 (sgv1) 時</span></span><br><span class="line">            <span class="keyword">var</span> pt = d3.pointer( event, svg.node() );</span><br><span class="line">            </span><br><span class="line">            cs1.attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> d, i </span>) </span>&#123;  <span class="comment">// 傳入 csv 內的 data</span></span><br><span class="line">                <span class="keyword">var</span> dx = pt[<span class="number">0</span>] - d3.select( <span class="built_in">this</span> ).attr( <span class="string">&quot;cx&quot;</span> );  <span class="comment">// 算出 data 的所有資料與滑鼠座標間的距離</span></span><br><span class="line">                <span class="keyword">var</span> dy = pt[<span class="number">1</span>] - d3.select( <span class="built_in">this</span> ).attr( <span class="string">&quot;cy&quot;</span> );</span><br><span class="line">                <span class="keyword">var</span> r = <span class="built_in">Math</span>.hypot( dx, dy );  <span class="comment">// hypot 為算出  ((dx * dx) + (dy * dy)) 開根號</span></span><br><span class="line">                </span><br><span class="line">                data[i][<span class="string">&quot;r&quot;</span>] = r;  <span class="comment">// 把 r 值在 data 中另開一個欄位 r 儲存</span></span><br><span class="line">                <span class="keyword">return</span> sc1(r); &#125; );  <span class="comment">// 根據 r 值取出對應顏色梯度的顏色值</span></span><br><span class="line">            </span><br><span class="line">            cs2.attr( <span class="string">&quot;fill&quot;</span>, <span class="function">(<span class="params">d,i</span>) =&gt;</span> sc2( data[i][<span class="string">&quot;r&quot;</span>] ) ); &#125; )  <span class="comment">// 右側圖片的所有 data 也根據剛剛算出的 r 取出對應的顏色梯度值</span></span><br><span class="line">    </span><br><span class="line">        .on( <span class="string">&quot;mouseleave&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            cs1.attr( <span class="string">&quot;fill&quot;</span>, sc1(<span class="literal">Infinity</span>) );  <span class="comment">// 滑鼠離開圖表時，恢復原本顏色</span></span><br><span class="line">            cs2.attr( <span class="string">&quot;fill&quot;</span>, sc2(<span class="literal">Infinity</span>) ); &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ds1 = [<span class="string">&quot;svg1&quot;</span>, <span class="string">&quot;svg2&quot;</span>];</span><br><span class="line"></span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo04_2&#x27;</span>)</span><br><span class="line">            .selectAll(<span class="string">&quot;svg&quot;</span>)</span><br><span class="line">            .data(ds1).enter()</span><br><span class="line">            .append(<span class="string">&#x27;svg&#x27;</span>).attr(<span class="string">&quot;id&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d)</span><br><span class="line">            .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">            .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>)</span><br><span class="line">            .style(<span class="string">&quot;margin&quot;</span>, <span class="number">20</span>);</span><br><span class="line">          makeDemo04_2()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo04_2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_2;</span><br></pre></td></tr></table></figure>
<p>進入前</p>
<img src="/2022/01/29/frontend-d3-004-event/02.png" class="" title="02.png">
<p>進入後</p>
<img src="/2022/01/29/frontend-d3-004-event/03.png" class="" title="03.png">

<h1 id="改良同步標記"><a href="#改良同步標記" class="headerlink" title="改良同步標記"></a>改良同步標記</h1><p>設定自製鼠標，設定熱區，當鼠標一進到該區中，則隱藏系統鼠標，顯示自製鼠標</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.csv( <span class="string">&quot;data/dense.csv&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> svg1 = d3.select( <span class="string">&quot;#svg1&quot;</span> );</span><br><span class="line">        <span class="keyword">var</span> svg2 = d3.select( <span class="string">&quot;#svg2&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sc1=d3.scaleLinear().domain([<span class="number">0</span>,<span class="number">10</span>,<span class="number">50</span>])  <span class="comment">// 在顏色之間填入差值，產生一個顏色梯度</span></span><br><span class="line">            .range([<span class="string">&quot;lime&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;red&quot;</span>]);</span><br><span class="line">        <span class="keyword">var</span> sc2=d3.scaleLinear().domain([<span class="number">0</span>,<span class="number">10</span>,<span class="number">50</span>])</span><br><span class="line">            .range([<span class="string">&quot;lime&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;blue&quot;</span>]);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> cs1 = drawCircles(svg1,data,<span class="function"><span class="params">d</span>=&gt;</span><span class="built_in">parseInt</span>(d[<span class="string">&quot;A&quot;</span>])+<span class="number">50</span>,<span class="function"><span class="params">d</span>=&gt;</span><span class="built_in">parseInt</span>(d[<span class="string">&quot;B&quot;</span>])+<span class="number">50</span>,sc1);  <span class="comment">// 建立左側 svg 的圓點</span></span><br><span class="line">        <span class="keyword">var</span> cs2 = drawCircles(svg2,data,<span class="function"><span class="params">d</span>=&gt;</span><span class="built_in">parseInt</span>(d[<span class="string">&quot;A&quot;</span>])+<span class="number">50</span>,<span class="function"><span class="params">d</span>=&gt;</span><span class="built_in">parseInt</span>(d[<span class="string">&quot;C&quot;</span>])+<span class="number">50</span>,sc2);  <span class="comment">// 建立右側 svg 的圓點</span></span><br><span class="line">    </span><br><span class="line">        svg1.call( installHandlers, data, cs1, cs2, sc1, sc2 );  <span class="comment">// 使用 call() 呼叫 installHanders(data, cs1, cs2, sc1, sc2)</span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircles</span>(<span class="params"> svg, data, accX, accY, sc </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = sc(<span class="literal">Infinity</span>);  <span class="comment">// 設定初始的顏色值，皆採用顏色梯度做大值 (red / blue)</span></span><br><span class="line">    <span class="keyword">return</span> svg.selectAll( <span class="string">&quot;circle&quot;</span> ).data( data ).enter()</span><br><span class="line">        .append( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> ).attr( <span class="string">&quot;cx&quot;</span>, accX ).attr( <span class="string">&quot;cy&quot;</span>, accY )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, color ).attr( <span class="string">&quot;fill-opacity&quot;</span>, <span class="number">0.4</span> );  <span class="comment">// 設定透明度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installHandlers</span>(<span class="params"> svg, data, cs1, cs2, sc1, sc2 </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cursor = svg.append( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;r&quot;</span>, <span class="number">50</span> )  <span class="comment">// 建立一個不透明的圓環</span></span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;black&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="number">10</span> ).attr( <span class="string">&quot;stroke-opacity&quot;</span>, <span class="number">0.1</span> )</span><br><span class="line">        .attr( <span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;hidden&quot;</span> );  <span class="comment">// 一開始為隱藏的，等到鼠標進入到 hotzone 時才顯示，被當作鼠標功能使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> hotzone = svg.append( <span class="string">&quot;rect&quot;</span> ).attr( <span class="string">&quot;cursor&quot;</span>, <span class="string">&quot;none&quot;</span> )  <span class="comment">// 設定進入此元素時，沒有鼠標顯示</span></span><br><span class="line">        .attr( <span class="string">&quot;x&quot;</span>, <span class="number">50</span> ).attr( <span class="string">&quot;y&quot;</span>, <span class="number">50</span> )</span><br><span class="line">        .attr( <span class="string">&quot;width&quot;</span>, <span class="number">300</span> ).attr( <span class="string">&quot;height&quot;</span>, <span class="number">300</span> )</span><br><span class="line">        .attr( <span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;hidden&quot;</span> )  <span class="comment">// 設定為隱藏的</span></span><br><span class="line">        .attr( <span class="string">&quot;pointer-events&quot;</span>, <span class="string">&quot;all&quot;</span> )   <span class="comment">// 因為 visibility 設定為 hidden，所以預設是不接收事件的，所以需要靠此設定打開接收事件</span></span><br><span class="line">    </span><br><span class="line">        .on( <span class="string">&quot;mouseenter&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            cursor.attr( <span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;visible&quot;</span> ); &#125; )  <span class="comment">// 當滑鼠進入時，將 curser 顯示，當作鼠標使用</span></span><br><span class="line">        </span><br><span class="line">        .on( <span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pt = d3.pointer( event, svg.node() );</span><br><span class="line">            cursor.attr( <span class="string">&quot;cx&quot;</span>, pt[<span class="number">0</span>] ).attr( <span class="string">&quot;cy&quot;</span>, pt[<span class="number">1</span>] );  <span class="comment">// 當滑鼠移動時，自製鼠標也跟著移動</span></span><br><span class="line"></span><br><span class="line">            cs1.attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> d, i </span>) </span>&#123;  <span class="comment">// </span></span><br><span class="line">                <span class="keyword">var</span> dx = pt[<span class="number">0</span>] - d3.select( <span class="built_in">this</span> ).attr( <span class="string">&quot;cx&quot;</span> );</span><br><span class="line">                <span class="keyword">var</span> dy = pt[<span class="number">1</span>] - d3.select( <span class="built_in">this</span> ).attr( <span class="string">&quot;cy&quot;</span> );</span><br><span class="line">                <span class="keyword">var</span> r = <span class="built_in">Math</span>.hypot( dx, dy );</span><br><span class="line"></span><br><span class="line">                data[i][<span class="string">&quot;r&quot;</span>] = r;</span><br><span class="line">                <span class="keyword">return</span> sc1(r); &#125; );</span><br><span class="line">            </span><br><span class="line">            cs2.attr( <span class="string">&quot;fill&quot;</span>, <span class="function">(<span class="params">d,i</span>) =&gt;</span> sc2( data[i][<span class="string">&quot;r&quot;</span>] ) ); &#125; )</span><br><span class="line"></span><br><span class="line">        .on( <span class="string">&quot;mouseleave&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;                                 </span><br><span class="line">            cursor.attr( <span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;hidden&quot;</span> );  <span class="comment">// 當滑鼠移出時也隱藏自製鼠標</span></span><br><span class="line">            cs1.attr( <span class="string">&quot;fill&quot;</span>, sc1(<span class="literal">Infinity</span>) );</span><br><span class="line">            cs2.attr( <span class="string">&quot;fill&quot;</span>, sc2(<span class="literal">Infinity</span>) ); &#125; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ds1 = [<span class="string">&quot;svg1&quot;</span>, <span class="string">&quot;svg2&quot;</span>];</span><br><span class="line"></span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo04_3&#x27;</span>)</span><br><span class="line">            .selectAll(<span class="string">&quot;svg&quot;</span>)</span><br><span class="line">            .data(ds1).enter()</span><br><span class="line">            .append(<span class="string">&#x27;svg&#x27;</span>).attr(<span class="string">&quot;id&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d)</span><br><span class="line">            .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">            .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>)</span><br><span class="line">            .style(<span class="string">&quot;margin&quot;</span>, <span class="number">20</span>);</span><br><span class="line">          makeDemo04_3()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo04_3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_3;</span><br></pre></td></tr></table></figure>
<p>進入前</p>
<img src="/2022/01/29/frontend-d3-004-event/04.png" class="" title="04.png">
<p>進入後</p>
<img src="/2022/01/29/frontend-d3-004-event/05.png" class="" title="05.png">

<h1 id="拖曳"><a href="#拖曳" class="headerlink" title="拖曳"></a>拖曳</h1><p>要在 D3 使用滑鼠來改變 SVG 元件並不困難，而為了讓拖曳操作更容易，D3 提供了一個行為元件 (darg())</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> widget = <span class="literal">undefined</span>, color = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> drag = d3.drag()  <span class="comment">// 使用此工廠函數建立一個 drag 函數物件</span></span><br><span class="line">        .on( <span class="string">&quot;start&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 模擬 mousedown 時的動作，取得元件</span></span><br><span class="line">            color = d3.select( <span class="built_in">this</span> ).attr( <span class="string">&quot;fill&quot;</span> );  <span class="comment">// 儲存該元件的顏色，以便在 mouseup 時設回</span></span><br><span class="line">            widget = d3.select( <span class="built_in">this</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;lime&quot;</span> );  <span class="comment">// 改變該元件的顏色</span></span><br><span class="line">        &#125; )</span><br><span class="line">        .on( <span class="string">&quot;drag&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; <span class="comment">// 模擬 mousemove</span></span><br><span class="line">            <span class="keyword">var</span> pt = d3.pointer( event, d3.select( <span class="built_in">this</span> ).node() );  <span class="comment">// 取得滑鼠座標</span></span><br><span class="line">            widget.attr( <span class="string">&quot;cx&quot;</span>, pt[<span class="number">0</span>] ).attr( <span class="string">&quot;cy&quot;</span>, pt[<span class="number">1</span>] );  <span class="comment">// 改變元件位置</span></span><br><span class="line">        &#125; )</span><br><span class="line">        .on( <span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 模擬 mouseup</span></span><br><span class="line">            widget.attr( <span class="string">&quot;fill&quot;</span>, color );  <span class="comment">// 設回原來顏色</span></span><br><span class="line">            widget = <span class="literal">undefined</span>;</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">    drag( d3.select( <span class="string">&quot;svg&quot;</span> ).selectAll( <span class="string">&quot;circle&quot;</span> ) );  <span class="comment">// 設定哪些元件的 drag 行為的回調函數</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ds1 = [[<span class="number">100</span>, <span class="number">100</span>, <span class="string">&quot;red&quot;</span>], [<span class="number">300</span>, <span class="number">100</span>, <span class="string">&quot;green&quot;</span>], [<span class="number">500</span>, <span class="number">100</span>, <span class="string">&quot;blue&quot;</span>]];</span><br><span class="line"></span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo04_4&#x27;</span>)</span><br><span class="line">            .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">600</span>)</span><br><span class="line">            .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>)</span><br><span class="line">            .selectAll(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            .data(ds1).enter()</span><br><span class="line">            .append(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            .attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">2</span>])</span><br><span class="line">            .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>])</span><br><span class="line">            .attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">1</span>])</span><br><span class="line">            .attr( <span class="string">&quot;r&quot;</span>, <span class="number">20</span>);</span><br><span class="line">          makeDemo04_4()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo04_4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_4;</span><br></pre></td></tr></table></figure>
<p>初始</p>
<img src="/2022/01/29/frontend-d3-004-event/06.png" class="" title="06.png">
<p>mousedown</p>
<img src="/2022/01/29/frontend-d3-004-event/07.png" class="" title="07.png">
<p>mouseup</p>
<img src="/2022/01/29/frontend-d3-004-event/08.png" class="" title="08.png">
<p>另一種更常見的寫法是直接選好元件並使用 call() 方式設定並實作 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> widget = <span class="literal">undefined</span>, color = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).selectAll( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">        .call( d3.drag()  <span class="comment">// 使用此工廠函數建立一個 drag 函數物件</span></span><br><span class="line">        .on( <span class="string">&quot;start&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 模擬 mousedown 時的動作，取得元件</span></span><br><span class="line">            color = d3.select( <span class="built_in">this</span> ).attr( <span class="string">&quot;fill&quot;</span> );  <span class="comment">// 儲存該元件的顏色，以便在 mouseup 時設回</span></span><br><span class="line">            widget = d3.select( <span class="built_in">this</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;lime&quot;</span> );  <span class="comment">// 改變該元件的顏色</span></span><br><span class="line">        &#125; )</span><br><span class="line">        .on( <span class="string">&quot;drag&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; <span class="comment">// 模擬 mousemove</span></span><br><span class="line">            <span class="keyword">var</span> pt = d3.pointer( event, d3.select( <span class="built_in">this</span> ).node() );  <span class="comment">// 取得滑鼠座標</span></span><br><span class="line">            widget.attr( <span class="string">&quot;cx&quot;</span>, pt[<span class="number">0</span>] ).attr( <span class="string">&quot;cy&quot;</span>, pt[<span class="number">1</span>] );  <span class="comment">// 改變元件位置</span></span><br><span class="line">        &#125; )</span><br><span class="line">        .on( <span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 模擬 mouseup</span></span><br><span class="line">            widget.attr( <span class="string">&quot;fill&quot;</span>, color );  <span class="comment">// 設回原來顏色</span></span><br><span class="line">            widget = <span class="literal">undefined</span>;</span><br><span class="line">        &#125; ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ds1 = [[<span class="number">100</span>, <span class="number">100</span>, <span class="string">&quot;red&quot;</span>], [<span class="number">300</span>, <span class="number">100</span>, <span class="string">&quot;green&quot;</span>], [<span class="number">500</span>, <span class="number">100</span>, <span class="string">&quot;blue&quot;</span>]];</span><br><span class="line"></span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo04_4&#x27;</span>)</span><br><span class="line">            .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">600</span>)</span><br><span class="line">            .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>)</span><br><span class="line">            .selectAll(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            .data(ds1).enter()</span><br><span class="line">            .append(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            .attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">2</span>])</span><br><span class="line">            .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>])</span><br><span class="line">            .attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">1</span>])</span><br><span class="line">            .attr( <span class="string">&quot;r&quot;</span>, <span class="number">20</span>);</span><br><span class="line">          makeDemo04_4()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo04_4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_4;</span><br></pre></td></tr></table></figure>

<ul>
<li>一些注意事項</li>
</ul>
<ol>
<li>在一個 selection 實例上的重複對同一種事件使用 on()，後者會蓋掉前者的定義，可用類似 click.event1、click.event2 … 唯一的標籤防止．</li>
<li>如果想在回調函數中使用 this，則必須使用關鍵字 function 的方式宣告函數，不可用箭頭函數 <code>=&gt;</code></li>
<li>瀏覽器的行為可能會干擾你的程式，可以使用 d3.event.preventDefault()</li>
<li>只有看得見以及上了顏色的元素才會接收到滑鼠指標事件，即 visibility = hidden 或 fill 和 stroke 皆被設為 none 時．是不可以接收滑鼠事件，可使用 attr( “pointer-events”, “all” ) 方式接收</li>
<li>同理 &lt;g&gt; 元素也是不可見的，所以也可以用 attr( “pointer-events”, “all” ) 方式</li>
</ol>
<h1 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h1><p>建立及結束 Transition</p>
<ul>
<li>sel.transition( tag) : 傳回一個帶有標籤 tag 的 Transition 物件</li>
<li>sel.interrupt( tag ) : 停止帶有標籤 tag 的 Transition 物件</li>
<li>trans.transition() : 當前一個 transition 結束後就開始新的 transition</li>
<li>trans.selection() : 傳回 transition 作用的 selection</li>
</ul>
<p>對 transition 方式的設定</p>
<ul>
<li>trans.delay( value ) : value 可以為常數或是函數，可設定延遲多久後才進行 transition</li>
<li>trans.duration (value ) : value 可以為常數或是函數，可設定 transition 開始到完成的時間</li>
<li>trans.ease( function ) : 此 function 傳回值必須介於 0 ~ 1 之間，預設函數為 d3.easeCubic，改變 transition 的速率，做到類似快進慢出、慢進快出… 等效果</li>
<li>trans.on( type, handler ) : type 必須為 start、end 或 interrupt，讓 transition 在其生命週期上呼叫對應的 handler</li>
</ul>
<p>Transition 可用於 ：</p>
<ul>
<li>select()、selectAll()、filter()</li>
<li>attr()、style()、text()、each()</li>
<li>merge()、remove()、call()</li>
</ul>
<p>動態長條圖表轉換</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ds1 = [ <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span> ];</span><br><span class="line">    <span class="keyword">var</span> ds2 = [ <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span> ];</span><br><span class="line">    <span class="keyword">var</span> n = ds1.length, mx = d3.max( d3.merge( [ds1, ds2] ) );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scX = d3.scaleLinear().domain( [<span class="number">0</span>,n] ).range( [<span class="number">50</span>,<span class="number">540</span>] );</span><br><span class="line">    <span class="keyword">var</span> scY = d3.scaleLinear().domain( [<span class="number">0</span>,mx] ).range( [<span class="number">250</span>,<span class="number">50</span>] );</span><br><span class="line"></span><br><span class="line">    svg.selectAll( <span class="string">&quot;line&quot;</span> ).data( ds1 ).enter().append( <span class="string">&quot;line&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> ).attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="number">20</span> )</span><br><span class="line">        .attr( <span class="string">&quot;x1&quot;</span>, <span class="function">(<span class="params">d,i</span>)=&gt;</span>scX(i) ).attr( <span class="string">&quot;y1&quot;</span>, scY(<span class="number">0</span>) )</span><br><span class="line">        .attr( <span class="string">&quot;x2&quot;</span>, <span class="function">(<span class="params">d,i</span>)=&gt;</span>scX(i) ).attr( <span class="string">&quot;y2&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scY(d) );</span><br><span class="line"></span><br><span class="line">    svg.on( <span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        [ ds1, ds2 ] = [ ds2, ds1 ];</span><br><span class="line">        </span><br><span class="line">        svg.selectAll( <span class="string">&quot;line&quot;</span> ).data( ds1 )</span><br><span class="line">            .transition().duration( <span class="number">1000</span> ).delay( <span class="function">(<span class="params">d,i</span>)=&gt;</span><span class="number">200</span>*i )  <span class="comment">// 設定漸變的方式</span></span><br><span class="line">            .attr( <span class="string">&quot;y2&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scY(d) );  <span class="comment">// 漸變效果的最終狀態</span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        d3.select(<span class="string">&#x27;.Demo04_5&#x27;</span>)</span><br><span class="line">            .append(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;height&#x27;</span>, <span class="number">300</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;width&#x27;</span>, <span class="number">600</span>)</span><br><span class="line">            .style(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;lightgrey&#x27;</span>);</span><br><span class="line">          makeDemo04_5()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Demo04_5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_5;</span><br></pre></td></tr></table></figure>

<h1 id="Transition-技巧"><a href="#Transition-技巧" class="headerlink" title="Transition 技巧"></a>Transition 技巧</h1><h2 id="字串切換"><a href="#字串切換" class="headerlink" title="字串切換"></a>字串切換</h2><p>想要在相同位置上切換兩字串，最好的方式就是漸變 fill-opacity 屬性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_7</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.select(<span class="string">&quot;#t1&quot;</span>).transition().duration(<span class="number">2000</span>).attr( <span class="string">&quot;fill-opacity&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    d3.select(<span class="string">&quot;#t2&quot;</span>).transition().duration(<span class="number">2000</span>).attr( <span class="string">&quot;fill-opacity&quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_7</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          makeDemo04_7()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">lightgrey</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;t1&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y</span> = <span class="string">&quot;100&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;t2&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y</span> = <span class="string">&quot;100&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;0&quot;</span>&gt;</span>Steven<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_7;</span><br></pre></td></tr></table></figure>

<h2 id="Transition-Chain"><a href="#Transition-Chain" class="headerlink" title="Transition Chain"></a>Transition Chain</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_8</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.select(<span class="string">&quot;circle&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        d3.select(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            .transition().duration(<span class="number">1500</span>).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">            .transition().duration(<span class="number">1500</span>).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_8</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          makeDemo04_8()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">lightgrey</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">&quot;50&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_8;</span><br></pre></td></tr></table></figure>

<h2 id="明確配置初始值"><a href="#明確配置初始值" class="headerlink" title="明確配置初始值"></a>明確配置初始值</h2><p>要漸變目標的初始值必須是明確的<font color="#FF000">不可以使用預設值</font>，否則預設的插補器會有問題．</p>
<h2 id="自訂插補器"><a href="#自訂插補器" class="headerlink" title="自訂插補器"></a>自訂插補器</h2><p>使用 ease() 製作自訂補插器<br>設定自訂補插器的方法</p>
<ul>
<li>trans.attrTween( name, factory ) : 自訂屬性名稱為 name 的插補器，factory 為傳回插補器函數的方法</li>
<li>trans.styleTween( name, factory ) : 自訂樣式名稱為 name 的插補器，factory 為傳回插補器函數的方法</li>
<li>trans.tween( tag, factory ) : 自訂標籤名稱為 tag 的插補器，factory 為傳回插補器函數的方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_9</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.select(<span class="string">&quot;svg&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        d3.select(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            .transition().duration(<span class="number">2000</span>).ease( <span class="function"><span class="params">t</span>=&gt;</span>t )</span><br><span class="line">            .attrTween( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="params">t</span>=&gt;</span><span class="string">&quot;hsl(&quot;</span>+<span class="number">360</span>*t+<span class="string">&quot;, 100%, 50%)&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        d3.select(<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">            .transition().duration(<span class="number">2000</span>).ease( <span class="function"><span class="params">t</span>=&gt;</span>t )</span><br><span class="line">            .attrTween( <span class="string">&quot;transform&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="params">t</span>=&gt;</span><span class="string">&quot;rotate(&quot;</span>+<span class="number">360</span>*t+<span class="string">&quot;,200,200)&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_9</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          makeDemo04_9()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">lightgrey</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">&quot;50&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;200&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;280&quot;</span> <span class="attr">y</span>=<span class="string">&quot;280&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_9;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Transition-事件"><a href="#Transition-事件" class="headerlink" title="Transition 事件"></a>Transition 事件</h2><p>透過 trans.on( type, handler ) : type 必須為 start、end 或 interrupt，讓 transition 在其生命週期上呼叫對應的 handler</p>
<h2 id="不要過度使用-transition"><a href="#不要過度使用-transition" class="headerlink" title="不要過度使用 transition"></a>不要過度使用 transition</h2><p>當 transition 用來讓使用者追蹤轉變過程是可被接受的，如果只是為了展現效果，久了就會被使用者厭煩．</p>
<h1 id="使用計時器建立動畫效果"><a href="#使用計時器建立動畫效果" class="headerlink" title="使用計時器建立動畫效果"></a>使用計時器建立動畫效果</h1><p>計時器相關的函數</p>
<ul>
<li><p>d3.timer( callback, after, start ) : 傳回一個新的計時器，會在每個動畫框中呼叫一次 callback，呼叫 callback 時會將計時器啟動到現在經過的時間傳入，此經過時間在視窗或分頁處於背景時是不計時的，start 為開始計時時間，after 為觸發計時後延遲多久呼叫 callback</p>
</li>
<li><p>d3.timeout( callback, after, start ) : 類似 timer，只是會被呼叫一次</p>
</li>
<li><p>d3.interval( callback, interval, start ) : 類似 timer，只是會間隔 interval 便呼叫一次</p>
</li>
<li><p>t.stop() : 停止 timer</p>
</li>
<li><p>d3.now() : 傳回目前時間</p>
</li>
<li><p>Lissajous Curve<br>範例出處 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/events.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/events.js</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo04_10</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3.2</span>, b = <span class="number">5.9</span>;                 <span class="comment">// Lissajous frequencies</span></span><br><span class="line">    <span class="keyword">var</span> phi, omega = <span class="number">2</span>*<span class="built_in">Math</span>.PI/<span class="number">10000</span>;     <span class="comment">// 10 seconds per period</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> crrX = <span class="number">150</span>+<span class="number">100</span>, crrY = <span class="number">150</span>+<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> prvX = crrX, prvY = crrY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timer = d3.timer( <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        phi = omega*t;</span><br><span class="line"></span><br><span class="line">        crrX = <span class="number">150</span>+<span class="number">100</span>*<span class="built_in">Math</span>.cos(a*phi);</span><br><span class="line">        crrY = <span class="number">150</span>+<span class="number">100</span>*<span class="built_in">Math</span>.sin(b*phi);</span><br><span class="line"></span><br><span class="line">        svg.selectAll( <span class="string">&quot;line&quot;</span> )</span><br><span class="line">            .each( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">this</span>.bogus_opacity *= <span class="number">.99</span> &#125; )</span><br><span class="line">            .attr( <span class="string">&quot;stroke-opacity&quot;</span>,</span><br><span class="line">                   <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>.bogus_opacity &#125; )</span><br><span class="line">            .filter( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>.bogus_opacity&lt;<span class="number">0.05</span> &#125; )</span><br><span class="line">            .remove(); </span><br><span class="line">        </span><br><span class="line">        svg.append( <span class="string">&quot;line&quot;</span> )</span><br><span class="line">            .each( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">this</span>.bogus_opacity = <span class="number">1.0</span> &#125; )</span><br><span class="line">            .attr( <span class="string">&quot;x1&quot;</span>, prvX ).attr( <span class="string">&quot;y1&quot;</span>, prvY ) </span><br><span class="line">            .attr( <span class="string">&quot;x2&quot;</span>, crrX ).attr( <span class="string">&quot;y2&quot;</span>, crrY )</span><br><span class="line">            .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;green&quot;</span> ).attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="number">2</span> );</span><br><span class="line"></span><br><span class="line">        prvX = crrX;</span><br><span class="line">        prvY = crrY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( t &gt; <span class="number">120e3</span> ) &#123; timer.stop(); &#125; <span class="comment">// after 120 seconds</span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo04_10</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          makeDemo04_10()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">lightgrey</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo04_10;</span><br></pre></td></tr></table></figure></li>
<li><p>Voter model<br>因為一般來說資料都需要透過網路與遠端伺服器連線取得，所以需要做一些非同步的處理，而且變化資料時加入 transition 和 duration，讓資料更新可以平順地，以提高使用者體驗<br>範例出處 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/events.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/events.js</a><br>```js<br>import * as d3 from ‘d3’<br>import { useEffect } from ‘react’;</p>
</li>
</ul>
<p>function makeDemo04_11() {<br>    var n = 50, w=300/n, dt = 3000, svg = d3.select( “svg” );</p>
<pre><code>var data = d3.range(n*n)                                      //&lt;1&gt;
    .map( d =&gt; &#123; return &#123; x: d%n, y: d/n|0,
                          val: Math.random() &#125; &#125; ); 

var sc = d3.scaleQuantize()                                   //&lt;2&gt;
    .range( [ &quot;white&quot;, &quot;red&quot;, &quot;black&quot; ] );  

svg.selectAll( &quot;rect&quot; ).data( data ).enter().append( &quot;rect&quot; ) //&lt;3&gt;
    .attr( &quot;x&quot;, d=&gt;w*d.x ).attr( &quot;y&quot;, d=&gt;w*d.y )
    .attr( &quot;width&quot;, w-1 ).attr( &quot;height&quot;, w-1 )
    .attr( &quot;fill&quot;, d =&gt; sc(d.val) );

function update() &#123;                                           //&lt;4&gt;
    var nbs = [ [0,1], [0,-1], [ 1,0], [-1, 0],
                [1,1], [1,-1], [-1,1], [-1,-1] ];
    return d3.shuffle( d3.range( n*n ) ).map( i =&gt; &#123;
        var nb = nbs[ nbs.length*Math.random() | 0 ];
        var x = (data[i].x + nb[0] + n)%n;
        var y = (data[i].y + nb[1] + n)%n;
        data[i].val = data[ y*n + x ].val;
    &#125; );
&#125;

d3.interval( function() &#123;                                     //&lt;5&gt;
    update();
    svg.selectAll( &quot;rect&quot; ).data( data )
        .transition().duration(dt).delay((d,i)=&gt;i*0.25*dt/(n*n))
        .attr( &quot;fill&quot;, d =&gt; sc(d.val) ) &#125;, dt );
</code></pre>
<p>}</p>
<p>function Demo04_11() {<br>    useEffect(()=&gt;{<br>          makeDemo04_11()<br>      })</p>
<pre><code>return (
    (&lt;svg height=&quot;300&quot; width=&quot;300&quot; style=&#123;&#123;"background" : 'lightgrey'&#125;&#125;&gt;
    &lt;/svg&gt;)
);
</code></pre>
<p>}</p>
<p>export default Demo04_11;<br>``</p>
]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>Event</tag>
        <tag>Animation</tag>
        <tag>Darg and Drop</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 005 圖形與組件</title>
    <url>/2022/01/30/frontend-d3-005-draw-shape/</url>
    <content><![CDATA[<h1 id="D3-內建的符號"><a href="#D3-內建的符號" class="headerlink" title="D3 內建的符號"></a>D3 內建的符號</h1><img src="/2022/01/30/frontend-d3-005-draw-shape/01.png" class="" title="01.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = [ </span><br><span class="line">        &#123; <span class="string">&quot;x&quot;</span>: <span class="number">20</span>, <span class="string">&quot;y&quot;</span>:  <span class="number">40</span>, <span class="string">&quot;size&quot;</span>: <span class="number">100</span>, <span class="string">&quot;symbol&quot;</span>: d3.symbolCircle, <span class="string">&quot;shape&quot;</span>: <span class="string">&quot;Circle&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;x&quot;</span>: <span class="number">20</span>, <span class="string">&quot;y&quot;</span>:  <span class="number">80</span>, <span class="string">&quot;size&quot;</span>: <span class="number">100</span>, <span class="string">&quot;symbol&quot;</span>: d3.symbolCross, <span class="string">&quot;shape&quot;</span>: <span class="string">&quot;Cross&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;x&quot;</span>: <span class="number">20</span>, <span class="string">&quot;y&quot;</span>: <span class="number">120</span>, <span class="string">&quot;size&quot;</span>: <span class="number">100</span>, <span class="string">&quot;symbol&quot;</span>: d3.symbolDiamond, <span class="string">&quot;shape&quot;</span>: <span class="string">&quot;Diamond&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;x&quot;</span>: <span class="number">20</span>, <span class="string">&quot;y&quot;</span>: <span class="number">160</span>, <span class="string">&quot;size&quot;</span>: <span class="number">100</span>, <span class="string">&quot;symbol&quot;</span>: d3.symbolSquare, <span class="string">&quot;shape&quot;</span>: <span class="string">&quot;Square&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;x&quot;</span>: <span class="number">20</span>, <span class="string">&quot;y&quot;</span>: <span class="number">200</span>, <span class="string">&quot;size&quot;</span>: <span class="number">100</span>, <span class="string">&quot;symbol&quot;</span>: d3.symbolStar, <span class="string">&quot;shape&quot;</span>: <span class="string">&quot;Star&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;x&quot;</span>: <span class="number">20</span>, <span class="string">&quot;y&quot;</span>: <span class="number">240</span>, <span class="string">&quot;size&quot;</span>: <span class="number">100</span>, <span class="string">&quot;symbol&quot;</span>: d3.symbolTriangle, <span class="string">&quot;shape&quot;</span>: <span class="string">&quot;Triangle&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;x&quot;</span>: <span class="number">20</span>, <span class="string">&quot;y&quot;</span>: <span class="number">280</span>, <span class="string">&quot;size&quot;</span>: <span class="number">100</span>, <span class="string">&quot;symbol&quot;</span>: d3.symbolWye, <span class="string">&quot;shape&quot;</span>: <span class="string">&quot;Wye&quot;</span> &#125; ]</span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> );</span><br><span class="line"></span><br><span class="line">    svg.selectAll( <span class="string">&quot;path&quot;</span> ).data(data).enter().append( <span class="string">&quot;path&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;d&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d3.symbol().size(d[<span class="string">&#x27;size&#x27;</span>]).type(d[<span class="string">&#x27;symbol&#x27;</span>])() )  <span class="comment">// 設定到 path 的 d 屬性以顯示</span></span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>,  <span class="comment">// 一開始都是畫在左上角的原點，所以需要將他移到適當的位置</span></span><br><span class="line">               <span class="function"><span class="params">d</span>=&gt;</span><span class="string">&quot;translate(&quot;</span> + d[<span class="string">&quot;x&quot;</span>] + <span class="string">&quot;,&quot;</span> + d[<span class="string">&quot;y&quot;</span>] + <span class="string">&quot;)&quot;</span> );</span><br><span class="line">    svg.selectAll(<span class="string">&quot;text&quot;</span>).data(data).enter().append(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">        .text(<span class="function"><span class="params">d</span>=&gt;</span>d[<span class="string">&quot;shape&quot;</span>])</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">        .attr( <span class="string">&quot;x&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>+d[<span class="string">&#x27;x&#x27;</span>]+<span class="number">30</span>).attr( <span class="string">&quot;y&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>+d[<span class="string">&#x27;y&#x27;</span>]+<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          makeDemo05_1()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;320&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">lightgrey</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_1;</span><br></pre></td></tr></table></figure>

<h1 id="自訂符號"><a href="#自訂符號" class="headerlink" title="自訂符號"></a>自訂符號</h1><img src="/2022/01/30/frontend-d3-005-draw-shape/02.png" class="" title="02.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = [&#123;<span class="string">&quot;x&quot;</span>: <span class="number">30</span>, <span class="string">&quot;y&quot;</span>: <span class="number">30</span>&#125;]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">arrow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;M0 0 L32 0 M16 8 L32 0 L16 -8&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> );</span><br><span class="line">    svg.selectAll( <span class="string">&quot;path&quot;</span> ).data(data).enter().append( <span class="string">&quot;path&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;d&quot;</span>, arrow )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>,  <span class="comment">// 一開始都是畫在左上角的原點，所以需要將他移到適當的位置</span></span><br><span class="line">               <span class="function"><span class="params">d</span>=&gt;</span><span class="string">&quot;translate(&quot;</span> + d[<span class="string">&quot;x&quot;</span>] + <span class="string">&quot;,&quot;</span> + d[<span class="string">&quot;y&quot;</span>] + <span class="string">&quot;)&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          makeDemo05_2()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;320&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">lightgrey</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_2;</span><br></pre></td></tr></table></figure>
<h1 id="使用-defs-和-use-方式引入符號"><a href="#使用-defs-和-use-方式引入符號" class="headerlink" title="使用 defs 和 use 方式引入符號"></a>使用 defs 和 use 方式引入符號</h1><img src="/2022/01/30/frontend-d3-005-draw-shape/03.png" class="" title="03.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = [ [<span class="number">180</span>, <span class="number">1</span>], [<span class="number">260</span>, <span class="number">3</span>], [<span class="number">340</span>, <span class="number">2</span>], [<span class="number">420</span>, <span class="number">4</span>] ]; <span class="comment">// [x, scale]</span></span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> )</span><br><span class="line">        .selectAll( <span class="string">&quot;use&quot;</span> ).data( data ).enter().append( <span class="string">&quot;use&quot;</span> )  <span class="comment">// 建立可以引用 defs 的元素</span></span><br><span class="line">        .attr( <span class="string">&quot;href&quot;</span>, <span class="string">&quot;#crosshair&quot;</span> )                             <span class="comment">// 使用 ID 選取器設定引用哪個 defs</span></span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>,                                       <span class="comment">// 移動位置與縮放比例</span></span><br><span class="line">               <span class="function"><span class="params">d</span>=&gt;</span><span class="string">&quot;translate(&quot;</span>+d[<span class="number">0</span>]+<span class="string">&quot;,50) scale(&quot;</span>+<span class="number">2</span>*d[<span class="number">1</span>]+<span class="string">&quot;)&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;black&quot;</span> )                                <span class="comment">// 設定框線</span></span><br><span class="line">        .attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span><span class="number">0.5</span>/<span class="built_in">Math</span>.sqrt(d[<span class="number">1</span>]) );          <span class="comment">// 設定框線寬度</span></span><br><span class="line">    </span><br><span class="line">    d3.select(<span class="string">&quot;svg&quot;</span>).append( <span class="string">&quot;use&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;href&quot;</span>, <span class="string">&quot;#my_symbol&quot;</span>)</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>,</span><br><span class="line">            <span class="function"><span class="params">d</span>=&gt;</span><span class="string">&quot;translate(50, 50) scale(2)&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;blue&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="string">&quot;12&quot;</span> );   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d = d3.select( <span class="string">&quot;svg&quot;</span> ).append(<span class="string">&quot;defs&quot;</span>).append(<span class="string">&quot;g&quot;</span>).attr(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;my_symbol&quot;</span>)</span><br><span class="line">        d.append(<span class="string">&quot;line&quot;</span>).attr(<span class="string">&quot;x1&quot;</span>, -<span class="number">1</span>).attr(<span class="string">&quot;y1&quot;</span>, <span class="number">1</span>).attr(<span class="string">&quot;x2&quot;</span>, <span class="number">1</span>).attr(<span class="string">&quot;y2&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        d.append(<span class="string">&quot;line&quot;</span>).attr(<span class="string">&quot;x1&quot;</span>, -<span class="number">1</span>).attr(<span class="string">&quot;y1&quot;</span>, -<span class="number">1</span>).attr(<span class="string">&quot;x2&quot;</span>, <span class="number">1</span>).attr(<span class="string">&quot;y2&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        makeDemo05_3()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">lightgrey</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">defs</span>&gt;</span>  &#123;/* 定義一個元件 */&#125;                                 </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;crosshair&quot;</span>&gt;</span>  &#123;/* 建立容器元素來容納所需元素 */&#125;                              </span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">r</span>=<span class="string">&quot;2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span>/&gt;</span> &#123;/* 因為最後在使用時會縮放大小，所以尺寸大小在這裡並不重要 */&#125; </span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;-3&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span> /&gt;</span>                    </span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;1&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;3&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;-3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;1&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">g</span>&gt;</span>                                                        </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_3;</span><br></pre></td></tr></table></figure>

<h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><ul>
<li>scale() 不只幫物件尺寸放大，也會將其座標一併放大<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.select(<span class="string">&quot;svg&quot;</span>).append(<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">        .attr( <span class="string">&quot;x&quot;</span>, <span class="number">0</span> )</span><br><span class="line">        .attr( <span class="string">&quot;y&quot;</span>, <span class="number">0</span> )</span><br><span class="line">        .attr( <span class="string">&quot;width&quot;</span>, <span class="number">20</span> )</span><br><span class="line">        .attr( <span class="string">&quot;height&quot;</span>, <span class="number">50</span> )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;blue&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="number">1</span>).attr(<span class="string">&quot;transform&quot;</span>, <span class="string">&quot;scale(2)&quot;</span>);</span><br><span class="line">    d3.select(<span class="string">&quot;svg&quot;</span>).append(<span class="string">&quot;line&quot;</span>)</span><br><span class="line">        .attr(<span class="string">&quot;x1&quot;</span>, <span class="number">100</span>)</span><br><span class="line">        .attr(<span class="string">&quot;y1&quot;</span>, <span class="number">20</span>)</span><br><span class="line">        .attr(<span class="string">&quot;x2&quot;</span>, <span class="number">100</span>)</span><br><span class="line">        .attr(<span class="string">&quot;y2&quot;</span>, <span class="number">40</span>)</span><br><span class="line">        .attr(<span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">        .attr(<span class="string">&quot;stroke-width&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    d3.select(<span class="string">&quot;svg&quot;</span>).append(<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">        .attr( <span class="string">&quot;x&quot;</span>, <span class="number">100</span> )</span><br><span class="line">        .attr( <span class="string">&quot;y&quot;</span>, <span class="number">20</span> )</span><br><span class="line">        .attr( <span class="string">&quot;width&quot;</span>, <span class="number">20</span> )</span><br><span class="line">        .attr( <span class="string">&quot;height&quot;</span>, <span class="number">50</span> )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;green&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="number">1</span>).attr(<span class="string">&quot;transform&quot;</span>, <span class="string">&quot;scale(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo05_4()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">white</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_4;</span><br></pre></td></tr></table></figure>
<img src="/2022/01/30/frontend-d3-005-draw-shape/04.png" class="" title="04.png">
紅線部份是原始綠框的座標位置，但是隨著 scale() 的作用，也把座標位置放大了<br>所以一般來說建立圖形的流程都是 :</li>
</ul>
<ol>
<li>先只在原點上建立物件</li>
<li>套用縮放、旋轉 …</li>
<li>移動到想要放置的位置</li>
</ol>
<ul>
<li>transform 的函數組合是由右邊開始套用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;rect transform=<span class="string">&quot;translate(10, 20) scale(2) rotate(30)&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
其作用順序會是將矩形旋轉 30 度，接著放大 2 倍，最後才是移動到座標點 (10, 20)</li>
</ul>
<h1 id="線條"><a href="#線條" class="headerlink" title="線條"></a>線條</h1><ul>
<li>d3.line() : 傳回一個線條產生器 (mkr)</li>
<li>mkr( data ) : 添加資料集，並傳回一個可被添加到 &lt;path&gt; 屬性 d 的字串</li>
<li>mkr.x( function(d, i, ds) {…} ) : 設定 x 座標</li>
<li>mkr.y( function(d, i, ds) {…} ) : 設定 y 座標</li>
<li>mkr.defined( function(d, i, ds) {…} ) : 用來標記哪點座標點是 undefined 的</li>
<li>mkr.curve( curve ) : 使用曲線方式繪製，預設是直線段<img src="/2022/01/30/frontend-d3-005-draw-shape/05.png" class="" title="05.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ds = [ [<span class="number">6</span>, <span class="number">2</span>], [<span class="number">7</span>, <span class="number">3</span>], [<span class="number">8</span>, <span class="number">1</span>], [<span class="number">9</span>, <span class="number">2</span>],[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">2</span>] ];</span><br><span class="line">    ds = ds.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>] )  <span class="comment">// 因為線條產生器會依據資料順序繪製，如果我們有讓它由 x 座標小的畫至大的就要先排序過</span></span><br><span class="line">    <span class="keyword">var</span> xSc = d3.scaleLinear().domain([<span class="number">1</span>,<span class="number">9</span>]).range([<span class="number">50</span>,<span class="number">250</span>]);  <span class="comment">// 先套用 scale 到資料集</span></span><br><span class="line">    <span class="keyword">var</span> ySc = d3.scaleLinear().domain([<span class="number">0</span>,<span class="number">5</span>]).range([<span class="number">175</span>,<span class="number">25</span>]);  <span class="comment">// 讓後面的程式碼簡潔</span></span><br><span class="line">    ds = ds.map( <span class="function"><span class="params">d</span> =&gt;</span> [xSc(d[<span class="number">0</span>]), ySc(d[<span class="number">1</span>])] );  <span class="comment">// 封裝在一個物件中方便取用</span></span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> ).selectAll( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">        .data( ds ).enter().append( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;r&quot;</span>, <span class="number">3</span> )  <span class="comment">// 傳入已經 scale 過的資料集</span></span><br><span class="line">        .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>] ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">1</span>] );  <span class="comment">// 直接取用不需要 scale</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//var lnMkr = d3.line();  // 取得繪製線條產生器</span></span><br><span class="line">    <span class="keyword">var</span> lnMkr = d3.line()  <span class="comment">// 取得繪製線條產生器</span></span><br><span class="line">                    .x(<span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>])  <span class="comment">// 設定 x 座標取用的資料</span></span><br><span class="line">                    .y(<span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">1</span>])  <span class="comment">// 設定 y 座標取用的資料</span></span><br><span class="line">                    .defined(<span class="function">(<span class="params">d, i</span>) =&gt;</span> i==<span class="number">3</span> ? <span class="literal">false</span> : <span class="literal">true</span>);  <span class="comment">// 定義哪些點是不連的，</span></span><br><span class="line">                    <span class="comment">// 此例是第 4 個座標點是不可連線的，即第 3/5 點是沒有線段連向第 4 點</span></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> ).append( <span class="string">&quot;path&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;d&quot;</span>, lnMkr(ds) )  <span class="comment">// 將資料集傳給線條產生器</span></span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo05_5()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_5;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="曲線"><a href="#曲線" class="headerlink" title="曲線"></a>曲線</h1><img src="/2022/01/30/frontend-d3-005-draw-shape/06.png" class="" title="06.png">
<p>代碼出處 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/shapes.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/shapes.js</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ds0 = [[<span class="number">1</span>,<span class="number">1</span>], [<span class="number">2</span>,<span class="number">2</span>], [<span class="number">2.5</span>,<span class="number">4</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">4</span>,<span class="number">2</span>], [<span class="number">4.5</span>,<span class="number">2.5</span>], [<span class="number">5</span>,<span class="number">1.5</span>]];</span><br><span class="line">    <span class="keyword">var</span> scX = d3.scaleLinear().domain([<span class="number">1</span>,<span class="number">5</span>]).range([<span class="number">0</span>,<span class="number">180</span>]);</span><br><span class="line">    <span class="keyword">var</span> scY = d3.scaleLinear().domain([<span class="number">0</span>,<span class="number">4.5</span>]).range([<span class="number">160</span>,<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> ds = ds0.map( <span class="function"><span class="params">d</span> =&gt;</span> [scX(d[<span class="number">0</span>]), scY(d[<span class="number">1</span>])] );</span><br><span class="line">    <span class="keyword">var</span> txtpos = [ scX(<span class="number">3</span>), scY(<span class="number">0</span>) ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> );</span><br><span class="line">    </span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 40, 40 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, d3.curveLinear, <span class="string">&quot;d3.curveLinear&quot;</span>, txtpos );</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 260, 40 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, d3.curveNatural, <span class="string">&quot;d3.curveNatural&quot;</span>, txtpos );</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 480, 40 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, d3.curveMonotoneX, <span class="string">&quot;d3.curveMonotoneX&quot;</span>, txtpos );</span><br><span class="line"></span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 40, 250 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, d3.curveStep, <span class="string">&quot;d3.curveStep&quot;</span>, txtpos );</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 260, 250 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, d3.curveStepAfter, <span class="string">&quot;d3.curveStepAfter&quot;</span>, txtpos );</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 480, 250 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, d3.curveStepBefore, <span class="string">&quot;d3.curveStepBefore&quot;</span>, txtpos );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// blue: val=0, ... red: val=1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vs = [ <span class="number">1</span>, <span class="number">0.75</span>, <span class="number">0.5</span>, <span class="number">0.25</span>, <span class="number">0</span> ];</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 40, 460 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, vs.map( <span class="function"><span class="params">v</span>=&gt;</span>d3.curveCardinal.tension(v) ),</span><br><span class="line">	       <span class="string">&quot;d3.curveCardinal&quot;</span>, txtpos );</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 260, 460 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, vs.map( <span class="function"><span class="params">v</span>=&gt;</span>d3.curveCatmullRom.alpha(v) ),</span><br><span class="line">	       <span class="string">&quot;d3.curveCatmullRom&quot;</span>, txtpos );</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 480, 460 )&quot;</span> )</span><br><span class="line">	.call( liner, ds, vs.map( <span class="function"><span class="params">v</span>=&gt;</span>d3.curveBundle.beta(v) ),</span><br><span class="line">	       <span class="string">&quot;d3.curveBundle&quot;</span>, txtpos )</span><br><span class="line"><span class="comment">//   	.call( liner, ds, d3.curveBasisClosed, &quot;&quot;, txtpos )</span></span><br><span class="line">	.append( <span class="string">&quot;text&quot;</span> )</span><br><span class="line">	.attr( <span class="string">&quot;x&quot;</span>, txtpos[<span class="number">0</span>] ).attr( <span class="string">&quot;y&quot;</span>, scY(-<span class="number">0.5</span>) )</span><br><span class="line">	.attr( <span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;middle&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;font-family&quot;</span>, <span class="string">&quot;sans-serif&quot;</span>).attr( <span class="string">&quot;font-size&quot;</span>, <span class="string">&quot;10.5pt&quot;</span> )</span><br><span class="line">	.text( <span class="string">&quot;d3.curveBasis&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">liner</span>(<span class="params"> g, ds, curve, txt, pos </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !(curve <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ) &#123;</span><br><span class="line">	curve = [ curve ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sc = d3.scaleLinear()</span><br><span class="line">	.domain( [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>] ).range( [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;magenta&quot;</span>, <span class="string">&quot;blue&quot;</span>] );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> lnMkr = d3.line();</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;curve.length; i++ ) &#123;</span><br><span class="line">	g.append( <span class="string">&quot;path&quot;</span> ).attr( <span class="string">&quot;d&quot;</span>, lnMkr.curve(curve[i])(ds) )</span><br><span class="line">   	    .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, sc(i) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g.selectAll( <span class="string">&quot;circle&quot;</span> ).data( ds ).enter().append( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">	.attr( <span class="string">&quot;r&quot;</span>, <span class="number">3</span> )</span><br><span class="line">	.attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>] ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">1</span>] )</span><br><span class="line">	.attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;black&quot;</span> );</span><br><span class="line">    </span><br><span class="line">    g.append( <span class="string">&quot;text&quot;</span> )</span><br><span class="line">	.attr( <span class="string">&quot;x&quot;</span>, pos[<span class="number">0</span>] ).attr( <span class="string">&quot;y&quot;</span>, pos[<span class="number">1</span>] )</span><br><span class="line">	.attr( <span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;middle&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;font-family&quot;</span>, <span class="string">&quot;sans-serif&quot;</span>).attr( <span class="string">&quot;font-size&quot;</span>, <span class="string">&quot;10.5pt&quot;</span> )</span><br><span class="line">	.text( txt );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo05_6()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;695&quot;</span> <span class="attr">width</span>=<span class="string">&quot;700&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_6;</span><br></pre></td></tr></table></figure>

<h1 id="自訂曲線"><a href="#自訂曲線" class="headerlink" title="自訂曲線"></a>自訂曲線</h1><p>自定義一個具有參數 d3.path 物件的 function，並且傳回一個物件具有 lineStart、point 及 lineEnd</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_7</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ds = [ [<span class="number">6</span>, <span class="number">2</span>], [<span class="number">7</span>, <span class="number">3</span>], [<span class="number">8</span>, <span class="number">1</span>], [<span class="number">9</span>, <span class="number">2</span>],[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">2</span>] ];</span><br><span class="line">    ds = ds.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>] )  <span class="comment">// 因為線條產生器會依據資料順序繪製，如果我們有讓它由 x 座標小的畫至大的就要先排序過</span></span><br><span class="line">    <span class="keyword">var</span> xSc = d3.scaleLinear().domain([<span class="number">1</span>,<span class="number">9</span>]).range([<span class="number">50</span>,<span class="number">250</span>]);  <span class="comment">// 先套用 scale 到資料集</span></span><br><span class="line">    <span class="keyword">var</span> ySc = d3.scaleLinear().domain([<span class="number">0</span>,<span class="number">5</span>]).range([<span class="number">175</span>,<span class="number">25</span>]);  <span class="comment">// 讓後面的程式碼簡潔</span></span><br><span class="line">    ds = ds.map( <span class="function"><span class="params">d</span> =&gt;</span> [xSc(d[<span class="number">0</span>]), ySc(d[<span class="number">1</span>])] );  <span class="comment">// 封裝在一個物件中方便取用</span></span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> ).selectAll( <span class="string">&quot;circle&quot;</span> )</span><br><span class="line">        .data( ds ).enter().append( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;r&quot;</span>, <span class="number">3</span> )  <span class="comment">// 傳入已經 scale 過的資料集</span></span><br><span class="line">        .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>] ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">1</span>] );  <span class="comment">// 直接取用不需要 scale</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> lnMkr = d3.line();  <span class="comment">// 取得繪製線條產生器</span></span><br><span class="line">    lnMkr.curve( myCurve )</span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> ).append( <span class="string">&quot;path&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;d&quot;</span>, lnMkr(ds) )  <span class="comment">// 將資料集傳給線條產生器</span></span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCurve</span>(<span class="params"> context </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">lineStart</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.data = []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">point</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> x, y </span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.data.push( [x, y] )</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">lineEnd</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xrange = d3.extent( <span class="built_in">this</span>.data, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>] )</span><br><span class="line">            <span class="keyword">var</span> median = d3.median( <span class="built_in">this</span>.data, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">1</span>] )</span><br><span class="line"></span><br><span class="line">            context.moveTo( xrange[<span class="number">0</span>], median )</span><br><span class="line">            context.lineTo( xrange[<span class="number">1</span>], median )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_7</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo05_7()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_7;</span><br></pre></td></tr></table></figure>

<h1 id="Pie-amp-Arc"><a href="#Pie-amp-Arc" class="headerlink" title="Pie &amp; Arc"></a>Pie &amp; Arc</h1><ul>
<li>d3.pie : 傳回 pie layout</li>
<li>mkr( data ) : 傳入一個資料陣列，則會返回一個物件陣列，物件成員有<br>data : 切片資料<br>value : 切片數值<br>index : 切片順序<br>startAngle : 切片開始角度，以弧度為單位<br>endAngle : 切片結束角度，以弧度為單位<br>padAngle : 切片間填充角度，以弧度為單位</li>
<li>mkr.value( arg ) : 切片數值設值/取值</li>
<li>mkr.sort( comparator ) : 切片數值排序方式</li>
<li>mkr.startAngle( arg ) : 切片開始角度設值/取值</li>
<li>mkr.endAngle( arg ) : 切片結束角度設值/取值</li>
<li>mkr.padAngle( arg ) : 切片間填充角度設值/取值</li>
</ul>
<p>arc generator</p>
<ul>
<li>d3.arc() : 傳回一個 arc generator</li>
<li>mkr( args ) : </li>
<li>mkr.innerRadius( arg ) : 設定內徑</li>
<li>mkr.outerRadius( arg ) : 設定外徑</li>
<li>mkr.startAngle( arg ) : 設定開始角度，順時針且不可為負</li>
<li>mkr.endAngle( arg ) : 設定結束角度，順時針且不可為負</li>
<li>mkr.centroid() : 切片的中間位置座標</li>
<li>mkr.cornerRadius( arg ) : 圓角的邊角半徑<br>圓餅圖範例<img src="/2022/01/30/frontend-d3-005-draw-shape/07.png" class="" title="07.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_8</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = [ &#123; <span class="attr">name</span>: <span class="string">&quot;Jim&quot;</span>, <span class="attr">votes</span>: <span class="number">12</span> &#125;,</span><br><span class="line">                 &#123; <span class="attr">name</span>: <span class="string">&quot;Sue&quot;</span>, <span class="attr">votes</span>:  <span class="number">5</span> &#125;,</span><br><span class="line">                 &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">votes</span>: <span class="number">21</span> &#125;,</span><br><span class="line">                 &#123; <span class="attr">name</span>: <span class="string">&quot;Ann&quot;</span>, <span class="attr">votes</span>: <span class="number">17</span> &#125;,</span><br><span class="line">                 &#123; <span class="attr">name</span>: <span class="string">&quot;Dan&quot;</span>, <span class="attr">votes</span>:  <span class="number">3</span> &#125; ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pie = d3.pie()  <span class="comment">// 傳回一個 pie layout</span></span><br><span class="line">                .value(<span class="function"><span class="params">d</span>=&gt;</span>d.votes)  <span class="comment">// 設定 pie 的數值</span></span><br><span class="line">                <span class="comment">//.sort( null )  // 預設為正向排序 (多到少)，依據資料集順序</span></span><br><span class="line">                <span class="comment">//.sort( (a, b) =&gt; a.votes - b.votes)  // 反序 (少到多)</span></span><br><span class="line">                .padAngle(<span class="number">0.025</span>)  <span class="comment">// 設定兩個餅之間的距離</span></span><br><span class="line">                ( data );  <span class="comment">// 傳入資料集</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> arcMkr = d3.arc()  <span class="comment">// 傳回一個 arc 產生器</span></span><br><span class="line">                    .innerRadius( <span class="number">50</span> )  <span class="comment">// 設定內徑</span></span><br><span class="line">                    .outerRadius( <span class="number">150</span> )  <span class="comment">// 設定外徑</span></span><br><span class="line">                    .cornerRadius( <span class="number">10</span> );  <span class="comment">// 設定邊角的圓角半徑 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> scC = d3.scaleOrdinal( d3.schemePastel2 ) <span class="comment">// 建立每個 pie 對應的顏色盤</span></span><br><span class="line">        .domain( pie.map(<span class="function"><span class="params">d</span>=&gt;</span>d.index) )  <span class="comment">// 使用 index 做區別</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> )  <span class="comment">// 建立一個容器元素用以裝 path</span></span><br><span class="line">        .append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(300, 175)&quot;</span> )</span><br><span class="line"></span><br><span class="line">    g.selectAll( <span class="string">&quot;path&quot;</span> ).data( pie ).enter().append( <span class="string">&quot;path&quot;</span> )  <span class="comment">// 傳入 pie 結構的資料集</span></span><br><span class="line">        .attr( <span class="string">&quot;d&quot;</span>, arcMkr )  <span class="comment">// 根據 pie 結構繪製弧形</span></span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scC(d.index) ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;grey&quot;</span> );</span><br><span class="line"></span><br><span class="line">    g.selectAll( <span class="string">&quot;text&quot;</span> ).data( pie ).enter().append( <span class="string">&quot;text&quot;</span> )  <span class="comment">// 繪製文字標籤</span></span><br><span class="line">        .text( <span class="function"><span class="params">d</span> =&gt;</span> d.data.name )</span><br><span class="line">        .attr( <span class="string">&quot;x&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>arcMkr.innerRadius(<span class="number">85</span>).centroid(d)[<span class="number">0</span>] )  <span class="comment">// 取內徑到外徑的中點當位置</span></span><br><span class="line">        .attr( <span class="string">&quot;y&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>arcMkr.innerRadius(<span class="number">85</span>).centroid(d)[<span class="number">1</span>] )</span><br><span class="line">        .attr( <span class="string">&quot;font-family&quot;</span>, <span class="string">&quot;sans-serif&quot;</span> ).attr( <span class="string">&quot;font-size&quot;</span>, <span class="number">14</span> )</span><br><span class="line">        .attr( <span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;middle&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_8</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo05_8()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;350&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_8;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="自訂組件"><a href="#自訂組件" class="headerlink" title="自訂組件"></a>自訂組件</h1><img src="/2022/01/30/frontend-d3-005-draw-shape/08.png" class="" title="08.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sticker</span>(<span class="params"> sel, label </span>) </span>&#123;</span><br><span class="line">    sel.append( <span class="string">&quot;rect&quot;</span> ).attr( <span class="string">&quot;rx&quot;</span>, <span class="number">5</span> ).attr( <span class="string">&quot;ry&quot;</span>, <span class="number">5</span> )</span><br><span class="line">        .attr( <span class="string">&quot;width&quot;</span>, <span class="number">70</span> ).attr( <span class="string">&quot;height&quot;</span>, <span class="number">30</span> )</span><br><span class="line">        .attr( <span class="string">&quot;x&quot;</span>, -<span class="number">35</span> ).attr( <span class="string">&quot;y&quot;</span>, -<span class="number">15</span> )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;blue&quot;</span> )</span><br><span class="line">        .classed( <span class="string">&quot;frame&quot;</span>, <span class="literal">true</span> );</span><br><span class="line">        </span><br><span class="line">    sel.append( <span class="string">&quot;text&quot;</span> ).attr( <span class="string">&quot;x&quot;</span>, <span class="number">0</span> ).attr( <span class="string">&quot;y&quot;</span>, <span class="number">5</span> )</span><br><span class="line">        .attr( <span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;middle&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;font-family&quot;</span>, <span class="string">&quot;sans-serif&quot;</span> ).attr( <span class="string">&quot;font-size&quot;</span>, <span class="number">14</span> )</span><br><span class="line">        .classed( <span class="string">&quot;label&quot;</span>, <span class="literal">true</span> )</span><br><span class="line">        .text( label ? label : <span class="function"><span class="params">d</span> =&gt;</span> d );  <span class="comment">// 可以透過參數會是繫結 data() 的方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo05_9</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> labels = [ <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;How&quot;</span>, <span class="string">&quot;Are&quot;</span>, <span class="string">&quot;You?&quot;</span> ];</span><br><span class="line">    <span class="keyword">var</span> scX = d3.scaleLinear()</span><br><span class="line">        .domain( [<span class="number">0</span>, labels.length-<span class="number">1</span>] ).range( [<span class="number">100</span>, <span class="number">500</span>] );</span><br><span class="line">    <span class="keyword">var</span> scY = d3.scaleLinear()</span><br><span class="line">        .domain( [<span class="number">0</span>, labels.length-<span class="number">1</span>] ).range( [<span class="number">50</span>, <span class="number">150</span>] );</span><br><span class="line">    </span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> )</span><br><span class="line">        .selectAll( <span class="string">&quot;g&quot;</span> ).data( labels ).enter().append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>,</span><br><span class="line">               <span class="function">(<span class="params">d,i</span>) =&gt;</span> <span class="string">&quot;translate(&quot;</span> + scX(i) + <span class="string">&quot;,&quot;</span> + scY(i) + <span class="string">&quot;)&quot;</span> )</span><br><span class="line">        .call( sticker );</span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(75,150)&quot;</span> )</span><br><span class="line">        .call( sticker, <span class="string">&quot;I&#x27;m fine!&quot;</span> )</span><br><span class="line">        .selectAll( <span class="string">&quot;.label&quot;</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo05_9</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo05_9()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo05_9;</span><br></pre></td></tr></table></figure>
<ol>
<li>在 &lt;g&gt; 元素裡面建立組件</li>
<li>以 call() 方式呼叫組件的建立，而 call() 會自動地注入 selection 為第一個參數</li>
<li>外觀的設定，通常是在建立好組件之後才呼叫<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, ...)</span><br><span class="line">    .call( myComponent )</span><br><span class="line">    .selectAll( <span class="string">&quot;rect&quot;</span> ).attr( <span class="string">&quot;fill&quot;</span>, ... )...</span><br></pre></td></tr></table></figure>
封裝一些重複的代碼，將一些設定值提取變成函數的參數<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">texter</span>(<span class="params"> sel, ... </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sel.attr( ... );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d3.select( ... ).append( <span class="string">&quot;text&quot;</span> ).call( texter , ... ).text( ... );</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="自訂組件的-transform"><a href="#自訂組件的-transform" class="headerlink" title="自訂組件的 transform"></a>自訂組件的 transform</h1><p>如果是透過 data() 繫結資料後建立的組件，就必須用以下方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trans</span>(<span class="params"> sel, dx, dy</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dxs = d3.local(), dys = d3.local();</span><br><span class="line">    sel.each( <span class="function"><span class="keyword">function</span>(<span class="params"> d, i </span>) </span>&#123;</span><br><span class="line">        dxs.set( <span class="built_in">this</span>, <span class="keyword">typeof</span> dx === <span class="string">&quot;function&quot;</span> ? dx( d, i ) : dx||<span class="number">0</span> )</span><br><span class="line">    &#125;);</span><br><span class="line">    sel.each( <span class="function"><span class="keyword">function</span>(<span class="params"> d, i </span>) </span>&#123;</span><br><span class="line">        dys.set( <span class="built_in">this</span>, <span class="keyword">typeof</span> dy === <span class="string">&quot;function&quot;</span> ? dy( d, i ) : dy||<span class="number">0</span> )</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> sel.attr( <span class="string">&quot;transform&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;translate(&quot;</span> + dxs.get(<span class="built_in">this</span>) + <span class="string">&quot;,&quot;</span> + dys.get(<span class="built_in">this</span>) + <span class="string">&quot;)&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trans</span>(<span class="params"> sel, dx, dy</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dxs = d3.local(), dys = d3.local();</span><br><span class="line">    sel.each( <span class="function"><span class="keyword">function</span>(<span class="params"> d, i </span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.local_dx = <span class="keyword">typeof</span> dx === <span class="string">&quot;function&quot;</span> ? dx( d, i ) : dx||<span class="number">0</span> )</span><br><span class="line">    &#125;);</span><br><span class="line">    sel.each( <span class="function"><span class="keyword">function</span>(<span class="params"> d, i </span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.local_dy = <span class="keyword">typeof</span> dy === <span class="string">&quot;function&quot;</span> ? dx( d, i ) : dy||<span class="number">0</span> )</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> sel.attr( <span class="string">&quot;transform&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;translate(&quot;</span> + <span class="built_in">this</span>.local_dx + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.local_dy + <span class="string">&quot;)&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">    .selectAll( <span class="string">&quot;g&quot;</span> ).data( vs ).enter().append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">    .call( trans, <span class="function">(<span class="params">d,i</span>)=&gt;</span> scx(d[<span class="number">0</span>]), <span class="function">(<span class="params">d,i</span>)=&gt;</span>scY(i))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>Component</tag>
        <tag>Shape</tag>
        <tag>Layout</tag>
        <tag>Generator</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 006 讀取資料</title>
    <url>/2022/02/01/frontend-d3-006-data-io/</url>
    <content><![CDATA[<h1 id="擷取資料的方法"><a href="#擷取資料的方法" class="headerlink" title="擷取資料的方法"></a>擷取資料的方法</h1><ul>
<li>d3.text( url, init ) : 由 url 讀取，並剖析傳回一個 UTF-8 字串</li>
<li>d3.json( url, init ) : 由 url 讀取，並照JSON 格式剖析傳回一個物件</li>
<li>d3.dsv( delimiter, url, init converter ) : 由 url 讀取，依據分隔符是 delimiter 分隔剖析傳回一個物件陣列</li>
<li>d3.csv( url, init, converter ) : 由 url 讀取，讀取一個具有標頭的 csv 檔，分隔符是逗號，傳回一個物件陣列</li>
<li>d3.tsc( url, init, converter ) : 由 url 讀取，讀取一個具有標頭的 tsv 檔，分隔符是定位符號，傳回一個物件陣列</li>
<li>d3.html( url, init ) : 由 url 讀取，讀取資料並剖析為 HTMLDocument 元素</li>
<li>d3.svg( url, init ) : 由 url 讀取，讀取資料並剖析為 SVGDocument 元素</li>
<li>d3.xml( url, init ) : 由 url 讀取，讀取資料並剖析為 Document 元素</li>
<li>d3.image( url, init ) : 由 url 讀取，讀取資料並剖析為 HTMLImageElement 元素</li>
<li>d3.blob( url, init ) : 由 url 讀取，讀取資料並剖析為 Blob 物件</li>
<li>d3.buffer( url, init ) : 由 url 讀取，讀取資料並剖析為 ArrayBuffer 物件</li>
</ul>
<p>範例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// json</span></span><br><span class="line">    d3.json( <span class="string">&quot;data/simple.json&quot;</span> ).then( </span><br><span class="line">        <span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log( res.val, res.txt ) </span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// image</span></span><br><span class="line">    d3.image( <span class="string">&quot;data/image.jpg&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    	d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="function">() =&gt;</span> res ) </span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readSvg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// svg</span></span><br><span class="line">    d3.svg( <span class="string">&quot;data/heart.svg&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        d3.select( <span class="string">&quot;svg&quot;</span> ).insert( <span class="function">()=&gt;</span>res.firstChild, <span class="string">&quot;:first-child&quot;</span> );</span><br><span class="line">        d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;use&quot;</span> ).attr( <span class="string">&quot;href&quot;</span>, <span class="string">&quot;#heart&quot;</span> )</span><br><span class="line">                .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(100,100) scale(2)&quot;</span> );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readCsv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// csv</span></span><br><span class="line">    d3.text( <span class="string">&quot;data/csv.csv&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = d3.csvParse( res, <span class="function">(<span class="params">d,i,cs</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>( d.Year, d.Month-<span class="number">1</span> ),</span><br><span class="line">                <span class="attr">name</span>: d.Name,</span><br><span class="line">                <span class="attr">weight</span>: +d[<span class="string">&quot;Weight (kg)&quot;</span>]</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; );</span><br><span class="line">        <span class="built_in">console</span>.log( data );                             </span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAndParse</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// more csv</span></span><br><span class="line">    d3.csv( <span class="string">&quot;data/csv.csv&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        data = res;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">&quot;1&quot;</span>, data );</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    d3.text( <span class="string">&quot;data/csv.csv&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        data = d3.csvParse( res );</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">&quot;2&quot;</span>, data );</span><br><span class="line">    &#125; );</span><br><span class="line">    </span><br><span class="line">    d3.text( <span class="string">&quot;data/csv.csv&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> parser = d3.dsvFormat( <span class="string">&quot;,&quot;</span> );</span><br><span class="line">        data = parser.parse( res );</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">&quot;3&quot;</span>, data );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAndParseWhiteSpace</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// general whitespace</span></span><br><span class="line">    d3.text( <span class="string">&quot;data/txt.txt&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> parser = d3.dsvFormat( <span class="string">&quot;&quot;</span> ) <span class="comment">// ( &quot;\0&quot; );</span></span><br><span class="line">        <span class="keyword">var</span> rows = parser.parseRows( res, <span class="function"><span class="keyword">function</span>(<span class="params">d, i, cs</span>) </span>&#123;     </span><br><span class="line">                <span class="keyword">return</span> d[<span class="number">0</span>].split( <span class="regexp">/\s+/g</span> ).map( <span class="function"><span class="params">x</span> =&gt;</span> +x );            <span class="comment">// &lt;3&gt; &lt;4&gt;</span></span><br><span class="line">        &#125; );</span><br><span class="line">        <span class="built_in">console</span>.log( rows );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberFormatting</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// number formatting</span></span><br><span class="line">    d3.json( <span class="string">&quot;https://unpkg.com/d3-format/locale/de-DE.json&quot;</span> ).then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"> res </span>) </span>&#123;           </span><br><span class="line">                <span class="keyword">var</span> loc = d3.formatLocale( res );</span><br><span class="line">                <span class="built_in">console</span>.log( loc.format( <span class="string">&quot;.4f&quot;</span> )( <span class="built_in">Math</span>.PI ) );</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"> err </span>) </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    );    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo06_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//    readJson()</span></span><br><span class="line"><span class="comment">//    readImage()</span></span><br><span class="line"><span class="comment">//    readSvg()</span></span><br><span class="line"><span class="comment">//    readCsv()</span></span><br><span class="line"><span class="comment">//    readAndParse()</span></span><br><span class="line"><span class="comment">//    readAndParseWhiteSpace()</span></span><br><span class="line">    numberFormatting()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo06_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo06_1()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo06_1;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 007 Scale 和 Axis</title>
    <url>/2022/02/01/frontend-d3-007-scale-axis/</url>
    <content><![CDATA[<h1 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h1><h2 id="連續性的-Scale"><a href="#連續性的-Scale" class="headerlink" title="連續性的 Scale"></a>連續性的 Scale</h2><p>就是由一組數值對應到另一組數值，提供以下幾種 scale</p>
<ul>
<li>d3.scaleLinear()</li>
<li>d3.scalePow()</li>
<li>d3.scaleSqrt()</li>
<li>d3.scaleLog()</li>
<li>d3.scaleTime()</li>
<li>d3.scaleUtc()<br>連續性 Scale 具有的方法</li>
<li>sc( x ) : 輸入一個在 Domain 上的數值 ( x )，返回一個在 Range 上的值</li>
<li>sc.invert( y ) : 輸入一個在 Range 上的數值 ( y )，返回一個在 Domain 上的值</li>
<li>sc.domain( [invalues] ) : 設定 Doamin </li>
<li>sc.range( [outvalues] ) : 設定 Range</li>
<li>sc.clamp( boolean ) : 若啟用 clamping 則傳回的職會被限定在 range 中</li>
<li>sc.ticks( count ) : 傳回相等間隔的陣列，會從 Domain 上切割成 count 等份</li>
<li>sc.tickFormat( count, format ) : 以 format 物件格式化傳回的陣列</li>
<li>sc.nice( count ) : 延伸 Domain，使其裁切更好</li>
<li>sc.copy() : 傳回目前 scale 的複本</li>
</ul>
<h2 id="自訂-scale"><a href="#自訂-scale" class="headerlink" title="自訂 scale"></a>自訂 scale</h2><p>可編寫自己的映射函數</p>
<ul>
<li>d3.scaleSequential( interpolator )</li>
<li>d3.scaleDiverging( interpolator )</li>
</ul>
<h2 id="分箱-Scale"><a href="#分箱-Scale" class="headerlink" title="分箱 Scale"></a>分箱 Scale</h2><p>用來對應一組連續數值到一組離散的箱子</p>
<ul>
<li>d3.scaleQuantize() : 以輸入域分箱</li>
<li>d3.scaleThreshold() : 以臨界值分箱</li>
<li>d3.scaleQuantile() : 以資料集中度分箱<img src="/2022/02/01/frontend-d3-007-scale-axis/01.png" class="" title="01.png">
引入一個 svg 檔<br>public/data/ch7.svg<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:svg</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;quantize&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(25,10)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;75&quot;</span> <span class="attr">y</span>=<span class="string">&quot;25&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;14&quot;</span>&gt;</span>d3.scaleQuantize()<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;115&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;115&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;120&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;110&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;120&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;110&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;19&quot;</span>  <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;69&quot;</span>  <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;119&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;125&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;3 3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;125&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;3 3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;75&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;14&quot;</span>&gt;</span>Equally sized bins<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;threshold&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(225,10)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;75&quot;</span> <span class="attr">y</span>=<span class="string">&quot;25&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;14&quot;</span>&gt;</span>d3.scaleThreshold()<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;115&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;115&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;120&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;110&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;120&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;110&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span>	</span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;14&quot;</span>  <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;49&quot;</span>  <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;104&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;40&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;125&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;40&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;3 3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;70&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;125&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;70&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;3 3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;40,115 45,130 35,130&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;70,115 75,130 65,130&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;75&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;14&quot;</span>&gt;</span>Explicit thresholds<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;quantile&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(425,10)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;75&quot;</span> <span class="attr">y</span>=<span class="string">&quot;25&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;14&quot;</span>&gt;</span>d3.scaleQuantile()<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;115&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;115&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;120&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;110&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;120&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;150&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;110&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;bin1&quot;</span> <span class="attr">x</span>=<span class="string">&quot;19&quot;</span>  <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;bin2&quot;</span> <span class="attr">x</span>=<span class="string">&quot;69&quot;</span>  <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;bin2&quot;</span> <span class="attr">x</span>=<span class="string">&quot;119&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12&quot;</span> <span class="attr">height</span>=<span class="string">&quot;12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">id</span>=<span class="string">&quot;bd1&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;125&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;3 3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">id</span>=<span class="string">&quot;bd2&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;125&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;3 3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;75&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;14&quot;</span>&gt;</span>Implicit thresholds<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;75&quot;</span> <span class="attr">y</span>=<span class="string">&quot;170&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;14&quot;</span>&gt;</span>Equally populated bins<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo07_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gauss = d3.randomNormal( <span class="number">75</span>, <span class="number">40</span> );</span><br><span class="line">    <span class="keyword">var</span> uni = d3.randomUniform( <span class="number">2</span>, <span class="number">10</span> );</span><br><span class="line">    <span class="keyword">var</span> data = [];</span><br><span class="line">    <span class="keyword">for</span>( ; data.length &lt; <span class="number">50</span> ; ) &#123;</span><br><span class="line">	    <span class="keyword">var</span> g = gauss();</span><br><span class="line">	    <span class="keyword">if</span>( g &gt; <span class="number">0</span> &amp;&amp; g &lt; <span class="number">150</span> ) &#123;</span><br><span class="line">	        data.push( g )</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sc = d3.scaleQuantile().domain(data).range( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] );</span><br><span class="line"><span class="comment">//    console.log( sc.invertExtent(1), sc.invertExtent(2), sc.invertExtent(3) );</span></span><br><span class="line">    </span><br><span class="line">    d3.select( <span class="string">&quot;#quantile&quot;</span> ).selectAll( <span class="string">&quot;circle&quot;</span> ).data(data).enter()</span><br><span class="line">	.append( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;r&quot;</span>, <span class="number">2</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span> )</span><br><span class="line">	.attr( <span class="string">&quot;cy&quot;</span>, <span class="function">()=&gt;</span><span class="number">115</span>+uni() ).attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d );</span><br><span class="line">    d3.select( <span class="string">&quot;#bd1&quot;</span> )</span><br><span class="line">	.attr( <span class="string">&quot;x1&quot;</span>, sc.invertExtent(<span class="number">1</span>)[<span class="number">1</span>] )</span><br><span class="line">	.attr( <span class="string">&quot;x2&quot;</span>, sc.invertExtent(<span class="number">1</span>)[<span class="number">1</span>] );</span><br><span class="line">    d3.select( <span class="string">&quot;#bd2&quot;</span> )</span><br><span class="line">	.attr( <span class="string">&quot;x1&quot;</span>, sc.invertExtent(<span class="number">2</span>)[<span class="number">1</span>] )</span><br><span class="line">	.attr( <span class="string">&quot;x2&quot;</span>, sc.invertExtent(<span class="number">2</span>)[<span class="number">1</span>] );</span><br><span class="line">    d3.select( <span class="string">&quot;#bin1&quot;</span> ).attr( <span class="string">&quot;x&quot;</span>, d3.mean(sc.invertExtent(<span class="number">1</span>))-<span class="number">6</span> );</span><br><span class="line">    d3.select( <span class="string">&quot;#bin2&quot;</span> ).attr( <span class="string">&quot;x&quot;</span>, d3.mean(sc.invertExtent(<span class="number">2</span>))-<span class="number">6</span> );</span><br><span class="line">    d3.select( <span class="string">&quot;#bin3&quot;</span> ).attr( <span class="string">&quot;x&quot;</span>, d3.mean(sc.invertExtent(<span class="number">3</span>))-<span class="number">6</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readSvg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// svg</span></span><br><span class="line">    d3.svg( <span class="string">&quot;data/ch7.svg&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        d3.select( <span class="string">&quot;svg&quot;</span> ).insert( <span class="function">()=&gt;</span>res.firstChild, <span class="string">&quot;:first-child&quot;</span> );</span><br><span class="line">        d3.select( <span class="string">&quot;#test&quot;</span> ).append( <span class="string">&quot;use&quot;</span> ).attr( <span class="string">&quot;href&quot;</span>, <span class="string">&quot;#quantize&quot;</span> );</span><br><span class="line">        d3.select( <span class="string">&quot;#test&quot;</span> ).append( <span class="string">&quot;use&quot;</span> ).attr( <span class="string">&quot;href&quot;</span>, <span class="string">&quot;#threshold&quot;</span>);</span><br><span class="line">        d3.select( <span class="string">&quot;#test&quot;</span> ).append( <span class="string">&quot;use&quot;</span> ).attr( <span class="string">&quot;href&quot;</span>, <span class="string">&quot;#quantile&quot;</span>);</span><br><span class="line">        makeDemo07_1()</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo07_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        readSvg()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo07_1;</span><br></pre></td></tr></table></figure>
分箱 Scale 具有的方法</li>
<li>sc( x ) : 輸入一個在 Domain 上的數值 ( x )，返回一個在 Range 上的值</li>
<li>sc.invertExtent( y ) : 輸入一個在 Range 上的數值 ( y )，在 Domain 的範圍內，返回一個 2 元素的陣列，代表對應箱子的邊界值</li>
<li>sc.domain( [invalues] ) : 設定 Doamin </li>
<li>sc.range( [outvalues] ) : 設定 Range</li>
<li>sc.copy() : 傳回目前 scale 的複本</li>
</ul>
<h2 id="離散式-Scale"><a href="#離散式-Scale" class="headerlink" title="離散式 Scale"></a>離散式 Scale</h2><p>用來把一組離散值對應到令一組離散值</p>
<ul>
<li>d3.scaleOrdinal( [outvalues] )</li>
<li>d3.scalePoint()</li>
<li>d3.scaleBand()<br>離散 Scale 具有的方法</li>
<li>sc( x ) : 輸入一個在 Domain 上的數值 ( x )，返回一個在 Range 上的值</li>
<li>sc.domain( [invalues] ) : 設定 Doamin </li>
<li>sc.range( [outvalues] ) : 設定 Range</li>
<li>sc.unknown( value ) : 為未知的輸入設定其輸出值</li>
<li>sc.copy() : 傳回目前 scale 的複本</li>
</ul>
<h1 id="Axis"><a href="#Axis" class="headerlink" title="Axis"></a>Axis</h1><p>軸的基本組成，由一條直線標示軸 (&lt;path&gt;)，還有一組刻度 (&lt;line&gt;) 與標籤 (&lt;text&gt;)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">&quot;domain&quot;</span> <span class="attr">d</span>=<span class="string">&quot;...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">g</span> <span class="attr">class</span>=<span class="string">&quot;tick&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">line</span> <span class="attr">...</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">...</span>&gt;</span>1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">line</span> <span class="attr">...</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">...</span>&gt;</span>2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>軸的基本建構流程</p>
<ol>
<li>實體化一個 Scale 物件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sc = d3.scaleLinear();</span><br></pre></td></tr></table></figure></li>
<li>實體化一個 axis 組件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> axMkr = d3.axisBottom( sc );</span><br></pre></td></tr></table></figure></li>
<li>提供一個合適的 &lt;g&gt; 元素並把它移到目標位置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = d3.select( ... ).append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, ... );</span><br></pre></td></tr></table></figure></li>
<li>以 &lt;g&gt; 元素作為參數傳給 axis 組件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axMkr( g );</span><br></pre></td></tr></table></figure>
亦可以使用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d3.select( ... ).append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, ... ).call( axMkr );</span><br></pre></td></tr></table></figure>
軸相關方法</li>
</ol>
<ul>
<li>d3.axisTop(scale ) : 傳回一個軸的實例，預設刻度大小為 6，預設的空白填充是 3，刻度與標籤位於軸的上方．</li>
<li>d3.axisBottom(scale ) : 傳回一個軸的實例，預設刻度大小為 6，預設的空白填充是 3，刻度與標籤位於軸的下方．</li>
<li>d3.axisLeft(scale ) : 傳回一個軸的實例，預設刻度大小為 6，預設的空白填充是 3，刻度與標籤位於軸的左方．</li>
<li>d3.axisRight(scale ) : 傳回一個軸的實例，預設刻度大小為 6，預設的空白填充是 3，刻度與標籤位於軸的右方．</li>
<li>axMkr( selection ) : selection 必須為 &lt;svg&gt; 或 &lt;g&gt;，若 selection 包含多個節點，則每個節點都會建立一個軸</li>
<li>axMkr.scale( scale ) : 設定 scale 物件</li>
</ul>
<h1 id="自訂刻度與標籤"><a href="#自訂刻度與標籤" class="headerlink" title="自訂刻度與標籤"></a>自訂刻度與標籤</h1><ul>
<li>axMkr.ticks( t, fmt ) : </li>
<li>axMkr.tickValues( [values] ) : 提供一組數值陣列，以取代掉 scale 所算出的，使用 null 可以清除之前的設定</li>
<li>axMkr.tickFormat( format ) : 傳入一個 formatter 實例用於格式化刻度標籤</li>
<li>axMkr.tickSize( size ) : 預設為 6，同時設定內部與外部刻度記號的數量</li>
<li>axMkr.tickSizeInner( size ) : 預設為 6，同時設定內部刻度記號的數量</li>
<li>axMkr.tickSizeOuter( size ) : 預設為 6，同時設定外部刻度記號的數量</li>
<li>axMkr.tickPadding( size ) : 預設為 3，設定刻度記號和刻度標籤之間的填充距離<img src="/2022/02/01/frontend-d3-007-scale-axis/02.png" class="" title="02.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo07_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sc = d3.scaleLinear().domain( [<span class="number">0</span>,<span class="number">10</span>] ).range( [<span class="number">0</span>,<span class="number">200</span>] );  <span class="comment">// 輸入區間為 0 ~ 10，輸出像素範圍為 0 ~ 200</span></span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 50,50)&quot;</span> )</span><br><span class="line">        .call( d3.axisBottom(sc) );</span><br><span class="line">    </span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 50,125)&quot;</span> )</span><br><span class="line">        .call( d3.axisBottom(sc).tickFormat( d3.format(<span class="string">&quot;.1f&quot;</span>) ) )  <span class="comment">// 刻度格式取小數點後一位</span></span><br><span class="line">        .selectAll( <span class="string">&quot;text&quot;</span> )</span><br><span class="line">        .filter( <span class="function">(<span class="params">d,i</span>)=&gt;</span>i%<span class="number">2</span>!=<span class="number">0</span> ).attr( <span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;hidden&quot;</span> );  <span class="comment">// 偶數刻度才顯示</span></span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(350,50)&quot;</span> )</span><br><span class="line">        .call( d3.axisBottom(sc).tickFormat( <span class="function">()=&gt;</span><span class="string">&quot;&quot;</span> ) );  <span class="comment">// 消除刻度標籤</span></span><br><span class="line">    d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(350,50)&quot;</span> )</span><br><span class="line">        .call( d3.axisBottom( sc ).ticks(<span class="number">2</span>) )  <span class="comment">// 分隔成 2 等份</span></span><br><span class="line">        .append( <span class="string">&quot;text&quot;</span> ).text( <span class="string">&quot;Metric&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;x&quot;</span>, sc(<span class="number">5</span>) ).attr(<span class="string">&quot;y&quot;</span>, <span class="number">35</span> )</span><br><span class="line">        .attr( <span class="string">&quot;font-size&quot;</span>, <span class="number">12</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;black&quot;</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(350,125)&quot;</span> )</span><br><span class="line">        .call( d3.axisBottom(sc).tickPadding( <span class="number">5</span> ) );</span><br><span class="line">    g.select( <span class="string">&quot;.domain&quot;</span> ).attr( <span class="string">&quot;visibility&quot;</span>, <span class="string">&quot;hidden&quot;</span> );  <span class="comment">// 隱藏軸線</span></span><br><span class="line">    g.selectAll( <span class="string">&quot;.tick&quot;</span> ).select( <span class="string">&quot;line&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> ).attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="number">2</span> );  <span class="comment">// 改變刻度記號</span></span><br><span class="line">    g.selectAll( <span class="string">&quot;text&quot;</span> ).attr( <span class="string">&quot;font-size&quot;</span>, <span class="number">14</span> );  <span class="comment">// 改變刻度標籤</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo07_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo07_2()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo07_2;</span><br></pre></td></tr></table></figure>
參考代碼 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/scales.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/scales.js</a></li>
</ul>
<h1 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h1><p>參考代碼 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/scales.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/scales.js</a></p>
<img src="/2022/02/01/frontend-d3-007-scale-axis/03.png" class="" title="03.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo07_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.text( <span class="string">&quot;data/cost.csv&quot;</span> ).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> data = d3.csvParseRows( res, <span class="function"><span class="params">d</span> =&gt;</span> [ +d[<span class="number">0</span>], +d[<span class="number">1</span>] ] );  <span class="comment">// 讀取資料</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"> sel, scX, scY, width, height </span>) </span>&#123; <span class="comment">// 繪製線圖函數</span></span><br><span class="line">            scX = scX.domain( d3.extent( data, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">0</span>] ) ).nice()  <span class="comment">// extent() 算出最大及最小值</span></span><br><span class="line">                .range( [ <span class="number">0</span>, width ] );</span><br><span class="line">            scY = scY.domain( d3.extent( data, <span class="function"><span class="params">d</span>=&gt;</span>d[<span class="number">1</span>] ) ).nice()</span><br><span class="line">                .range( [ height, <span class="number">0</span> ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> ds = data.map( <span class="function"><span class="params">d</span>=&gt;</span>[ scX(d[<span class="number">0</span>]), scY(d[<span class="number">1</span>]) ] );  <span class="comment">// 導入資料集</span></span><br><span class="line">            sel.append( <span class="string">&quot;path&quot;</span> ).classed( <span class="string">&quot;curve&quot;</span>, <span class="literal">true</span> )  <span class="comment">// 設定 &lt;path&gt; 的 calss name 為 curve</span></span><br><span class="line">                .attr( <span class="string">&quot;d&quot;</span>, d3.line()(ds) ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> )  <span class="comment">// 使用 line 產生器依據資料集 ds 繪製一條直線</span></span><br><span class="line"></span><br><span class="line">            sel.append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">                .call( d3.axisBottom( scX ).ticks(<span class="number">10</span>, <span class="string">&quot;d&quot;</span>) )  <span class="comment">// 分成 10 等份，而刻度標籤格式為整數</span></span><br><span class="line">                .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 0,&quot;</span>+height+<span class="string">&quot;)&quot;</span> );</span><br><span class="line">            </span><br><span class="line">            sel.append( <span class="string">&quot;g&quot;</span> ).call( d3.axisLeft( scY ) );</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 50, 50 )&quot;</span> )</span><br><span class="line">            .call( draw,d3.scaleLinear(),d3.scaleLinear(),<span class="number">500</span>,<span class="number">500</span> )</span><br><span class="line">            .select( <span class="string">&quot;.curve&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> );</span><br><span class="line">           </span><br><span class="line">        d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 200, 50 )&quot;</span> )</span><br><span class="line">            .call( draw,d3.scaleLinear(),d3.scaleLog(),<span class="number">350</span>,<span class="number">250</span> )</span><br><span class="line">            .select( <span class="string">&quot;.curve&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;blue&quot;</span> );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo07_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo07_3()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo07_3;</span><br></pre></td></tr></table></figure>

<h1 id="範例-2"><a href="#範例-2" class="headerlink" title="範例 2"></a>範例 2</h1><p>參考代碼 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/scales.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/scales.js</a></p>
<img src="/2022/02/01/frontend-d3-007-scale-axis/04.png" class="" title="04.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo07_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.text( <span class="string">&quot;data/load.csv&quot;</span> ).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// prepare data</span></span><br><span class="line">        <span class="keyword">var</span> parse = d3.utcParse( <span class="string">&quot;%H:%M:%S&quot;</span> );  <span class="comment">// 建立剖析時間戳的函數</span></span><br><span class="line">        <span class="keyword">var</span> format = d3.utcFormat( <span class="string">&quot;%H:%M&quot;</span> );  <span class="comment">// 建立格式化時間戳的函數</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> data = d3.csvParse( res, <span class="function"><span class="keyword">function</span>(<span class="params"> d </span>) </span>&#123;  <span class="comment">// 讀取資料</span></span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">ts</span>: parse(d.timestamp), <span class="attr">val</span>: +d.load &#125;</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> scT = d3.scaleUtc()</span><br><span class="line">            .domain( d3.extent( data, <span class="function"><span class="params">d</span>=&gt;</span>d.ts ) ).nice()</span><br><span class="line">            .range( [ <span class="number">50</span>, <span class="number">550</span> ] );</span><br><span class="line">        <span class="keyword">var</span> scY = d3.scaleLinear()</span><br><span class="line">            .domain( [<span class="number">0</span>, <span class="number">100</span>] ).range( [ <span class="number">250</span>, <span class="number">50</span> ] );</span><br><span class="line">        <span class="keyword">var</span> scC = d3.scaleThreshold()  <span class="comment">// 建立用臨界值方式建立 scale ( 小於 35: green, 35-75: orange, 大於 75 : red )</span></span><br><span class="line">            .domain( [<span class="number">35</span>, <span class="number">75</span>] ).range( [<span class="string">&quot;green&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;red&quot;</span>] );</span><br><span class="line">        </span><br><span class="line">        data = d3.pairs( data, <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">src</span>: a, <span class="attr">dst</span>: b &#125; &#125; );  <span class="comment">// 將一點一點的陣列，轉成具有起點與終點的線段對</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> ).attr( <span class="string">&quot;cursor&quot;</span>,<span class="string">&quot;crosshair&quot;</span> );</span><br><span class="line">        </span><br><span class="line">        svg.selectAll(<span class="string">&quot;line&quot;</span>).data(data).enter().append(<span class="string">&quot;line&quot;</span>)  <span class="comment">// 不同於之前使用 D3 的 line 產生器，此種曲線必須自己客製化</span></span><br><span class="line">            .attr( <span class="string">&quot;x1&quot;</span>, <span class="function"><span class="params">d</span> =&gt;</span> scT(d.src.ts) ) </span><br><span class="line">            .attr( <span class="string">&quot;x2&quot;</span>, <span class="function"><span class="params">d</span> =&gt;</span> scT(d.dst.ts) )</span><br><span class="line">            .attr( <span class="string">&quot;y1&quot;</span>, <span class="function"><span class="params">d</span> =&gt;</span> scY(d.src.val) )</span><br><span class="line">            .attr( <span class="string">&quot;y2&quot;</span>, <span class="function"><span class="params">d</span> =&gt;</span> scY(d.dst.val) )</span><br><span class="line">            .attr( <span class="string">&quot;stroke&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scC( (d.src.val + d.dst.val)/<span class="number">2</span> ) );</span><br><span class="line"></span><br><span class="line">        svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(50,0)&quot;</span> )</span><br><span class="line">            .call( d3.axisLeft(scY) );</span><br><span class="line">        svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(0,250)&quot;</span> )        </span><br><span class="line">            .call( d3.axisBottom(scT).tickFormat( format )</span><br><span class="line">                   .ticks( d3.utcMinute.every(<span class="number">10</span>) ) );  <span class="comment">// 以每 10 分鐘為一個刻度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 製作滑動鼠標而顯示曲線數值</span></span><br><span class="line">        <span class="keyword">var</span> txt = svg.append(<span class="string">&quot;text&quot;</span>).attr(<span class="string">&quot;x&quot;</span>,<span class="number">100</span>).attr(<span class="string">&quot;y&quot;</span>,<span class="number">50</span>)   <span class="comment">// 定義數值顯示位置</span></span><br><span class="line">            .attr(<span class="string">&quot;font-family&quot;</span>,<span class="string">&quot;sans-serif&quot;</span>).attr(<span class="string">&quot;font-size&quot;</span>,<span class="number">14</span>);</span><br><span class="line">        svg.on( <span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pt = d3.pointer( event, svg.node() )</span><br><span class="line">            txt.text( format( scT.invert( pt[<span class="number">0</span>] ) ) + <span class="string">&quot; | &quot;</span> +     <span class="comment">// 依據滑鼠 x 座標反算 x 軸的數值</span></span><br><span class="line">                      d3.format( <span class="string">&quot;&gt;2d&quot;</span> )( scY.invert(pt[<span class="number">1</span>]) ) );  <span class="comment">// 依據滑鼠 y 座標反算 y 軸的數值</span></span><br><span class="line">        &#125; );    </span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo07_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo07_4()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo07_4;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>Scale</tag>
        <tag>Axis</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 008 Color</title>
    <url>/2022/02/02/frontend-d3-008-color/</url>
    <content><![CDATA[<p>調色盤倉庫 : <a href="http://soliton.vm.bytemark.co.uk/pub/cpt-city/index.html">http://soliton.vm.bytemark.co.uk/pub/cpt-city/index.html</a><br>D3 各種調色盤 : <a href="https://github.com/d3/d3-scale-chromatic">https://github.com/d3/d3-scale-chromatic</a></p>
<h1 id="建立離散顏色集合"><a href="#建立離散顏色集合" class="headerlink" title="建立離散顏色集合"></a>建立離散顏色集合</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  |-- black --|-- red --|-- yellow --|-- white --|</span></span><br><span class="line"><span class="comment">//  0          0.25      0.5          0.75         1</span></span><br><span class="line"><span class="keyword">var</span> sc = d3.scaleQuantize().domain( [<span class="number">0</span>, <span class="number">1</span>] )</span><br><span class="line">    .range( [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;white&quot;</span>] );</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    -- blue --|-- white --|-- red --</span></span><br><span class="line"><span class="comment">//              -1          1</span></span><br><span class="line"><span class="keyword">var</span> sc = d3.scaleThreshold().domain( [-<span class="number">1</span>, <span class="number">1</span>] )</span><br><span class="line">    .range( [<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;red&quot;</span>] );</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  good   -&gt; green</span></span><br><span class="line"><span class="comment">//  medium -&gt; yellow</span></span><br><span class="line"><span class="comment">//  bad    -&gt; red</span></span><br><span class="line"><span class="keyword">var</span> sc = d3.scaleOrdinal().domain( [<span class="string">&quot;green&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;red&quot;</span>] )</span><br><span class="line">    .domain( [<span class="string">&quot;good&quot;</span>, <span class="string">&quot;medium&quot;</span>, <span class="string">&quot;bad&quot;</span>] );</span><br></pre></td></tr></table></figure>

<h1 id="色彩梯度"><a href="#色彩梯度" class="headerlink" title="色彩梯度"></a>色彩梯度</h1><p>代碼出處 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/colors.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/colors.js</a></p>
<img src="/2022/02/02/frontend-d3-008-color/01.png" class="" title="01.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo08_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scX = d3.scaleLinear().domain( [<span class="number">0</span>,<span class="number">10</span>] ).range( [<span class="number">0</span>,<span class="number">300</span>] );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sc1 = d3.scaleLinear().domain( [<span class="number">0</span>,<span class="number">3</span>,<span class="number">10</span>] ).range([<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;white&quot;</span>,<span class="string">&quot;red&quot;</span>]);</span><br><span class="line">    <span class="keyword">var</span> sc2 = d3.scaleLinear().domain( [<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>] )</span><br><span class="line">        .range( [<span class="string">&quot;white&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;white&quot;</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sc3 = d3.scaleSequential( <span class="function"><span class="params">t</span> =&gt;</span> <span class="string">&quot;&quot;</span> + d3.hsl( <span class="number">360</span>*t, <span class="number">1</span>, <span class="number">0.5</span> ) )</span><br><span class="line">        .domain( [<span class="number">0</span>, <span class="number">10</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sc4 = d3.scaleSequential( <span class="function"><span class="params">t</span> =&gt;</span> d3.interpolateSinebow(<span class="number">2</span>/<span class="number">3</span>-<span class="number">3</span>*t/<span class="number">4</span>) )</span><br><span class="line">        .domain( [<span class="number">0</span>, <span class="number">10</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sc5 = d3.scaleDiverging( <span class="function"><span class="params">t</span> =&gt;</span> d3.interpolateRdYlGn(<span class="number">1</span>-t) )</span><br><span class="line">	.domain( [<span class="number">0</span>, <span class="number">2</span>, <span class="number">10</span>] );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sc6 = d3.scaleSequential( d3.interpolateRgbBasis(</span><br><span class="line">        [ <span class="string">&quot;#b2d899&quot;</span>, <span class="string">&quot;#ffffbf&quot;</span>, <span class="string">&quot;#bf9966&quot;</span>, <span class="string">&quot;#ffffff&quot;</span> ] ) ).domain( [<span class="number">0</span>, <span class="number">10</span>] );</span><br><span class="line">    </span><br><span class="line">    d3.select( <span class="string">&quot;#scale&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .call( colorbox, [ <span class="number">300</span>, <span class="number">30</span> ], sc1 )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(50,25)&quot;</span> );</span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;#scale&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .call( colorbox, [ <span class="number">300</span>, <span class="number">30</span> ], sc2 )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(50,75)&quot;</span> );</span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;#scale&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .call( colorbox, [ <span class="number">300</span>, <span class="number">30</span> ], sc3 )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(50,125)&quot;</span> );</span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;#scale&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .call( colorbox, [ <span class="number">300</span>, <span class="number">30</span> ], sc4 )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(50,175)&quot;</span> );</span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;#scale&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .call( colorbox, [ <span class="number">300</span>, <span class="number">30</span> ], sc5 )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(50,225)&quot;</span> );</span><br><span class="line"></span><br><span class="line">    d3.select( <span class="string">&quot;#scale&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">        .call( colorbox, [ <span class="number">300</span>, <span class="number">30</span> ], sc6, scX )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(50,275)&quot;</span> );   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">colorbox</span>(<span class="params"> sel, size, colors, ticks </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> [x0, x1] = d3.extent( colors.domain() );</span><br><span class="line">    <span class="keyword">var</span> bars = d3.range( x0, x1, (x1-x0)/size[<span class="number">0</span>] );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sc = d3.scaleLinear().domain( [x0, x1] ).range( [<span class="number">0</span>, size[<span class="number">0</span>] ] );</span><br><span class="line">    sel.selectAll( <span class="string">&quot;line&quot;</span> ).data( bars ).enter().append( <span class="string">&quot;line&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;x1&quot;</span>, sc ).attr( <span class="string">&quot;x2&quot;</span>, sc )</span><br><span class="line">        .attr( <span class="string">&quot;y1&quot;</span>, <span class="number">0</span> ).attr( <span class="string">&quot;y2&quot;</span>, size[<span class="number">1</span>] )</span><br><span class="line">        .attr( <span class="string">&quot;stroke&quot;</span>, colors );</span><br><span class="line">    </span><br><span class="line">    sel.append( <span class="string">&quot;rect&quot;</span> ).attr( <span class="string">&quot;width&quot;</span>, size[<span class="number">0</span>] ).attr( <span class="string">&quot;height&quot;</span>, size[<span class="number">1</span>] )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;black&quot;</span> )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( ticks ) &#123;</span><br><span class="line">        sel.append( <span class="string">&quot;g&quot;</span> ).call( d3.axisBottom( ticks ) )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 0,&quot;</span> + size[<span class="number">1</span>] + <span class="string">&quot;)&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo08_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo08_1()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">&quot;scale&quot;</span> <span class="attr">height</span>=<span class="string">&quot;350&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo08_1;</span><br></pre></td></tr></table></figure>

<h1 id="熱點圖"><a href="#熱點圖" class="headerlink" title="熱點圖"></a>熱點圖</h1><p>代碼出處 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/colors.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/colors.js</a></p>
<img src="/2022/02/02/frontend-d3-008-color/02.png" class="" title="02.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo08_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cnv = d3.select( <span class="string">&quot;#canvas&quot;</span> );  <span class="comment">// 取得 HTML5 的 &lt;canvas&gt; 元素</span></span><br><span class="line">    <span class="keyword">var</span> ctx = cnv.node().getContext( <span class="string">&quot;2d&quot;</span> );  <span class="comment">// 先必須取得一個 2d 的 context 以供繪圖</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pxX = <span class="number">465</span>, pxY = <span class="number">250</span>;  <span class="comment">// 圖片像素大小</span></span><br><span class="line">    <span class="keyword">var</span> maxIter = <span class="number">2000</span>;  <span class="comment">// 曼德博集合的最大迭代次數，https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BE%B7%E5%8D%9A%E9%9B%86%E5%90%88</span></span><br><span class="line">    <span class="keyword">var</span> x0 = -<span class="number">1.31</span>, x1 = -<span class="number">0.845</span>, y0 = <span class="number">0.2</span>, y1 = <span class="number">0.45</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> scX = d3.scaleLinear().domain([<span class="number">0</span>, pxX]).range([x0, x1]);</span><br><span class="line">    <span class="keyword">var</span> scY = d3.scaleLinear().domain([<span class="number">0</span>, pxY]).range([y1, y0]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> scC = d3.scaleLinear().domain([<span class="number">0</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">35</span>,<span class="number">55</span>,<span class="number">1999</span>,<span class="number">2000</span>])</span><br><span class="line">        .range( [<span class="string">&quot;white&quot;</span>,<span class="string">&quot;red&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;lightyellow&quot;</span>,</span><br><span class="line">		 <span class="string">&quot;white&quot;</span>,<span class="string">&quot;darkgrey&quot;</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mandelbrot</span>(<span class="params"> x, y </span>) </span>&#123;  <span class="comment">// 曼德博公式</span></span><br><span class="line">        <span class="keyword">var</span> u=<span class="number">0.0</span>, v=<span class="number">0.0</span>, k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( k=<span class="number">0</span>; k&lt;maxIter &amp;&amp; (u*u + v*v)&lt;<span class="number">4</span>; k++ ) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = u*u - v*v + x;</span><br><span class="line">            v = <span class="number">2</span>*u*v + y;</span><br><span class="line">            u = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> j=<span class="number">0</span>; j&lt;pxY; j++ ) &#123;  <span class="comment">// 座標一點一點帶入取得顏色數值，並在畫布上畫出該座標點的顏色</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;pxX; i++ ) &#123;</span><br><span class="line">            <span class="keyword">var</span> d = mandelbrot( scX(i), scY(j) );</span><br><span class="line">            ctx.fillStyle = scC( d );</span><br><span class="line">            ctx.fillRect( i, j, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo08_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo08_2()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">width</span>=<span class="string">&quot;465&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo08_2;</span><br></pre></td></tr></table></figure>

<h1 id="輪廓線"><a href="#輪廓線" class="headerlink" title="輪廓線"></a>輪廓線</h1><ul>
<li>d3.contours() : 傳回一個輪廓線 layout 實例</li>
<li>conMkr( [data] ) : 為提供的資料集計算輪廓線，資料集必須為一維陣列，位置(i, j)的值，應該要被轉成一維陣列放在data[i+j*cols]上．會傳回一個 GeoJSON 物件陣列</li>
<li>conMkr.size( [cols, rows] ) : 設定欄和列的數目</li>
<li>conMkr.thresholds( args ) : 要被用於計算輪廓線的陣列值，如果是單一整數，則近似的 n 條輪廓線將會被計算</li>
<li>conMkr.contour( [data], threshold ) : 為提供的資料集在指定的臨界值上產生一條輪廓線<br>代碼出處 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/colors.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/colors.js</a><img src="/2022/02/02/frontend-d3-008-color/03.png" class="" title="03.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo08_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/haxby.json&quot;</span> ).then( drawContours );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawContours</span>(<span class="params"> scheme </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pxX = <span class="number">525</span>, pxY = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">var</span> scX = d3.scaleLinear().domain([-<span class="number">3</span>, <span class="number">1</span>]).range([<span class="number">0</span>, pxX]);    </span><br><span class="line">    <span class="keyword">var</span> scY = d3.scaleLinear().domain([-<span class="number">1.5</span>, <span class="number">1.5</span>]).range([pxY, <span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> scC = d3.scaleSequential(</span><br><span class="line">        d3.interpolateRgbBasis(scheme[<span class="string">&quot;colors&quot;</span>]) ).domain([-<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">var</span> scZ = d3.scaleLinear().domain( [-<span class="number">1</span>, -<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">1</span>] )         </span><br><span class="line">        .range( [ <span class="string">&quot;white&quot;</span>, <span class="string">&quot;grey&quot;</span>, <span class="string">&quot;grey&quot;</span>, <span class="string">&quot;black&quot;</span> ] );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> data = [];</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function">(<span class="params">x, y, b</span>) =&gt;</span> (y**<span class="number">4</span> + x*y**<span class="number">2</span> + b*y)*<span class="built_in">Math</span>.exp(-(y**<span class="number">2</span>))  <span class="comment">// 使用此公式取得顏色數值</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> j=<span class="number">0</span>; j&lt;pxY; j++ ) &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;pxX; i++ ) &#123;</span><br><span class="line">            data.push( f( scX.invert(i), scY.invert(j), <span class="number">0.3</span> ) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    console.log(data);</span></span><br><span class="line">    <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;#contours&quot;</span> ), g = svg.append( <span class="string">&quot;g&quot;</span> );</span><br><span class="line">    <span class="keyword">var</span> pathMkr = d3.geoPath();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> conMkr = d3.contours().size([pxX, pxY]).thresholds(<span class="number">100</span>);  <span class="comment">// 設定輪廓線，設定統計範圍 (pxX, pxY) 大小，data 依據 Sturges’ formula 將數值分組，組數近似於 100</span></span><br><span class="line"><span class="comment">//    console.log(conMkr(data));</span></span><br><span class="line">    g.append(<span class="string">&quot;g&quot;</span>).selectAll( <span class="string">&quot;path&quot;</span> ).data( conMkr(data) ).enter()</span><br><span class="line">        .append( <span class="string">&quot;path&quot;</span> ).attr( <span class="string">&quot;d&quot;</span>, pathMkr )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scC(d.value) ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;none&quot;</span> )</span><br><span class="line">    </span><br><span class="line">    conMkr = d3.contours().size( [pxX,pxY] ).thresholds( <span class="number">10</span> );</span><br><span class="line">    g.append(<span class="string">&quot;g&quot;</span>).selectAll( <span class="string">&quot;path&quot;</span> ).data( conMkr(data) ).enter()</span><br><span class="line">        .append( <span class="string">&quot;path&quot;</span> ).attr( <span class="string">&quot;d&quot;</span>, pathMkr )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scZ(d.value) );</span><br><span class="line">    </span><br><span class="line">    g.select( <span class="string">&quot;g&quot;</span> ).append( <span class="string">&quot;path&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;d&quot;</span>, pathMkr( conMkr.contour( data, <span class="number">0.025</span> ) ) )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="number">2</span> );</span><br><span class="line"></span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).call( d3.axisTop(scX).ticks(<span class="number">10</span>) )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(0,&quot;</span> + pxY + <span class="string">&quot;)&quot;</span> );</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).call( d3.axisRight(scY).ticks(<span class="number">5</span>) );</span><br><span class="line"></span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).call( colorbox, [<span class="number">280</span>,<span class="number">30</span>], scC )</span><br><span class="line">        .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 540,290 ) rotate(-90)&quot;</span> )</span><br><span class="line">        .selectAll( <span class="string">&quot;text&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;rotate(90)&quot;</span> );</span><br><span class="line">    svg.append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 570,10 )&quot;</span> )</span><br><span class="line">        .call( d3.axisRight( d3.scaleLinear()</span><br><span class="line">                             .domain( [-<span class="number">1</span>,<span class="number">1</span>] ).range( [<span class="number">280</span>,<span class="number">0</span>] ) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">colorbox</span>(<span class="params"> sel, size, colors, ticks </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> [x0, x1] = d3.extent( colors.domain() );</span><br><span class="line">    <span class="keyword">var</span> bars = d3.range( x0, x1, (x1-x0)/size[<span class="number">0</span>] );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sc = d3.scaleLinear().domain( [x0, x1] ).range( [<span class="number">0</span>, size[<span class="number">0</span>] ] );</span><br><span class="line">    sel.selectAll( <span class="string">&quot;line&quot;</span> ).data( bars ).enter().append( <span class="string">&quot;line&quot;</span> )</span><br><span class="line">        .attr( <span class="string">&quot;x1&quot;</span>, sc ).attr( <span class="string">&quot;x2&quot;</span>, sc )</span><br><span class="line">        .attr( <span class="string">&quot;y1&quot;</span>, <span class="number">0</span> ).attr( <span class="string">&quot;y2&quot;</span>, size[<span class="number">1</span>] )</span><br><span class="line">        .attr( <span class="string">&quot;stroke&quot;</span>, colors );</span><br><span class="line">    </span><br><span class="line">    sel.append( <span class="string">&quot;rect&quot;</span> ).attr( <span class="string">&quot;width&quot;</span>, size[<span class="number">0</span>] ).attr( <span class="string">&quot;height&quot;</span>, size[<span class="number">1</span>] )</span><br><span class="line">        .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;black&quot;</span> )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( ticks ) &#123;</span><br><span class="line">        sel.append( <span class="string">&quot;g&quot;</span> ).call( d3.axisBottom( ticks ) )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 0,&quot;</span> + size[<span class="number">1</span>] + <span class="string">&quot;)&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo08_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo08_3()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">&quot;contours&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo08_3;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>Color</tag>
        <tag>contours</tag>
        <tag>geoPath</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 009 樹與網路</title>
    <url>/2022/02/02/frontend-d3-009-tree-network/</url>
    <content><![CDATA[<p>代碼參考 : <a href="https://github.com/janert/d3-for-the-impatient/blob/master/examples/trees.js">https://github.com/janert/d3-for-the-impatient/blob/master/examples/trees.js</a><br>D3 階層式 Layout 需要把資料表示成 D3 Node 實例樹 (適合的資料結構)，如果資料是階層式格式，則可以用 d3.hierarchy() 轉換，如果資料是以提供在父節點和子節點之間的連結集合，則 d3.stratify() 可以用來建構所需的 Node 實例樹．<a href="https://observablehq.com/@d3/d3-stratify">d3.stratify() Examples</a></p>
<ul>
<li>d3.hierarchy( data, accessor ) : 從 data 中建立一個 Node 實例樹，傳回 root node．accessor 預設為 d =&gt; d.children，傳回一個子節點陣列．</li>
<li>node.ancestors() : 傳回祖先節點陣列</li>
<li>node.descendants() : 傳回後代節點陣列</li>
<li>node.leaves() : 傳回葉節點陣列</li>
<li>node.path( target ) : 傳回一條從目前節點到目的節點的最短路徑</li>
<li>node.links() : 傳回連結關係陣列，每個陣列元素是一個物件，具有 source 和 target 屬性．</li>
<li>node.count() : 計算所屬子樹下的葉數目，結果會被紀錄在節點上的 value 屬性上，葉節點的 value 屬性會被記錄為 1</li>
<li>node.sum( accessor ) : 以 post-order traversal 的方式加總每個節點的資料並設定到 value 屬性中</li>
<li>node.sort( comparator ) : 以 preorder traversal 方式排序</li>
<li>node.each( function ) : 在目前以及每個後代節點上呼叫提供的 function</li>
<li>node.copy() : 傳回子樹的複本</li>
</ul>
<p>D3 Node 實例的屬性</p>
<ul>
<li>node.data : 原始資料集</li>
<li>node.depth : 與根節點的距離</li>
<li>node.height : 到最深的葉節點距離，葉節點的高度為 0</li>
<li>node.parent : 父節點．根節點的父節點為 null</li>
<li>node.children : 子節點陣列．葉節點的子節點為 undefined</li>
<li>node.value : 放置由 count() 或 sum() 所計算的值</li>
</ul>
<p>d3.tree 及 d3.cluster 的方法</p>
<ul>
<li>d3.tree() : 傳回一個 tree layout 實例，具有相同深度的節點，將會放在距離 root 節點相同像素的位置</li>
<li>d3.cluster() : 傳回一個 tree layout 實例，所有葉節點，將會放在距離 root 節點相同像素的位置</li>
<li>t( node ) : 輸入一個 D3 Node 物件樹的根節點</li>
<li>t.size( [x, y] ) : 結果圖形的大小</li>
<li>t.nodeSize( [x, y] ) : 單一個節點的大小<br>節點原始資料<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;kids&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bin&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;boot&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;dev&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;home&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;kids&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;alice&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">5</span>, <span class="attr">&quot;kids&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mail&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;img&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;kids&quot;</span>: [</span><br><span class="line">                &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;color&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">8</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">                &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bw&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;</span><br><span class="line">            ] &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;files&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">4</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;</span><br><span class="line">        ] &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;eve&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;kids&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;spy&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;</span><br><span class="line">        ] &#125;,	</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bob&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;kids&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mail&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">4</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;docs&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">7</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;src&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">5</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;</span><br><span class="line">        ] &#125;</span><br><span class="line">    ] &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lib&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">9</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;usr&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;kids&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bin&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;include&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">6</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lib&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">9</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;local&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">7</span>, <span class="attr">&quot;kids&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bin&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lib&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;share&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;</span><br><span class="line">        ] &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;share&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">4</span>, <span class="attr">&quot;kids&quot;</span>: [] &#125;</span><br><span class="line">    ] &#125;</span><br><span class="line">] &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/filesys.json&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> nodes = d3.hierarchy(json, <span class="function"><span class="params">d</span>=&gt;</span>d.kids);  <span class="comment">// 建構 D3 Node 物件樹，其子節點是被儲存在 kids 中</span></span><br><span class="line">        d3.tree().size( [<span class="number">250</span>,<span class="number">225</span>] )( nodes );  <span class="comment">// 設定完整圖形的像素尺寸</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(25, 25)&quot;</span> );</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> lnkMkr = d3.linkVertical().x( <span class="function"><span class="params">d</span>=&gt;</span>d.x ).y( <span class="function"><span class="params">d</span>=&gt;</span>d.y );  <span class="comment">// 節點間的連結線產生器</span></span><br><span class="line">        g.selectAll( <span class="string">&quot;path&quot;</span> ).data( nodes.links() ).enter()  <span class="comment">// 產生連結線</span></span><br><span class="line">            .append( <span class="string">&quot;path&quot;</span> ).attr( <span class="string">&quot;d&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>lnkMkr(d) )</span><br><span class="line">            .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> );</span><br><span class="line">        </span><br><span class="line">        g.selectAll(<span class="string">&quot;circle&quot;</span>).data( nodes.descendants() ).enter()  <span class="comment">// 傳回後代陣列畫點</span></span><br><span class="line">            .append(<span class="string">&quot;circle&quot;</span>).attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> )</span><br><span class="line">            .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.x ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.y );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_1()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;275&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_1;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/01.png" class="" title="01.png">
<p>d3.tree() 是依據輸入順序繪製，而要使用 d3.cluster() 之前必須依據高度重新排列後，在輸入給 d3.cluster()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/filesys.json&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> nodes = d3.hierarchy(json, <span class="function"><span class="params">d</span>=&gt;</span>d.kids);  <span class="comment">// 建構 D3 Node 物件樹，其子節點是被儲存在 kids 中</span></span><br><span class="line">        nodes = nodes.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> b.height - a.height );  <span class="comment">// 依據高度排列</span></span><br><span class="line">        d3.cluster().size( [<span class="number">250</span>,<span class="number">225</span>] )( nodes );  <span class="comment">// 設定完整圖形的像素尺寸</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(25, 25)&quot;</span> );</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> lnkMkr = d3.linkVertical().x( <span class="function"><span class="params">d</span>=&gt;</span>d.x ).y( <span class="function"><span class="params">d</span>=&gt;</span>d.y );  <span class="comment">// 節點間的連結線產生器</span></span><br><span class="line">        g.selectAll( <span class="string">&quot;path&quot;</span> ).data( nodes.links() ).enter()  <span class="comment">// 產生連結線</span></span><br><span class="line">            .append( <span class="string">&quot;path&quot;</span> ).attr( <span class="string">&quot;d&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>lnkMkr(d) )</span><br><span class="line">            .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> );</span><br><span class="line">        </span><br><span class="line">        g.selectAll(<span class="string">&quot;circle&quot;</span>).data( nodes.descendants() ).enter()  <span class="comment">// 傳回後代陣列畫點</span></span><br><span class="line">            .append(<span class="string">&quot;circle&quot;</span>).attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> )</span><br><span class="line">            .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.x ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.y );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_2()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;275&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_2;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/02.png" class="" title="02.png">
<p>以水平方式繪製 tree</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/filesys.json&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> nodes = d3.hierarchy(json, <span class="function"><span class="params">d</span>=&gt;</span>d.kids);</span><br><span class="line">        d3.tree().size( [<span class="number">250</span>,<span class="number">225</span>] )( nodes );</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(25, 25)&quot;</span> );</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> lnkMkr = d3.linkHorizontal().x( <span class="function"><span class="params">d</span>=&gt;</span>d.y ).y( <span class="function"><span class="params">d</span>=&gt;</span>d.x );  <span class="comment">// 以水平方式繪製節點間的連結</span></span><br><span class="line">        g.selectAll( <span class="string">&quot;path&quot;</span> ).data( nodes.links() ).enter()</span><br><span class="line">            .append( <span class="string">&quot;path&quot;</span> ).attr( <span class="string">&quot;d&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>lnkMkr(d) )</span><br><span class="line">            .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> );</span><br><span class="line">        </span><br><span class="line">        g.selectAll(<span class="string">&quot;circle&quot;</span>).data( nodes.descendants() ).enter()</span><br><span class="line">            .append(<span class="string">&quot;circle&quot;</span>).attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> )</span><br><span class="line">            .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.y ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.x );  <span class="comment">// 因為是水平繪製，所以此處 x 和 y 要對調</span></span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_3()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;275&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_3;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/03.png" class="" title="03.png">

<p>使用極坐標</p>
<img src="/2022/02/02/frontend-d3-009-tree-network/04.png" class="" title="04.png">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/filesys.json&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> nodes = d3.cluster().size( [<span class="number">2</span>*<span class="built_in">Math</span>.PI, <span class="number">125</span>] )(  <span class="comment">// 使用 radial 方式繪製的話，需要用極座標</span></span><br><span class="line">            d3.hierarchy( json, <span class="function"><span class="params">d</span>=&gt;</span>d.kids )</span><br><span class="line">                .sort( <span class="function">(<span class="params">a,b</span>)=&gt;</span>b.height-a.height )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(150, 150)&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"> r, phi </span>) </span>&#123; <span class="keyword">return</span>  r*<span class="built_in">Math</span>.sin(phi) &#125;  <span class="comment">// 定義座標轉換公式</span></span><br><span class="line">        <span class="keyword">var</span> v = <span class="function"><span class="keyword">function</span>(<span class="params"> r, phi </span>) </span>&#123; <span class="keyword">return</span> -r*<span class="built_in">Math</span>.cos(phi) &#125;  </span><br><span class="line">        </span><br><span class="line">        g.selectAll( <span class="string">&quot;line&quot;</span> ).data( nodes.links() ).enter()</span><br><span class="line">            .append( <span class="string">&quot;line&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;x1&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>h(d.source.y, d.source.x) )  <span class="comment">// 座標轉換</span></span><br><span class="line">            .attr( <span class="string">&quot;y1&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>v(d.source.y, d.source.x) )</span><br><span class="line">            .attr( <span class="string">&quot;x2&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>h(d.target.y, d.target.x) )</span><br><span class="line">            .attr( <span class="string">&quot;y2&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>v(d.target.y, d.target.x) );</span><br><span class="line"></span><br><span class="line">        g.selectAll( <span class="string">&quot;circle&quot;</span> ).data( nodes.descendants() ).enter()</span><br><span class="line">            .append( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> )</span><br><span class="line">            .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>h(d.y, d.x) )</span><br><span class="line">            .attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>v(d.y, d.x) );</span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_4()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_4;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/05.png" class="" title="05.png">

<p>以極座標方式繪製樹</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/filesys.json&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> nodes = d3.cluster().size( [<span class="number">2</span>*<span class="built_in">Math</span>.PI, <span class="number">125</span>] )(  <span class="comment">// 使用 radial 方式繪製的話，需要用極座標</span></span><br><span class="line">            d3.hierarchy( json, <span class="function"><span class="params">d</span>=&gt;</span>d.kids )</span><br><span class="line">                .sort( <span class="function">(<span class="params">a,b</span>)=&gt;</span>b.height-a.height )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(150, 150)&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"> r, phi </span>) </span>&#123; <span class="keyword">return</span>  r*<span class="built_in">Math</span>.sin(phi) &#125;  <span class="comment">// 定義座標轉換公式</span></span><br><span class="line">        <span class="keyword">var</span> v = <span class="function"><span class="keyword">function</span>(<span class="params"> r, phi </span>) </span>&#123; <span class="keyword">return</span> -r*<span class="built_in">Math</span>.cos(phi) &#125;  </span><br><span class="line">        </span><br><span class="line">        g.selectAll( <span class="string">&quot;line&quot;</span> ).data( nodes.links() ).enter()</span><br><span class="line">            .append( <span class="string">&quot;line&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;x1&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>h(d.source.y, d.source.x) )  <span class="comment">// 座標轉換</span></span><br><span class="line">            .attr( <span class="string">&quot;y1&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>v(d.source.y, d.source.x) )</span><br><span class="line">            .attr( <span class="string">&quot;x2&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>h(d.target.y, d.target.x) )</span><br><span class="line">            .attr( <span class="string">&quot;y2&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>v(d.target.y, d.target.x) );</span><br><span class="line"></span><br><span class="line">        g.selectAll( <span class="string">&quot;circle&quot;</span> ).data( nodes.descendants() ).enter()</span><br><span class="line">            .append( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> )</span><br><span class="line">            .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>h(d.y, d.x) )</span><br><span class="line">            .attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>v(d.y, d.x) );</span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_4()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_4;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/06.png" class="" title="06.png">

<p>以 radial 連結產生器取代直線</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/filesys.json&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> nodes = d3.cluster().size( [<span class="number">2</span>*<span class="built_in">Math</span>.PI, <span class="number">125</span>] )(  <span class="comment">// 使用 radial 方式繪製的話，需要用極座標</span></span><br><span class="line">            d3.hierarchy( json, <span class="function"><span class="params">d</span>=&gt;</span>d.kids )</span><br><span class="line">                .sort( <span class="function">(<span class="params">a,b</span>)=&gt;</span>b.height-a.height )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(150, 150)&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"> r, phi </span>) </span>&#123; <span class="keyword">return</span>  r*<span class="built_in">Math</span>.sin(phi) &#125;  <span class="comment">// 定義座標轉換公式</span></span><br><span class="line">        <span class="keyword">var</span> v = <span class="function"><span class="keyword">function</span>(<span class="params"> r, phi </span>) </span>&#123; <span class="keyword">return</span> -r*<span class="built_in">Math</span>.cos(phi) &#125;  </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        g.selectAll(<span class="string">&quot;path&quot;</span>).data( nodes.links() ).enter().append(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">            .attr( <span class="string">&quot;d&quot;</span>, d3.linkRadial().angle( <span class="function"><span class="params">d</span>=&gt;</span>d.x ).radius( <span class="function"><span class="params">d</span>=&gt;</span>d.y ))  <span class="comment">// 以 radial 方式產生連結線</span></span><br><span class="line">            .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;none&quot;</span> );</span><br><span class="line"></span><br><span class="line">        g.selectAll( <span class="string">&quot;circle&quot;</span> ).data( nodes.descendants() ).enter()</span><br><span class="line">            .append( <span class="string">&quot;circle&quot;</span> ).attr( <span class="string">&quot;r&quot;</span>, <span class="number">5</span> )</span><br><span class="line">            .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>h(d.y, d.x) )</span><br><span class="line">            .attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>v(d.y, d.x) );</span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_5()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_5;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/07.png" class="" title="07.png">

<p>之前的 tree / cluster 只是表示出父子階層關係，除了要表示出父子關係外，也要可表現出節點的大小與其子節點大小的話，則可以用 treemap / partition 方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/filesys.json&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sc = d3.scaleOrdinal( d3.schemeReds[<span class="number">8</span>] );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> nodes = d3.hierarchy(json, <span class="function"><span class="params">d</span>=&gt;</span>d.kids).sum(<span class="function"><span class="params">d</span>=&gt;</span>d.size)  <span class="comment">// 計算出其後代 size 加總</span></span><br><span class="line">            .sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b.height-a.height || b.value-a.value); <span class="comment">// 按高度降冪及數值降冪排序</span></span><br><span class="line">        </span><br><span class="line">        d3.treemap().size( [<span class="number">300</span>,<span class="number">300</span>] ).padding(<span class="number">5</span>)(nodes);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> ).append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(5, 5)&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        g.selectAll( <span class="string">&quot;rect&quot;</span> ).data( nodes.descendants() ).enter()</span><br><span class="line">            .append( <span class="string">&quot;rect&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;x&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.x0 ).attr( <span class="string">&quot;y&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.y0 )</span><br><span class="line">            .attr( <span class="string">&quot;width&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.x1-d.x0 )  <span class="comment">// treemap layout 提供了兩個對角的 (x0, y0) (x1, y1) </span></span><br><span class="line">            .attr( <span class="string">&quot;height&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.y1-d.y0 )</span><br><span class="line">            .attr( <span class="string">&quot;fill&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>sc(d.depth) ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> );</span><br><span class="line"></span><br><span class="line">        g.selectAll( <span class="string">&quot;text&quot;</span> ).data( nodes.leaves() ).enter()  <span class="comment">// 只為每個葉節點顯示文字</span></span><br><span class="line">            .append( <span class="string">&quot;text&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;middle&quot;</span> ).attr( <span class="string">&quot;font-size&quot;</span>, <span class="number">10</span> )</span><br><span class="line">            .attr( <span class="string">&quot;x&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>(d.x0+d.x1)/<span class="number">2</span> )</span><br><span class="line">            .attr( <span class="string">&quot;y&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>(d.y0+d.y1)/<span class="number">2</span>+<span class="number">2</span> )</span><br><span class="line">            .text( <span class="function"><span class="params">d</span>=&gt;</span>d.data.name );    </span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_6()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;310&quot;</span> <span class="attr">width</span>=<span class="string">&quot;310&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_6;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/08.png" class="" title="08.png">

<p>基於作用力的粒子排列，於最後穩態時繪出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_7</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.json( <span class="string">&quot;data/network.json&quot;</span> ).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> svg = d3.select( <span class="string">&quot;svg&quot;</span> )</span><br><span class="line">        <span class="keyword">var</span> scC = d3.scaleOrdinal( d3.schemePastel1 )</span><br><span class="line">        </span><br><span class="line">        d3.shuffle( res.ps ); d3.shuffle( res.ln );</span><br><span class="line">        </span><br><span class="line">        d3.forceSimulation( res.ps )</span><br><span class="line">            .force(<span class="string">&quot;ct&quot;</span>, d3.forceCenter( <span class="number">300</span>, <span class="number">300</span> ) )</span><br><span class="line">            .force(<span class="string">&quot;ln&quot;</span>,</span><br><span class="line">                   d3.forceLink( res.ln ).distance(<span class="number">40</span>).id(<span class="function"><span class="params">d</span>=&gt;</span>d.id) )</span><br><span class="line">            .force(<span class="string">&quot;hc&quot;</span>, d3.forceCollide(<span class="number">10</span>) )</span><br><span class="line">            .force(<span class="string">&quot;many&quot;</span>, d3.forceManyBody() )</span><br><span class="line">            .on( <span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                svg.selectAll( <span class="string">&quot;line&quot;</span> ).data( res.ln ).enter()</span><br><span class="line">                    .append( <span class="string">&quot;line&quot;</span> ).attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;black&quot;</span> )</span><br><span class="line">                    .attr( <span class="string">&quot;x1&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.source.x )</span><br><span class="line">                    .attr( <span class="string">&quot;y1&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.source.y )</span><br><span class="line">                    .attr( <span class="string">&quot;x2&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.target.x )</span><br><span class="line">                    .attr( <span class="string">&quot;y2&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.target.y );</span><br><span class="line">            </span><br><span class="line">                svg.selectAll(<span class="string">&quot;circle&quot;</span>).data(res.ps).enter()</span><br><span class="line">                    .append(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">                    .attr( <span class="string">&quot;r&quot;</span>, <span class="number">10</span> ).attr( <span class="string">&quot;fill&quot;</span>, <span class="function">(<span class="params">d,i</span>) =&gt;</span> scC(i) )</span><br><span class="line">                    .attr( <span class="string">&quot;cx&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.x ).attr( <span class="string">&quot;cy&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.y )</span><br><span class="line"></span><br><span class="line">                svg.selectAll(<span class="string">&quot;text&quot;</span>).data(res.ps).enter()</span><br><span class="line">                    .append(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">                    .attr( <span class="string">&quot;x&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.x ).attr( <span class="string">&quot;y&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>d.y+<span class="number">4</span> )</span><br><span class="line">                    .attr( <span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;middle&quot;</span> )</span><br><span class="line">                    .attr( <span class="string">&quot;font-size&quot;</span>, <span class="number">10</span> )</span><br><span class="line">                    .text( <span class="function"><span class="params">d</span>=&gt;</span>d.id );</span><br><span class="line">            &#125; )</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_7</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_7()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_7;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/09.png" class="" title="09.png">
<p>模擬過程顯示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo09_8</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ps = [ &#123; <span class="attr">x</span>: <span class="number">350</span>, <span class="attr">y</span>: <span class="number">300</span>, <span class="attr">vx</span>: <span class="number">0</span>, <span class="attr">vy</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">x</span>: <span class="number">250</span>, <span class="attr">y</span>: <span class="number">300</span>, <span class="attr">vx</span>: <span class="number">0</span>, <span class="attr">vy</span>: -<span class="number">1</span> &#125; ];</span><br><span class="line"><span class="keyword">var</span> ln = [ &#123; <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">source</span>: ps[<span class="number">0</span>], <span class="attr">target</span>: ps[<span class="number">1</span>] &#125; ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cs1 = d3.select( <span class="string">&quot;#simul&quot;</span> ).select( <span class="string">&quot;#c1&quot;</span> );</span><br><span class="line"><span class="keyword">var</span> cs2 = d3.select( <span class="string">&quot;#simul&quot;</span> ).select( <span class="string">&quot;#c2&quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sim = d3.forceSimulation( ps )</span><br><span class="line"> .alphaDecay( <span class="number">0</span> ).alphaMin( -<span class="number">1</span> ).velocityDecay( <span class="number">0</span> )</span><br><span class="line"> .force(<span class="string">&quot;ln&quot;</span>, d3.forceLink(ln).distance(<span class="number">50</span>).strength(<span class="number">0.01</span>))</span><br><span class="line"> .on( <span class="string">&quot;tick&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     cs1.attr( <span class="string">&quot;cx&quot;</span>, ps[<span class="number">0</span>].x ).attr( <span class="string">&quot;cy&quot;</span>, ps[<span class="number">0</span>].y );</span><br><span class="line">     cs2.attr( <span class="string">&quot;cx&quot;</span>, ps[<span class="number">1</span>].x ).attr( <span class="string">&quot;cy&quot;</span>, ps[<span class="number">1</span>].y );</span><br><span class="line"> &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo09_8</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo09_8()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">&quot;simul&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">&quot;c1&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;350&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;300&quot;</span> <span class="attr">r</span>=<span class="string">&quot;10&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">&quot;c2&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;250&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;300&quot;</span> <span class="attr">r</span>=<span class="string">&quot;10&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo09_8;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/02/frontend-d3-009-tree-network/10.png" class="" title="10.png">]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 - 010 Tools</title>
    <url>/2022/02/06/frontend-d3-010-tools/</url>
    <content><![CDATA[<ul>
<li>d3.range( start, stop, step ) : 返回一個數值陣列．以 start 為陣列的第一個元素 (預設為 0)，每間隔 step (step 預設為 1) 取一個數值，直到 stop</li>
<li>d3.shuffle( array, low, high ) : 對陣列內的索引 low 到 high 間的元素做洗牌動作，若沒有指定 low 和 high 則對陣列的所有元素做洗牌．</li>
<li>d3.cross( a, b, reducer ) : 傳入一維陣列 a 及 b．透過 reducer 函數，預設會產出一個 2 元素陣列，[ [a1, b1], [a1, b2], …, [a2, b1], [a2, b2], … ]</li>
<li>d3.merge( array1, array2, … ) : 合併多個一維陣列</li>
<li>d3.parirs( array, reducer ) : 對相臨兩元素，透過 reducer 函數，預設會產出一個 2 元素陣列，[ [a1, a1], [a2, a3], … ]</li>
<li>d3.transpose( matrix ) : 返回轉置矩陣</li>
<li>d3.min( array, accessor ) : 取得 array 中的最小值</li>
<li>d3.max( array, accessor ) : 取得 array 中的最大值</li>
<li>d3.extent( array, accessor ) : 返回 [min, max]</li>
<li>d3.sum( array, accessor ) : 傳回元素的總和</li>
<li>d3.mean( array, accessor ) : 傳回元素的平均值<br>其他完整的 D3 API : <a href="https://github.com/d3/d3/blob/main/API.md">https://github.com/d3/d3/blob/main/API.md</a></li>
</ul>
<p>直方圖是一個 Layout，傳回一個由一組箱子所組成的陣列．每個箱子都是包含 length 屬性 (元素數目)， x0 及 x1 屬性項組成．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDemo10_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d3.csv( <span class="string">&quot;data/dense.csv&quot;</span> ).then( <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;                        </span><br><span class="line">        <span class="keyword">var</span> histo = d3.histogram().value( <span class="function"><span class="params">d</span>=&gt;</span>+d.A )( data );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> scX = d3.scaleBand().padding( <span class="number">0.2</span> ).round( <span class="literal">true</span> )</span><br><span class="line">            .range( [<span class="number">15</span>, <span class="number">515</span>] ).domain( histo );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> scY = d3.scaleLinear().range( [<span class="number">200</span>, <span class="number">0</span>] )</span><br><span class="line">            .domain( [<span class="number">0</span>, d3.max( histo, <span class="function"><span class="params">d</span>=&gt;</span>d.length ) ] ).nice();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> g = d3.select( <span class="string">&quot;svg&quot;</span> )</span><br><span class="line">            .append( <span class="string">&quot;g&quot;</span> ).attr( <span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate( 40,50 )&quot;</span> )</span><br><span class="line"></span><br><span class="line">        g.selectAll( <span class="string">&quot;rect&quot;</span> ).data( histo ).enter()</span><br><span class="line">            .append( <span class="string">&quot;rect&quot;</span> ).attr( <span class="string">&quot;width&quot;</span>, scX.bandwidth() )</span><br><span class="line">            .attr( <span class="string">&quot;x&quot;</span>, scX ).attr( <span class="string">&quot;y&quot;</span>, <span class="function"><span class="params">d</span>=&gt;</span>scY(d.length) )</span><br><span class="line">            .attr( <span class="string">&quot;height&quot;</span>, <span class="function"><span class="params">d</span> =&gt;</span> <span class="number">200</span>-scY(d.length) )</span><br><span class="line">            .attr( <span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span> ).attr( <span class="string">&quot;fill-opacity&quot;</span>, <span class="number">0.2</span> )</span><br><span class="line">            .attr( <span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;red&quot;</span> ).attr( <span class="string">&quot;stroke-width&quot;</span>, <span class="number">2</span> )</span><br><span class="line"></span><br><span class="line">        g.selectAll( <span class="string">&quot;text&quot;</span> ).data( histo ).enter().append( <span class="string">&quot;text&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;middle&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;font-family&quot;</span>, <span class="string">&quot;sans-serif&quot;</span> )</span><br><span class="line">            .attr( <span class="string">&quot;font-size&quot;</span>, <span class="number">14</span> )        </span><br><span class="line">            .attr( <span class="string">&quot;x&quot;</span>, <span class="function"><span class="params">d</span> =&gt;</span> scX(d)+<span class="number">0.5</span>*scX.bandwidth() )</span><br><span class="line">            .attr( <span class="string">&quot;y&quot;</span>, <span class="number">225</span> )</span><br><span class="line">            .text( <span class="function"><span class="params">d</span>=&gt;</span>(d.x0+d.x1)/<span class="number">2</span> );</span><br><span class="line"></span><br><span class="line">        g.append( <span class="string">&quot;g&quot;</span> ).call( d3.axisLeft(scY) );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo10_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        makeDemo10_1()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;575&quot;</span> <span class="attr">height</span>=<span class="string">&quot;325&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">background</span>&quot; <span class="attr">:</span> &#x27;<span class="attr">rgb</span>(<span class="attr">230</span>, <span class="attr">230</span>, <span class="attr">230</span>)&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo10_1;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/06/frontend-d3-010-tools/01.png" class="" title="01.png">]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>Histogram</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security Notes - 005 JWT</title>
    <url>/2022/02/10/backend-spring-security-005-jwt/</url>
    <content><![CDATA[<h1 id="認識-JWT"><a href="#認識-JWT" class="headerlink" title="認識 JWT"></a>認識 JWT</h1><p>請參考 <a href="https://jwt.io/introduction">JWT官網</a></p>
<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>準備一個前後端分離的專案，以便後續將使用 Session 機制，改寫成使用 JWT 方式<br><a href="https://github.com/pluto123/spring-security-exercise/tree/jwt">https://github.com/pluto123/spring-security-exercise/tree/jwt</a></p>
<h1 id="改寫思維"><a href="#改寫思維" class="headerlink" title="改寫思維"></a>改寫思維</h1><p>整個流程大概是寫一個自定義過濾器用來捕抓 TOKEN 進行驗證，如果沒有 TOKEN 則會進入帳密驗證程序，驗證成功則返回一個 TOKEN 給使用者，使用者下次請求時附上 TOKEN 就可以不需要帳密驗證，直接返回資源。</p>
<h1 id="引入-JWT-套件"><a href="#引入-JWT-套件" class="headerlink" title="引入 JWT 套件"></a>引入 JWT 套件</h1><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="製作-JWT-工具"><a href="#製作-JWT-工具" class="headerlink" title="製作 JWT 工具"></a>製作 JWT 工具</h1><p>建立一個工具類別，用來處理請求的驗證<br>src/main/java/tw/com/pluto/security/utils/JwtUtil.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtUtil.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLAIMS_KEY_USER_ROLES = <span class="string">&quot;userRoles&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret_key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expire_time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createToken</span><span class="params">(String userName, List&lt;String&gt; userRoles)</span></span>&#123;</span><br><span class="line">        Map &lt;String, Object&gt; claimMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        claimMap.put(CLAIMS_KEY_USER_ROLES, userRoles);</span><br><span class="line"></span><br><span class="line">        String token = Jwts.builder()</span><br><span class="line">                .setSubject(userName)  <span class="comment">// 把使用者名稱放入 TOKEN 的 subject 中，之後的請求返回 TOKEN 時，就可以依據該使用者名稱取得對應的權限</span></span><br><span class="line">                .addClaims(claimMap)  <span class="comment">// 也可把一些不敏感的資料記錄到 TOKEN 的 claim 區塊中，我這邊以使用權限作示範，實際生產環境中，通常還是會由資料庫中查詢權限</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date()) <span class="comment">// 簽發時間</span></span><br><span class="line">                .setExpiration(Date.from(Instant.now().plusSeconds(expireTime))) <span class="comment">// 過期時間</span></span><br><span class="line">                .signWith(</span><br><span class="line">                        Keys.hmacShaKeyFor(secretKey.getBytes(StandardCharsets.UTF_8)),</span><br><span class="line">                        SignatureAlgorithm.HS512)  <span class="comment">// 簽證的方式</span></span><br><span class="line">                .compact();</span><br><span class="line">        logger.debug(<span class="string">&quot;token : &#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Claims <span class="title">parseToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Claims claims = Jwts.parserBuilder()</span><br><span class="line">                .setSigningKey(Keys.hmacShaKeyFor(secretKey.getBytes(StandardCharsets.UTF_8)))</span><br><span class="line">                .build()</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();  <span class="comment">// 示範將 TOKEN 中的不敏感資料取出，以產生 TOKEN 時，填入的使用者權限為例</span></span><br><span class="line">        logger.debug(<span class="string">&quot;claims : &#123;&#125;&quot;</span>, claims);</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parseUserNameFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parseToken(token).getSubject();  <span class="comment">// 產生 TOKEN 時，是將使用者名稱填入的 subject 中，所以也由 subject 中取出使用者名稱</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SimpleGrantedAuthority&gt; <span class="title">parseUserAuthoritiesFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; userRoles = parseToken(token).get(CLAIMS_KEY_USER_ROLES, List.class);</span><br><span class="line">        logger.debug(<span class="string">&quot;userRoles : &#123;&#125;&quot;</span>, userRoles);</span><br><span class="line">        <span class="keyword">return</span> userRoles.stream().map(SimpleGrantedAuthority::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JWT-設定"><a href="#JWT-設定" class="headerlink" title="JWT 設定"></a>JWT 設定</h1><p>secret_key 的值要參考 HS512 演算法的規定，可參考 <a href="https://8gwifi.org/jwkfunctions.jsp">https://8gwifi.org/jwkfunctions.jsp</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">secret_key:</span> <span class="string">4Kkn7n4OIHhFvc2KeKzJbDiZRXeuiHBbdKxmJu2YheeYeLw6DMQU7ZZb_Q31GU3eXPFn5WRGptW2F-qNMmPc3A</span></span><br><span class="line">  <span class="attr">expire_time:</span> <span class="number">120</span></span><br></pre></td></tr></table></figure>

<h1 id="自定義-Filter"><a href="#自定義-Filter" class="headerlink" title="自定義 Filter"></a>自定義 Filter</h1><p>用來先過濾使用者是否有傳入 JWT，若有則取出 TOKEN 進行驗證<br>src/main/java/tw/com/pluto/security/JwtAuthFilter.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtAuthFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyUserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String token;</span><br><span class="line">            String bearer = request.getHeader(<span class="string">&quot;Authorization&quot;</span>);  <span class="comment">// 由請求的 Header 中取出 key 為 Authorization 的值</span></span><br><span class="line">            <span class="keyword">if</span> (bearer != <span class="keyword">null</span> &amp;&amp; !isBlankString(bearer) &amp;&amp; bearer.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;  <span class="comment">// 依據 Bearer (RFC 6750) 的定義，前面七個字元是 &quot;Bearer &quot;</span></span><br><span class="line">                token = bearer.substring(<span class="number">7</span>);  <span class="comment">// 只取 token</span></span><br><span class="line">                String userName = jwtUtil.parseUserNameFromToken(token); <span class="comment">// 取得使用者名稱</span></span><br><span class="line">                List&lt;SimpleGrantedAuthority&gt; userAuthorities = jwtUtil.parseUserAuthoritiesFromToken(token); <span class="comment">// 取得使用者授權</span></span><br><span class="line">                UserDetails userDetails = userDetailsService.loadUserByUsername(userName); <span class="comment">// 由使用者名稱取得詳細資訊</span></span><br><span class="line"></span><br><span class="line">                UsernamePasswordAuthenticationToken authAfterSuccessLogin = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, <span class="keyword">null</span>, userDetails.getAuthorities());</span><br><span class="line">                authAfterSuccessLogin.setDetails(<span class="keyword">new</span> WebAuthenticationDetailsSource().buildDetails(request));</span><br><span class="line">                SecurityContextHolder.getContext().setAuthentication(authAfterSuccessLogin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;  <span class="comment">// 若解析 token 過程中有錯誤則中斷請求</span></span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; errorMsg = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">            errorMsg.put(<span class="string">&quot;error&quot;</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">            objectMapper.writeValue(response.getWriter(), errorMsg);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若在這個過濾器運作正常(1. 沒 token；2. 有 token 且驗證成功)，則將請求交由下一個過濾器進行處理</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlankString</span><span class="params">(String bearer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bearer == <span class="keyword">null</span> || bearer.trim().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="驗證成功處理器"><a href="#驗證成功處理器" class="headerlink" title="驗證成功處理器"></a>驗證成功處理器</h1><p>當首次登入成功後，就需要產生一個 token 返回給使用者，接下來使用者就可以在請求中攜帶此 token 通過驗證。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; message = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; grantedAuthorityList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(GrantedAuthority grantedAuthority : authentication.getAuthorities()) &#123;  <span class="comment">// 取得權限</span></span><br><span class="line">            grantedAuthorityList.add(grantedAuthority.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        String token = jwtUtil.createToken(authentication.getName(), grantedAuthorityList);  <span class="comment">// 將權限附加到 TOKEN，此處只是做示範，在生產環境中並不需要</span></span><br><span class="line">        message.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;登入成功&quot;</span>);</span><br><span class="line">        message.put(<span class="string">&quot;token&quot;</span>, token);  <span class="comment">// 附加 token 傳給使用者</span></span><br><span class="line">        response.setStatus(HttpStatus.OK.value());</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        response.setCharacterEncoding(StandardCharsets.UTF_8.name());</span><br><span class="line">        objectMapper.writeValue(response.getWriter(), message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="配置過濾器"><a href="#配置過濾器" class="headerlink" title="配置過濾器"></a>配置過濾器</h1><p>關閉 Session 機制與設定 JWT 過濾器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtAuthFilter jwtAuthFilter;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.cors().and()  <span class="comment">// 允許跨域</span></span><br><span class="line">                .csrf().disable()  <span class="comment">// 關閉 CSRF</span></span><br><span class="line">                .authorizeRequests()  <span class="comment">// 設定權限</span></span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>).and()</span><br><span class="line">                .formLogin().permitAll()  <span class="comment">// 允許每個使用者都可訪問登入 URL</span></span><br><span class="line">                .successHandler(myAuthenticationSuccessHandler) <span class="comment">// 登入成功後的處理程序</span></span><br><span class="line">                .failureHandler(myAuthenticationFailureHandler).and() <span class="comment">// 登入失敗後的處理程序</span></span><br><span class="line">                .logout().permitAll()  <span class="comment">// 允許每個使用者都可訪問登出 URL</span></span><br><span class="line">                .logoutSuccessHandler(myLogoutSuccessHandler)  <span class="comment">// 登出成功後的處理程序</span></span><br><span class="line">                .deleteCookies(<span class="string">&quot;JSESSIONID&quot;</span>).and()  <span class="comment">// 刪除 SESSION Cookie</span></span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(myAccessDeniedHandler)  <span class="comment">// 無權限訪問的處理程序</span></span><br><span class="line">                .authenticationEntryPoint(unauthorizedEntryPoint).and() <span class="comment">// 未驗證時的處理程序</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); <span class="comment">// 使用 TOKEN 機制後就不需要用 session</span></span><br><span class="line">        http.addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);  <span class="comment">// 設定 JWT 過濾器，在帳密驗證前先看是否有 token</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h1><p>登入取得 token</p>
<img src="/2022/02/10/backend-spring-security-005-jwt/01.png" class="" title="01.png">
<p>使用 token 取得資料</p>
<img src="/2022/02/10/backend-spring-security-005-jwt/02.png" class="" title="02.png">]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>資料視覺化 - 001 資料對應視覺</title>
    <url>/2022/02/19/frontend-001-visualize/</url>
    <content><![CDATA[<h1 id="常用的視覺呈現"><a href="#常用的視覺呈現" class="headerlink" title="常用的視覺呈現"></a>常用的視覺呈現</h1><ul>
<li>位置</li>
<li>形狀</li>
<li>大小</li>
<li>顏色</li>
<li>線條粗細</li>
<li>線條種類<br>其中『形狀』與『線條種類』僅可表示離散型資料，如 : 貓、狗 … 等分類，其餘的不管是連續或離散型資料都可以表示．<br>另外，當資料是數值形式時，我們稱為定量；當是類別形式時，我們稱為定性．</li>
</ul>
<h1 id="座標系統"><a href="#座標系統" class="headerlink" title="座標系統"></a>座標系統</h1><p>常見的座標系統 : </p>
<ul>
<li>笛卡爾座標系統<br>軸上的網格間隔一般來說 x 與 y 軸幾乎都是均等的，除非有需要強調 y 軸上的變化，則會將 x 軸上的網格間隔壓縮，反之要強調 x 軸上的變化時，則會將 x 軸做一個拉伸．<br>如果 x 與 y 軸都是相同單位的話，則最好網格間隔都要相等．<br>另外當資料中有極端數據時，使用對數尺度比用線性尺度較容易理解．<br>但是數據中如果有 0 存在時，使用對數轉換會得到一個負無窮大值，所以我們可以採用平方根尺度解決．</li>
<li>極座標系統<br>對於週期性資料使用極座標呈現是十分實用的，另外是地理空間資料也是使用極座標較合適，不推薦使用笛卡爾座標系統．</li>
</ul>
<h1 id="顏色尺度"><a href="#顏色尺度" class="headerlink" title="顏色尺度"></a>顏色尺度</h1><ul>
<li>定性 (qualitative) 顏色尺度<br>用顏色來區分不具有順序的離散型數據，如 : 不同產品、國家 … 等．在顏色的選取上，每個顏色都必須明顯地不同，但是也不可以有某一顏色比其他顏色耀眼，而且也不應該讓人產生出具有順序的印象，如 : 一系列連續的顏色漸淡的組合．</li>
<li>順序 (sequential) 顏色尺度<br>如果要用顏色來代表連續數值的資料集，如 : 人口、溫度和收入 … 等，則我們應該選擇一組顏色，這組顏色之間可以表明資料間的大小、距離，並且要注意顏色是否讓人有均勻分佈的印象。</li>
<li>偏離 (diverging) 顏色尺度<br>而有些情境下，我們希望用顏色表現出基於某個數值，是正偏離還是負偏離，如 : 以 0 為基準點，當數值為正數時是一種顏色，當為負值時為另一種顏色，以供使用者可以很快地區分是正數還是負數．<br>此種尺度可以看成是兩個順序顏色尺度的組合，中間顏色較淺，兩側顏色較深，中間則是依序漸變顏色．</li>
<li>強調 (accent) 顏色尺度<br>當資料中有我們要強調的訊息時，將這些關鍵資訊使用強調色凸顯，所以會有一組基本色和一組強調色，基本色不可以引起使用者的注意，要盡量單調，甚至可以使用灰階顏色．<br>參考<a href="https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3">ColorBrewer</a></li>
</ul>
<h1 id="視覺化圖表目錄"><a href="#視覺化圖表目錄" class="headerlink" title="視覺化圖表目錄"></a>視覺化圖表目錄</h1><p>參考 : <a href="https://clauswilke.com/dataviz/directory-of-visualizations.html">https://clauswilke.com/dataviz/directory-of-visualizations.html</a></p>
]]></content>
      <categories>
        <category>Visualize</category>
      </categories>
      <tags>
        <tag>Data Type</tag>
      </tags>
  </entry>
  <entry>
    <title>資料視覺化 - 002 數量視覺化</title>
    <url>/2022/02/20/frontend-002-visualizing-amounts/</url>
    <content><![CDATA[<h1 id="長條圖"><a href="#長條圖" class="headerlink" title="長條圖"></a>長條圖</h1><p>假如我們對某些類別的數值大小感興趣，如 : 不同品牌的銷售量，則很適合用長條圖來呈現．<br>一般來說，長條的寬度最好大於類別名稱的寬度，但是有時候類別的名稱太長，導致長條的寬度也不美觀．一種解決的方式是將類別名稱旋轉一個角度，不過會造成閱讀上的困擾，比較好的作法是改成橫向的長條圖．<br>當長條圖的類別「不具有順序性」時，長條圖的排列最好依據數值的大小遞增/遞減排序．</p>
<h1 id="分組與堆疊長條圖"><a href="#分組與堆疊長條圖" class="headerlink" title="分組與堆疊長條圖"></a>分組與堆疊長條圖</h1><p>長條圖是針對單一個分類所繪製的，當我們需要顯示多個分類時，就可以用分組長條圖來表示，一般來說，除非是特別需要強調類別之間的比較，比如說 : 要比較同月份不同區域的銷售金額，強調的是不同區域的銷售金額的比較，則 x 軸為月份， y 軸為銷售金額，而將區域分組比較，但是分組內的類別個數也不宜太多，否則會容易混淆，失去比較意義．<br>另外如果分組內的類別個數過多，可能要在長條圖的顏色選擇上下功夫，選擇同色系漸變的色系是個不錯的選擇；或是將分組長條圖，分成數個長條子圖做並排呈現．<br>如果說分組的數據，堆疊起來具有意義時，才使用堆疊長條圖，比如說將同月份不同區域的銷售金額堆疊起來，則可以看出該月份該產品的總銷售金額，這樣的堆疊才有意義．此外若是 y 軸堆疊的數值，只是少量且簡單的數值，有時候不繪製 y 軸，直接在長條上標明數值，會比較清楚易懂．</p>
<h1 id="點圖和熱圖"><a href="#點圖和熱圖" class="headerlink" title="點圖和熱圖"></a>點圖和熱圖</h1><p>長條圖的一個重要限制就是必須由 0 開始，讓長條的長度與數值成比例．對於有些情境下，這樣可能會模糊焦點，比如說，每個月的銷售金額都差不多時，則長條圖繪製起來會沒差異，但是使用點圖在特定的某一小範圍做圖，則會放大看出數據之間的差異．跟長條圖一樣，如果數據的排序不影響圖表的解讀，最好依序遞增或遞減排列數值．<br>又比如說，要一年十二個月中，要比較每個月 20 種商品的銷售金額，如果我們使用分組長條圖的話，則會顯得資訊量太多，不容易讓人理解，此時我們可以使用熱圖方式，將銷售金額轉換成顏色，這樣就可以形成一個 12 X 20 的方格，再依據銷售金額對應的顏色，繪製到所屬的方格中做呈現，同理我們也需要依據情境進行必要的排序，以凸顯我們要強調的資訊．</p>
]]></content>
      <categories>
        <category>Visualize</category>
      </categories>
      <tags>
        <tag>Bar plots</tag>
        <tag>Grouped and stacked bars</tag>
        <tag>Dot plots and heatmaps</tag>
      </tags>
  </entry>
  <entry>
    <title>資料視覺化 - 002 分佈視覺化</title>
    <url>/2022/02/20/frontend-003-visualizing-distributions/</url>
    <content><![CDATA[<p>若想了解特定變數在資料集中的分佈狀況，比如說 : 來店內消費的客戶的年齡分佈</p>
<h1 id="單一變數的分佈視覺化"><a href="#單一變數的分佈視覺化" class="headerlink" title="單一變數的分佈視覺化"></a>單一變數的分佈視覺化</h1><h2 id="直方圖"><a href="#直方圖" class="headerlink" title="直方圖"></a>直方圖</h2><p>以想了解來店內消費的客人年齡分佈為例，首先需要將客人年齡分組，然後統計每個分組內年齡層的客人數量，就可以開始繪製直方圖．每一次都要嘗試不同的矩形寬度 (即分組的區間大小)，以便測試產生的直方圖是否真的可準確反應原始資料．一般來說，寬度太小，容易造成過於尖銳且雜亂的視覺感受，且資料的主要趨勢會被模糊，而寬度太大，則會造成某些局部細小的趨勢被模糊．</p>
<h2 id="密度圖"><a href="#密度圖" class="headerlink" title="密度圖"></a>密度圖</h2><p>在密度圖中，需要估算資料的基本機率分佈，估算的方法稱為核密度估算 (kernel desnsity estimation)，常用的有高斯核密度估算．<br>與直方圖相同，帶寬的大小會影響視覺的呈現，所以需要多嘗試不同的帶寬，另外對於大型資料集而言，比較可以呈現出可靠且豐富的資訊，對於資料量較小的資料集，可能會產生誤導．<br>核密度估算有一個缺點，就是在尾部的地方也會估算出值，但是這也估算區域的值是否合理就需要考量一下，如 : 年齡分佈有可能會算出負數區域也有一些分佈，但是在現實情況下是不合理的，應該在視覺呈現上剔除掉以免造成誤解．</p>
<h1 id="多個變數的分佈視覺化"><a href="#多個變數的分佈視覺化" class="headerlink" title="多個變數的分佈視覺化"></a>多個變數的分佈視覺化</h1><p>如果我們除了想要知道年齡分佈外，也想要了解在同分組的客人性別分布，則可以使用堆疊直方圖，但是堆疊直方圖有兩個缺點:</p>
<ol>
<li>上面堆疊的直方，不知道起點是由 0 開始，還是由下面的直方終點開始</li>
<li>因為是不同起始點，所以難以比較同分組的男女生人數到底誰多<br>要解決上述缺點，可以使用重疊直方圖，即男和女的直方起點都是由零開始，重疊的部分用另一種顏色表示，但是這樣會造成讓使用者以為有三個變數的堆疊直方，而使用重疊密度圖一樣有這個問題．<br>所以比較好的方式是分成兩個重疊密度圖，一個是全部與男性客人的重疊密度圖，另一個是全部與女性客人的重疊密度圖．<br>另一個比較準確地呈現出資料視覺化的方式是分別繪製男性和女性的直方圖，將其中一個向右旋轉 90 度，另一個向左旋轉 90 度，通常這種圖形被稱為 age pyramid，但是此圖在超過兩個以上就無法繪製．<br>超過兩個以上的分佈圖，還是以重疊密度圖的方式顯示較清楚．</li>
</ol>
<h1 id="經驗累積分佈函數"><a href="#經驗累積分佈函數" class="headerlink" title="經驗累積分佈函數"></a>經驗累積分佈函數</h1><p>以上的圖形 (直方圖/密度圖) 所呈現的結果，有很大程度上取決於使用者所選擇的參數 (寬度/帶寬)，這兩者都被視為對資料的解讀，而非直接的視覺化．為了要解決此問題，則有了經驗累積分佈函數 (ECDF) 和分位圖 (Q-Q 圖) 的產生．<br>比如說我們需要依據每家店的銷售額區分幾個等級，則我們首先將銷售額的多寡進行排序，x 軸為銷售額，y 軸為排名，由排名最低者開始繪製，依序繪製到最高者，每一家店的銷售額和排名決定一點，依據將每點連接起來成一個直線，<br>通常會針對 y 軸作正規化，讓 y 軸呈現的是累積頻率由 0 到 1 的範圍，做完正規化後，則 y 軸低於 0.25 以下的店家銷售額是多少，位於 0.5 的銷售額則是所有店家銷售額的中位數所在．<br>但是在有資料不平均的情況下，比如說大部分的鄉鎮人口都是比較稀少的，只有幾個鄉鎮人口數遠遠大於其他鄉鎮，此時不管用密度圖或是經驗累積分佈函數，則大部分都集中在 0 處，完全沒有可見的細部分佈呈現，所以遇到此狀況時，會將資料進行對數轉換．</p>
<h1 id="分位圖"><a href="#分位圖" class="headerlink" title="分位圖"></a>分位圖</h1><p>???</p>
<h1 id="箱型圖"><a href="#箱型圖" class="headerlink" title="箱型圖"></a>箱型圖</h1><p>在一些情況下，我們會希望了解在不同月份的銷售額變化，也想要同時呈現出不同分店的銷售額分佈，所以我們就可以用箱型圖來呈現．</p>
<h1 id="提琴圖"><a href="#提琴圖" class="headerlink" title="提琴圖"></a>提琴圖</h1><p>可替換箱型圖，以得到更細緻的資料視覺呈現，尤其是當有雙峰出現時，是箱型圖所無法呈現的．因為提琴圖是從密度估計而來的，所以資料量較少時，可能使無資料的地方看起來有資料，或者實際上非常稀疏的資料集，看起來很密集．<br>為了解決提琴圖因為資料數量較少時的缺點，我們可以直接將所有單個資料繪製成點，稱為帶狀圖 (strip chart)，只要確認沒有太多的點是重疊的，這樣的帶狀圖基本上是可以良好地表達出資料視覺．如果有太多點重疊在一起，則在繪製上在 x 維度上隨機添加一些微小的數值，以便讓點可以散開一些，此種技巧稱為抖動 (jittering)．<br>另外也有結合提琴圖與帶狀圖的 Sina 圖 (Sina plot) 可使用．</p>
<h1 id="脊線圖"><a href="#脊線圖" class="headerlink" title="脊線圖"></a>脊線圖</h1><p>如果你想呈現出隨著時間推移的分佈趨勢，此圖表的目的是為了比較個分組的密度形狀和相對高度．也可以用來比要兩種趨勢分佈，比如說將兩家分店的銷售額依據月份分別做成兩個脊線圖並且將其重疊在一個圖表中，就可以很清楚地反應出兩家店每月的銷售額的分佈變化．</p>
]]></content>
      <categories>
        <category>Visualize</category>
      </categories>
      <tags>
        <tag>Grouped and stacked bars</tag>
        <tag>Dot plots and heatmaps</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Error response from daemon exec &quot;nvidia-container-runtime-hook&quot;</title>
    <url>/2022/04/19/docker-nvidia-container-runtime-hook/</url>
    <content><![CDATA[<h1 id="啟動具有使用-GPU-的容器時，出現-docker-Error-response-from-daemon-exec-“nvidia-container-runtime-hook”-executable-file-not-found-in-PATH"><a href="#啟動具有使用-GPU-的容器時，出現-docker-Error-response-from-daemon-exec-“nvidia-container-runtime-hook”-executable-file-not-found-in-PATH" class="headerlink" title="啟動具有使用 GPU 的容器時，出現 docker: Error response from daemon: exec: “nvidia-container-runtime-hook”: executable file not found in $PATH."></a>啟動具有使用 GPU 的容器時，出現 docker: Error response from daemon: exec: “nvidia-container-runtime-hook”: executable file not found in $PATH.</h1><ul>
<li>執行<br>  <code>$ docker run --gpus all nvidia/cuda:10.0-base nvidia-smi</code></li>
<li>出現錯誤  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker: Error response from daemon: exec: &quot;nvidia-container-runtime-hook&quot;: executable file not found in $PATH.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled </span><br></pre></td></tr></table></figure></li>
<li>解決方法<ol>
<li><code>$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</code></li>
<li><code>$ curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</code></li>
<li><code>$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</code></li>
<li><code>$ sudo apt-get update &amp;&amp; sudo apt-get install -y nvidia-container-toolkit</code></li>
<li><code>$ sudo systemctl restart docker</code></li>
<li><code>$ docker run --gpus all nvidia/cuda:10.0-base nvidia-smi</code></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>nvidia-container-runtime-hook</tag>
      </tags>
  </entry>
  <entry>
    <title>Nvidia-001-version-mismatch</title>
    <url>/2022/04/19/nvidia-001-version-mismatch/</url>
    <content><![CDATA[<h1 id="Error-Message-Failed-to-initialize-NVML-Driver-library-version-mismatch"><a href="#Error-Message-Failed-to-initialize-NVML-Driver-library-version-mismatch" class="headerlink" title="Error Message : Failed to initialize NVML: Driver/library version mismatch"></a>Error Message : Failed to initialize NVML: Driver/library version mismatch</h1><ul>
<li><p>原因<br>  NVIDIA 內核驅動版本與系統驅動不一致</p>
</li>
<li><p>解決方法</p>
<ol>
<li>卸載驅動<br> <code>$ sudo apt-get purge nvidia*</code></li>
<li>查找可用驅動版本<br> <code>$ ubuntu-drivers devices</code> <img src="/2022/04/19/nvidia-001-version-mismatch/01.png" class="" title="01.png"></li>
<li>查找內核版本<br> <code>$ cat /proc/driver/nvidia/version</code> <img src="/2022/04/19/nvidia-001-version-mismatch/02.png" class="" title="02.png"></li>
<li>安裝驅動<br> <code>$ sudo apt-get install nvidia-driver-470 nvidia-settings nvidia-prime</code></li>
<li>檢驗結果<br> <code>$ nvidia-smi</code> <img src="/2022/04/19/nvidia-001-version-mismatch/03.png" class="" title="03.png"></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Nvidia</category>
      </categories>
      <tags>
        <tag>version mismatch</tag>
      </tags>
  </entry>
</search>
