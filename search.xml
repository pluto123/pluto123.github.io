<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>個人部落格工具 - Hexo</title>
    <url>/2021/10/10/tools-blog-hexo-install/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為之前都是使用 Word 或 Power Point 方式整理筆記，但是隨著筆記越來越多，當又出現之前踩到的雷時，想要去找到之前的筆記變得越來越困難，雖然中間嘗試著用目錄進行筆記分類，但是有些筆記內容是屬於多個分類的，導致在分類上難以進行一個很明確的分類．<br>再者因為硬碟的損毀導致部份筆記遺失，所以一直想要將筆記放在網路上，一方面做為備份，另一方面也可以隨時隨地查閱筆記．<br>今天在 Youtube 看教學時，Youtube 突然推薦了一個關於 Ｈexo 搭配 Github 建立一個 blog 的影片引起我的注意，看完之後雖然不完全是我心目中記錄筆記的方式，但是也相去不遠了，所以才有這篇文章的產生．</p>
<span id="more"></span>
<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><h2 id="安裝-Nodej"><a href="#安裝-Nodej" class="headerlink" title="安裝 Nodej"></a>安裝 Nodej</h2><img src="/2021/10/10/tools-blog-hexo-install/download_nodejs.png" class="" title="download_nodejs">
<p>下載網址 : <a href="https://nodejs.org/zh-tw/download/">Nodejs</a><br>安裝方式 : 無腦安裝法</p>
<ol>
<li>點擊下載的 nodejs<img src="/2021/10/10/tools-blog-hexo-install/double_click_nodejs.png" class="" title="double_click_nodejs"></li>
<li>進行安裝<img src="/2021/10/10/tools-blog-hexo-install/install_nodejs.png" class="" title="install_nodejs"></li>
<li>完成安裝<img src="/2021/10/10/tools-blog-hexo-install/install_nodejs_done.png" class="" title="install_nodejs_done"></li>
</ol>
<h2 id="安裝-Git"><a href="#安裝-Git" class="headerlink" title="安裝 Git"></a>安裝 Git</h2><img src="/2021/10/10/tools-blog-hexo-install/download_git.png" class="" title="download_git">
<p>下載網址 : <a href="https://git-scm.com/downloads">Git</a><br>安裝方式 : 無腦安裝法</p>
<ol>
<li>點擊下載的 git<img src="/2021/10/10/tools-blog-hexo-install/double_click_git.png" class="" title="double_click_git"></li>
<li>進行安裝<img src="/2021/10/10/tools-blog-hexo-install/install_git.png" class="" title="install_git"></li>
<li>完成安裝<img src="/2021/10/10/tools-blog-hexo-install/install_git_done.png" class="" title="install_git_done"></li>
</ol>
<h1 id="安裝-Hexo-CLI"><a href="#安裝-Hexo-CLI" class="headerlink" title="安裝 Hexo CLI"></a>安裝 Hexo CLI</h1><p>輸入底下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<h1 id="建立-Blog-目錄並初始化"><a href="#建立-Blog-目錄並初始化" class="headerlink" title="建立 Blog 目錄並初始化"></a>建立 Blog 目錄並初始化</h1><p>建立一個目錄放置 blog<br>我是建立一個 Blog 目錄，進入 Blog 目錄中，並進行初始化．<br>命令如下 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir Blog</span><br><span class="line">$ <span class="built_in">cd</span> Blog</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<ul>
<li>建立 Blog 目錄<img src="/2021/10/10/tools-blog-hexo-install/create_blog.png" class="" title="create_blog"></li>
<li>初始化<img src="/2021/10/10/tools-blog-hexo-install/init_hexo.png" class="" title="init_hexo"></li>
</ul>
<h1 id="將-Blog-目錄下的東西上傳到-GitHub-Optional"><a href="#將-Blog-目錄下的東西上傳到-GitHub-Optional" class="headerlink" title="將 Blog 目錄下的東西上傳到 GitHub (Optional)"></a>將 Blog 目錄下的東西上傳到 GitHub (Optional)</h1><p>因為 Hexo 在部署上會先自動產生文章相關的網頁並進行部署，但是對於外掛套件、主題安裝和修改設定檔是不會一起部署到 GitHub 的，對於曾經因為沒有版本控制而吃上大虧的我，對於在沒版控的情況下進行修改，著實讓我感到不安．<br>這部分進行的步驟跟一般專案將程式碼上 GitHub 一樣，所以我就不詳述了．</p>
<ol>
<li>在 GitHub 上建立一個 Repository</li>
<li>將 Blog 目錄下的東西全部上傳到 GitHub</li>
</ol>
<h1 id="安裝部署套件"><a href="#安裝部署套件" class="headerlink" title="安裝部署套件"></a>安裝部署套件</h1><p>此套件是用來將產生的 blog 靜態網頁部署到 GitHub 上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/10/tools-blog-hexo-install/install_hexo_git_package.png" class="" title="install_hexo_git_package">

<h1 id="部署網頁空間"><a href="#部署網頁空間" class="headerlink" title="部署網頁空間"></a>部署網頁空間</h1><p>GitHub 提供了一個網頁空間，因為免費的，所以我就拿它來當 blog 使用<br>網路上有許多教學，這邊就不再詳述，可以參考底下網站的教學 :<br><a href="https://pages.github.com/">GitHub Pages</a></p>
<h1 id="部署設定"><a href="#部署設定" class="headerlink" title="部署設定"></a>部署設定</h1><p>修改 _config.yml 檔案中的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: your_repository (ex: https://github.com/username/username.github.io.git，其中 username 需要替換成自己的)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h1 id="進行部署"><a href="#進行部署" class="headerlink" title="進行部署"></a>進行部署</h1><p>使用以下命令進行部署 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Theme</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加關鍵字搜尋</title>
    <url>/2021/10/16/tools-blog-hexo-next-search/</url>
    <content><![CDATA[<h1 id="安裝-hexo-generator-searchdb"><a href="#安裝-hexo-generator-searchdb" class="headerlink" title="安裝 hexo-generator-searchdb"></a>安裝 hexo-generator-searchdb</h1><p>在終端機上輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-search/01.png" class="" title="install hexo-generator-searchdb">
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes/next/_config.yml<br>將 local_search 的 enable 設為 true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-search/02.png" class="" title="enable local_search">

<h1 id="效果呈現"><a href="#效果呈現" class="headerlink" title="效果呈現"></a>效果呈現</h1><img src="/2021/10/16/tools-blog-hexo-next-search/03.png" class="" title="result">]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加字數與閱讀時間統計</title>
    <url>/2021/10/16/tools-blog-hexo-next-symbol-count/</url>
    <content><![CDATA[<h1 id="安裝-hexo-symbols-count-time"><a href="#安裝-hexo-symbols-count-time" class="headerlink" title="安裝 hexo-symbols-count-time"></a>安裝 hexo-symbols-count-time</h1><p>在終端機上輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-symbol-count/01.png" class="" title="install hexo-symbols-count-time">
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes/next/_config.yml<br>將 item_text_total 設為 true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-symbol-count/02.png" class="" title="enable item_text_total">

<h1 id="效果呈現"><a href="#效果呈現" class="headerlink" title="效果呈現"></a>效果呈現</h1><img src="/2021/10/16/tools-blog-hexo-next-symbol-count/03.png" class="" title="result">]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 001 Hello React</title>
    <url>/2021/10/17/frontend-react-001-hello-react/</url>
    <content><![CDATA[<h1 id="使用-VS-Code-建立一個專案"><a href="#使用-VS-Code-建立一個專案" class="headerlink" title="使用 VS Code 建立一個專案"></a>使用 VS Code 建立一個專案</h1><p>打開 VS Code 並點選 Open Folder…</p>
<img src="/2021/10/17/frontend-react-001-hello-react/01.png" class="" title="click Open-Folder">
<span id="more"></span>
<p>建立一個工作目錄 React</p>
<img src="/2021/10/17/frontend-react-001-hello-react/02.png" class="" title="create a folder React">
<p>建立完成</p>
<img src="/2021/10/17/frontend-react-001-hello-react/03.png" class="" title="create a React project">

<h1 id="建立一個實驗目錄並建立一個-html-檔案"><a href="#建立一個實驗目錄並建立一個-html-檔案" class="headerlink" title="建立一個實驗目錄並建立一個 html 檔案"></a>建立一個實驗目錄並建立一個 html 檔案</h1><p>在 React 目錄中按下滑鼠右鍵，點選 New Folder 並建立 React 01 目錄</p>
<img src="/2021/10/17/frontend-react-001-hello-react/04.png" class="" title="create a folder for experiment 1">
<p>在 React 01 上按下滑鼠右鍵，點選 New File 建立 hello_react.html</p>
<img src="/2021/10/17/frontend-react-001-hello-react/05.png" class="" title="create a file">
<p>最終目錄結構如下:</p>
<img src="/2021/10/17/frontend-react-001-hello-react/06.png" class="" title="folder and file result">

<h1 id="引入相關設定並展示結果"><a href="#引入相關設定並展示結果" class="headerlink" title="引入相關設定並展示結果"></a>引入相關設定並展示結果</h1><p>編輯 hello_react.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_reactjs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 準備好一個容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心庫 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom，用於 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel，用於將 jsx 轉為 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        此處 type 一定要設為 text/babel</span></span><br><span class="line"><span class="comment">        這樣 babel 才知道要將此處的 jsx 編譯成 js</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>  <span class="comment">// 此處一定不要寫引號，因為不是字串</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">        ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意 : </p>
<ol>
<li>三個 js 包的引入順序</li>
<li>在使用 jsx 時，一定用宣告成 <code>&lt;script type=&quot;text/babel&quot;&gt;&lt;/script&gt;</code></li>
<li>此為開始學習 Ract 的最簡單方式，之後還會介紹比較正式複雜的方式</li>
</ol>
<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><p>首先在 VS Code 中需安裝延伸套件 Live Server</p>
<img src="/2021/10/17/frontend-react-001-hello-react/07.png" class="" title="install Live Server">
<p>在該檔案上按下滑鼠右鍵點選 Open with Live Server</p>
<img src="/2021/10/17/frontend-react-001-hello-react/08.png" class="" title="Open with Live Server">
<p>最終在瀏覽器上呈現出以下畫面:</p>
<img src="/2021/10/17/frontend-react-001-hello-react/09.png" class="" title="result in browser">

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://reactjs.org/docs/add-react-to-a-website.html">https://reactjs.org/docs/add-react-to-a-website.html</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 002 Jsx 的一些規則</title>
    <url>/2021/10/19/frontend-react-002-jsx-rule/</url>
    <content><![CDATA[<ol>
<li><p>定義虛擬 DOM 時，不要有引號<br>創建虛擬 DOM 時，注意不會將標籤內容加上引號<br>即不需要將下圖黃色區塊額外加上引號</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/01.png" class="" title="create virtual DOM NG">
<p>正確的方式是可以用 <code>&#123; &#125;</code> 將標籤框住</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/02.png" class="" title="create virtual DOM OK">
<span id="more"></span></li>
<li><p>標籤中混入 js 表達式時，要用 <code>&#123; &#125;</code><br>比如說在 <code>&lt;h1&gt;&lt;/h1&gt;</code>內容要由變數 myData 中取得，<br>則需要寫成底下圖片中的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/03.png" class="" title="js"></li>
<li><p>樣式的類名指定不要用 class，要用 className<br>錯誤的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/04.png" class="" title="class"></li>
</ol>
<p>正確的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/05.png" class="" title="className">

<ol start="4">
<li><p>內聯樣式要用 <code>style=&#123;&#123;key:value&#125;&#125;</code> 形式書寫<br>如下所示 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/06.png" class="" title="style"></li>
<li><p>虛擬 DOM 必須只有一個根標籤<br>不能存在兩個根標籤</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/07.png" class="" title="two roots"></li>
</ol>
<p>可以用 <code>&lt;div&gt;&lt;/div&gt;</code> 包裹住</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/08.png" class="" title="the root">

<ol start="6">
<li><p>標籤必須閉合<br>即像在 html 中 <code>&lt;input type=&quot;text&quot;&gt;</code> 的寫法是可以的，<br>但是在 jsx 中必須要有結束標籤 <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code> 或 <code>&lt;input type=&quot;text&quot;/&gt;</code></p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/09.png" class="" title="the close"></li>
<li><p>標籤首字母的意義<br>(1) 若小寫字母開頭，則將改標籤轉為 html 同名元素．若 html 中無該標籤對應的同名元素則報錯．<br>(2) 若大寫字母開頭，React 就會去渲染對應的組件，若組件沒有定義則會報錯．</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 003 jsx 中只能混入 js 表達式</title>
    <url>/2021/10/19/frontend-react-003-jsx-tag/</url>
    <content><![CDATA[<p>考量底下的代碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若我們想用一個模擬數據 <code>[&#39;Angular&#39;, &#39;React&#39;, &#39;Vue&#39;]</code><br>用來替換掉代碼中寫死的部分，將代碼修改成 :</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#123;data&#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>則在頁面呈現的結果如下 : </p>
<img src="/2021/10/19/frontend-react-003-jsx-tag/01.png" class="" title="wrong">
<p>會發現 React 會把 <code>[&#39;Angular&#39;, &#39;React&#39;, &#39;Vue&#39;]</code> 數據一個一個讀出<br>此時若能在裡面寫一個 for 語句將所有的資料一個一個讀出來，如下所示 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                for (var i = 0; i &lt; data.length; i++) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>data[i]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面結果會出現語法錯誤，因為此處只能寫 js 表達式，不可以寫 js 語句(代碼)</p>
<ol>
<li>表達式 :<br> (1) 變數 a<br> (2) a+b<br> (3) demo(1)<br> (4) arr.map()<br> (5) function test() {}</li>
<li>語句<br> (1) if 語句<br> (2) for 語句<br> (3) switch 語句</li>
</ol>
<p>所以用另一個方法 : 使用 arr.map()</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                data.map((item, index)=&gt;&#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最後結果如下圖所示 :</p>
<img src="/2021/10/19/frontend-react-003-jsx-tag/02.png" class="" title="correct">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 004 使用函數建立組件</title>
    <url>/2021/10/19/frontend-react-004-create-component-by-function/</url>
    <content><![CDATA[<ol>
<li><p>創建一個函數<br>底下是錯誤的寫法 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color=#FF0000>注意</font> : 首字母必須大寫，否則在標籤引用時會出錯，<br>因為 React 對小寫開頭的標籤會直接對應去找 html 語法中有提供的標籤．</p>
<span id="more"></span>
<p>正確的寫法如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>渲染到頁面上<br>錯誤的寫法 1 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(Demo, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>錯誤的寫法 2 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(&lt;Demo&gt;, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color=#FF0000>注意</font> : 要使用標籤形式，且必須是要閉合的<br>正確的寫法如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><img src="/2021/10/19/frontend-react-004-create-component-by-function/01.png" class="" title="result">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加訪客與訪問量統計</title>
    <url>/2021/10/19/tools-blog-hexo-next-statistics-visitor/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在網路上找了一下有關於為 Hexo 添加訪客與訪問量統計，發現蠻混亂的，<br>一下子說 busuanzi 有問題不可以用，也有人說要修改一些東西，結果我修改完也沒有效果，<br>所以我這一篇就是來記錄一下我最後找到並是成功的方法。<br>我是參考這篇<a href="https://www.lcd1024.xyz/2020/05/31/busuanzi/">文章</a></p>
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes\next_config.yml，確認底下的設定是有關閉的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>設定 valine</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>

<h1 id="在頁腳添加統計"><a href="#在頁腳添加統計" class="headerlink" title="在頁腳添加統計"></a>在頁腳添加統計</h1><p>打開 themes\next\layout_partials\footer.swig，<br>在 <code>&#123;%- endif %&#125;</code> 和 <code>&#123;&#123;- next_inject('footer') &#125;&#125;</code> 之間添加底下代碼 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>總訪客：&amp;nbsp<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>總訪問量：&amp;nbsp<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/01.png" class="" title="modify footer.swig">

<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><p>若是在本地端上看到的會是底下情況 :</p>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/02.png" class="" title="local">

<p>放到 GitHub 後才會有作用 :</p>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/03.png" class="" title="server">

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.lcd1024.xyz/2020/05/31/busuanzi/">Lcd1024|上善若水</a></p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 005 使用類別建立組件</title>
    <url>/2021/10/20/frontend-react-005-create-component-by-class/</url>
    <content><![CDATA[<h1 id="創建一個類別繼承-React-Component"><a href="#創建一個類別繼承-React-Component" class="headerlink" title="創建一個類別繼承 React.Component"></a>創建一個類別繼承 React.Component</h1><p><font color=#FF0000>注意 :</font></p>
<ol>
<li>組件類別必須繼承 React.Component</li>
<li>必須定義 render() </li>
<li>render() 必須有返回值</li>
</ol>
<p>底下是一個簡單的示例 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建類式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用類定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 006 初始化並使用 state</title>
    <url>/2021/10/20/frontend-react-006-use-state/</url>
    <content><![CDATA[<h1 id="組件的三大屬性-state"><a href="#組件的三大屬性-state" class="headerlink" title="組件的三大屬性 - state"></a>組件的三大屬性 - state</h1><p>React 透過 state 屬性的資訊，改變頁面呈現結果<br>首先寫一個簡單的類別組件如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建類式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣炎熱<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>觀察一下 Console 輸出 :</p>
<img src="/2021/10/20/frontend-react-006-use-state/01.png" class="" title="console1">
<p>可以發現 React 已經有建立好 state 屬性了</p>
<span id="more"></span>

<h1 id="state-賦值"><a href="#state-賦值" class="headerlink" title="state 賦值"></a>state 賦值</h1><p>一般自己寫的 js 類別可以利用以下方式達到讓繼承的類別，<br>可以在創建時將值賦給新的屬性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;steven&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>
<p>但是在 React 中新增物件是由 React 所控制的，即是由 React 調用 new 方法創建物件<br>所以無法由外部傳值給 state，但是可以通過創建方法 constructor() 對 state 賦值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;this.state.isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>賦值成功</p>
<img src="/2021/10/20/frontend-react-006-use-state/02.png" class="" title="console2">

<p>另一種寫法取值 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 007 原生事件綁定</title>
    <url>/2021/10/21/frontend-react-007-binding-evvent/</url>
    <content><![CDATA[<p>推薦在標籤上進行原生事件綁定，代碼如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;標題被點擊了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意 :</font></p>
<ol>
<li>一般 js 在標籤中設定點擊事件是使用 onclick，但是 React 中需使用 onClick</li>
<li>在設定 onClick 時，必須要用這樣的格式 :<br>&emsp;onClick={function}<br>底下的寫法都是有問題的 :<br>&emsp;onClick=function<br>&emsp;onClick={function()}</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 008 透過事件改變 state</title>
    <url>/2021/10/21/frontend-react-008-change-state-by-event/</url>
    <content><![CDATA[<p>要如何透過點擊事件達到改 state 的值，讓瀏覽器重新渲染畫面？<br>考慮底下代碼，在點擊事件 myClick() 中讀取 state :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在事件中取得 state</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/01.png" class="" title="error1">
<p>這是因為 myClick() 在 Weather 類別之外，所以根本讀不到 state，<br>而此處的 this，在嚴格模式下是 undefine，正常模式下指向 window，所以會出錯誤</p>
<p>將 myClick() 移到 Weather 類別內，如下代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// myClick() 放在 Weather 原型對象上(只有一份)，以提供實例使用</span></span><br><span class="line">            <span class="comment">// 必須通過 Weather 實例去調用 myClick() 時，myClick() 內的 this 才是 Weather 實例</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/02.png" class="" title="error2">
<p>因為在<code>&lt;h2 onClick=&#123;myClick&#125;&gt;</code>，只有 Weather 實例才可以調用 myClick()<br>所以將<code>&lt;h2 onClick=&#123;myClick&#125;&gt;</code>改成<code>&lt;h2 onClick=&#123;this.myClick&#125;&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// myClick() 放在 Weather 原型對象上(只有一份)，以提供實例使用</span></span><br><span class="line">            <span class="comment">// 必須通過 Weather 實例去調用 myClick() 時，myClick() 內的 this 才是 Weather 實例</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/03.png" class="" title="error3">
<p>一開始可以顯示正常，但是一點擊後就出現錯誤了．<br>因為<code>&lt;h2 onClick=&#123;this.myClick&#125;&gt;</code>只是賦值給 onClick，<br>等到點擊 h2 標籤時，是直接調用被賦值的方法 myClick()，<br>可以想做是 window 調用 myClick() 方法，而此方法的本體是指向 Weather 的 myClick()，<br>所以在 myClick() 中的 this 其實是 window，而 window 中並沒有 state 屬性</p>
<h1 id="可以正確地在回調函數中取得-state-的寫法"><a href="#可以正確地在回調函數中取得-state-的寫法" class="headerlink" title="可以正確地在回調函數中取得 state 的寫法"></a>可以正確地在回調函數中取得 state 的寫法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">            <span class="built_in">this</span>.changeWeather = <span class="built_in">this</span>.myClick.bind(<span class="built_in">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>輸出結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/04.png" class="" title="correct">

<h1 id="進行-state-內容的更改"><a href="#進行-state-內容的更改" class="headerlink" title="進行 state 內容的更改"></a>進行 state 內容的更改</h1><p>直接在 myClick() 中更改 state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">    <span class="built_in">this</span>.state.isHot = !isHot</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.isHot)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可是輸出結果，console 中有改變，但是頁面卻沒有變化</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/05.png" class="" title="change state 1">
<p>這是因為 React 並不允許直接更改 state 的值．<br>打開 react devlopment tool 可以發現，不管怎樣點擊<code>&lt;h2&gt;</code>標籤，<br>在開發者工具中的 state 都不會改變</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/06.png" class="" title="devlopment tool">
<h2 id="注意"><a href="#注意" class="headerlink" title="注意 :"></a><font color="#FF000">注意 :</font></h2><p>狀態必須透過 setState() 進行更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="最後精簡總結"><a href="#最後精簡總結" class="headerlink" title="最後精簡總結"></a>最後精簡總結</h1><ol>
<li>更改 state 初始方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
改成<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="comment">//this.state = &#123;isHot:false&#125;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改事件回調方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">this</span>.changeWeather = <span class="built_in">this</span>.myClick.bind(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
改成<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//this.changeWeather = this.myClick.bind(this)</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*myClick() &#123;</span></span><br><span class="line"><span class="comment">        const isHot = this.state.isHot</span></span><br><span class="line"><span class="comment">        this.setState(&#123;isHot:!isHot&#125;)</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font color="#FF0000">注意 :</font><br>一定要用匿名函數的方式對回調函數做設定</li>
</ol>
<h2 id="最終的代碼"><a href="#最終的代碼" class="headerlink" title="最終的代碼"></a>最終的代碼</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 初始化 state</span></span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 重新編寫</span></span><br><span class="line">        changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 009 props 基礎使用</title>
    <url>/2021/10/21/frontend-react-009-props-basic/</url>
    <content><![CDATA[<p>主要的目的是讓我們可以在建構實例時，由外部傳遞一些資訊給該實例使用，而且是唯讀的</p>
<h1 id="一般傳遞方式"><a href="#一般傳遞方式" class="headerlink" title="一般傳遞方式"></a>一般傳遞方式</h1><p>就是在<code>&lt;People/&gt;</code>內改成<code>&lt;People name=&quot;Steven&quot; sex=&quot;Man&quot; age=&quot;18&quot;/&gt;</code>，之後在實例中就可以透過 props 取的，如以下的寫法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;this.props.sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> <span class="attr">name</span>=<span class="string">&quot;Steven&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;Man&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>呈現畫面</p>
<img src="/2021/10/21/frontend-react-009-props-basic/01.png" class="" title="result">
<span id="more"></span>

<h1 id="批量傳遞方式"><a href="#批量傳遞方式" class="headerlink" title="批量傳遞方式"></a>批量傳遞方式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;Steven&quot;</span>, <span class="attr">sex</span>:<span class="string">&quot;Man&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 010 對組件的標籤屬性進行檢查與限制</title>
    <url>/2021/10/21/frontend-react-010-check-props/</url>
    <content><![CDATA[<p>首先引入 prop-types.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.0/prop-types.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>編寫限制條件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    People.propTypes = &#123;</span><br><span class="line">        <span class="attr">name</span>: PropTypes.string</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="number">12</span>, <span class="attr">sex</span>:<span class="string">&quot;Man&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>因為上述代碼會將檢查<code>name</code>必須是字串，所以當傳入數值時會發出警告</p>
<img src="/2021/10/21/frontend-react-010-check-props/01.png" class="" title="warning">

<p>若要限制不為空，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/02.png" class="" title="check null">

<p>若要設定預設值，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">&#125;</span><br><span class="line">People.defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/03.png" class="" title="default value">

<p>若要設定 age 為數值，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">    <span class="attr">age</span>: PropTypes.number</span><br><span class="line">&#125;</span><br><span class="line">People.defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/04.png" class="" title="check number">

<p>若要限制傳入的為函數，注意要用<code>func</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">    <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">    <span class="attr">say</span>: PropTypes.func</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/05.png" class="" title="check function">

<h1 id="精簡代碼"><a href="#精簡代碼" class="headerlink" title="精簡代碼"></a>精簡代碼</h1><p>將 propTypes 和 defaultProps 都放置於類中<br><font color="#FF000">注意 :</font><br>不需要用 <code>People.propTypes</code> 方式，則是用 <code>static propTypes</code><br><font color="#FF000">static 必須要寫</font>，否則就會變成對實例添加一個屬性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">            <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">            <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">            <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">            <span class="attr">say</span>: PropTypes.func</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">say</span>:<span class="string">&quot;hello&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 011 函數式組件使用 props</title>
    <url>/2021/10/21/frontend-react-011-functional-component-use-props/</url>
    <content><![CDATA[<p>透過函數可以傳參數的特性，React 也會將標籤屬性包成 props 傳給函數．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, sex, age&#125; = props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    People.propTypes = &#123;</span><br><span class="line">        <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">        <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">        <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">        <span class="attr">say</span>: PropTypes.func</span><br><span class="line">    &#125;</span><br><span class="line">    People.defaultProps = &#123;</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">say</span>:<span class="string">&quot;hello&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 012 字串 ref 的使用</title>
    <url>/2021/10/22/frontend-react-012-string-ref-use/</url>
    <content><![CDATA[<p>官方不推薦使用，因為有其效率問題且未來版本會移除．考慮以前要從<code>&lt;input&gt;</code>中取得資料，會類似底下的寫法 : </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;input id=<span class="string">&quot;input1&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> value = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input1&quot;</span>).value;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>寫 React 雖然也可以用這樣的方式取得數據，但是提供另一種方式取數據，如底下的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span>.refs</span><br><span class="line">            alert(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.refs.input2.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>利用標籤上的屬性<code>ref</code> React 會幫我把這些元素，以鍵值對的方式收集到```refs``中</p>
<img src="/2021/10/22/frontend-react-012-string-ref-use/01.png" class="" title="refs">
<p>然後就可以在實例中使用<code>this.refs.input1.value</code>方式取值</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 013 回調函數形式 ref 的使用</title>
    <url>/2021/10/22/frontend-react-013-callback-ref-use/</url>
    <content><![CDATA[<h1 id="內聯方式回調函數"><a href="#內聯方式回調函數" class="headerlink" title="內聯方式回調函數"></a>內聯方式回調函數</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;console.log(input1Element);&#125;&#125; type=&quot;text&quot; value=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>如果在標籤上的<code>ref</code>設定一個回調函數，則傳入的參數就是元素自身．</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/01.png" class="" title="test callback ref">

<p>所以我們可以透過將自身元素<code>input1Element</code>設給實例中的一個屬性<code>input1</code>，接著在回調函數<code>myClick()</code>中，透過屬性<code>input1</code>就可以取得給該元素．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;this.input1=input1Element;&#125;&#125; type=&quot;text&quot; defaultValue=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/02.png" class="" title="get value by callback ref">

<p>精簡代碼</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function">(<span class="params">input1Element</span>) =&gt;</span> &#123;<span class="built_in">this</span>.input1=input1Element;&#125;&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>因為函數參數只有一個，且函數主體代碼只有一個，所以括號可省落寫成 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function"><span class="params">input1Element</span> =&gt;</span> <span class="built_in">this</span>.input1=input1Element&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>因為<code>input1Element</code>幾乎不會用到，可以再省略 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">this</span>.input1=c&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="每次更新時會呼叫兩次"><a href="#每次更新時會呼叫兩次" class="headerlink" title="每次更新時會呼叫兩次"></a>每次更新時會呼叫兩次</h2><p>以底下的例子說明 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        changeWeather = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                        this.input1=input1Element;</span></span><br><span class="line"><span class="xml">                        console.log(&quot;@&quot;, input1Element);</span></span><br><span class="line"><span class="xml">                    &#125;&#125; type=&quot;text&quot; defaultValue=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>Change Weather<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>一開始只會印出一行</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/03.png" class="" title="first time">
<p>當按下 Change Weather 按鈕後，會更新頁面，<br>就會看到印出兩行，第一行是用來清空之前的數據，第二行是重新設定數據</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/04.png" class="" title="update">

<h1 id="類方式回調函數"><a href="#類方式回調函數" class="headerlink" title="類方式回調函數"></a>類方式回調函數</h1><p>就是將回調函數寫在類中，如底下代碼所示 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        changeWeather = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        saveInput = <span class="function">(<span class="params">input1Element</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.input1 = input1Element;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;@&quot;</span>, input1Element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;test callback&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>Change Weather<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/05.png" class="" title="class callback">
<p>這樣的話就算頁面更新也不會呼叫</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>因為官方說兩者差異不大，所以一般大多數還是使用內聯方式居多．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 014 createRef 函數</title>
    <url>/2021/10/22/frontend-react-014-create-ref/</url>
    <content><![CDATA[<p>目前官方最推薦的方式，步驟如下 :</p>
<ol>
<li>使用<code>React.createRef()</code>建立所需的 ref 容器，如 : <code>ref1 = React.createRef()</code></li>
<li>原本使用字串或回調函數設定的地方，都改設成 ref 容器，如 : <code>&lt;input ref=&#123;this.ref1&#125; type=&quot;text&quot;/&gt;</code></li>
<li>取值方式，如 : <code>alert(this.ref1.current.value)</code><br>完整代碼如下 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        ref1 = React.createRef()</span><br><span class="line">        ref2 = React.createRef()</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.ref1.current.value)</span><br><span class="line">        &#125;</span><br><span class="line">        showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.ref2.current.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref1&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref2&#125;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 015 非受控組件</title>
    <url>/2021/10/22/frontend-react-015-uncontrolled-component/</url>
    <content><![CDATA[<p>簡單地說就是當要取用數值時，才從輸入元素<code>&lt;input&gt;</code>中取用，代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span></span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username.value&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password.value&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上面登入資料的取用，是等到按下登入按鈕時，才會觸發<code>handleSubmit()</code>回調函數，而在回調函數中才從元素中去取值出來．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 016 受控組件</title>
    <url>/2021/10/22/frontend-react-016-controlled-component/</url>
    <content><![CDATA[<p>簡單地說就是把數值放在 state 中，當要使用數值時，直接由 state 中取用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveUsername = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">username</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        savePassword = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">password</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>如上代碼會在每次輸入框有改變時，會透過回調函數將輸入值儲存到 state 中，等到要提交時，就直接由 state 中取用</p>
<img src="/2021/10/22/frontend-react-016-controlled-component/01.png" class="" title="controlled component">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 018 為什麼需要組件生命週期</title>
    <url>/2021/10/23/frontend-react-018-why-need-life-cycle/</url>
    <content><![CDATA[<p>考慮一個場景就是要在頁面上顯示一個計數器的數值，當頁面顯示在瀏覽器時，計數器就以每秒加一的方式開始計數，還有一個移除按鈕會將該計數器停止並把頁面上所有元件移除。<br>首先先完成頁面元件的顯示，代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>頁面顯示如下 :</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/01.png" class="" title="init">
<span id="more"></span>
<p>接著先考慮如何移除計數器，ReactDom 提供了一個 API <code>unmountComponentAtNode()</code>用來卸載組件，<br>代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">    ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後寫一個定時器<code>setInterval()</code>每隔一秒就累加一，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><code>this.setState(&#123;count:count&#125;)</code>當 key 的名稱與變數名稱相同時，可以簡寫為<code>this.setState(&#123;count&#125;)</code><br>結果會看到計數器的值不會是每秒累加一，這是因為每次呼叫 <code>setState()</code>後就會呼叫一次<code>render()</code>，而呼叫一次<code>render()</code>就會創建一個定時器，所以到最後創建多個定時器同時對 state 進行更新。</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/02.png" class="" title="begin">
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/03.png" class="" title="next">

<p>所以希望 React 可以在一個時間點，即在頁面掛載時，調用一次設定定時器的函數。<br>React 提供一個回調函數<code>componentDidMount()</code>，在頁面掛載完成後進行呼叫．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/04.png" class="" title="ok">
<p>一切如設計的，定時器只會被呼叫一次，每一秒累加一，但是當我們按下移除按鈕時，出現錯誤如下 :</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/05.png" class="" title="when click button">
<p>這是因為組件被移除了，但是定時器卻沒有關閉，所以我們在按下移除按鈕時要把定時器給關了．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/06.png" class="" title="done">

<p>另外 React 也提供另一個時間點，就是當頁面將要被移除前會先調用該函數<code>componentWillUnmount()</code><br>所以代碼可以寫成 : </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>這兩種寫法都是可以的．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 017 高階函數與柯里化</title>
    <url>/2021/10/22/frontend-react-017-currying/</url>
    <content><![CDATA[<p>考慮前一篇的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveUsername = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">username</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        savePassword = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">password</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>此時表單只有兩個輸入框，所以僅需要兩個回調函數即可，萬一表單有幾十個輸入框，那不是就要寫幾十個回調函數．<br>再者，每個回調函數都大同小異，那是不是可以用一個函數透過傳參數的方式就好了?</p>
<span id="more"></span>
<p>修改代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(dataType)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>結果呈現</p>
<img src="/2021/10/22/frontend-react-017-currying/01.png" class="" title="wrong">
<p>可以看出當頁面載入時，React 就會呼叫<code>this.saveFormData(&#39;username&#39;)</code>和<code>this.saveFormData(&#39;password&#39;)</code>分別在 console 輸出字串 username 和 password．<br>當有用戶名輸入框有改變時，因為 onChange 被設為函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值，該返回值就是 undefine，所以 React 根本不會去呼叫，則 console 就不會有任何輸出．<br>所以想法就是如果函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值也是函數，這樣當輸入框有變化時，React 不就可以呼叫了嗎? 依據此想法修改了代碼如下 :<br><font color="#FF0000">注意 :</font><br>當要取用變數值當成 key 值時，變數要用 [ ] 包含，如 : <code>&#123;[dataType]:event.target.value&#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>我們將 onChange 設為函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值，該返回值是一個函數，其代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(event) =&gt; &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以當輸入框有變化時，React 就會呼叫上面這個函數並把 event 放到參數中，後續就可以取值<br>輸出結果 :</p>
<img src="/2021/10/22/frontend-react-017-currying/02.png" class="" title="correct">

<h1 id="高階函數"><a href="#高階函數" class="headerlink" title="高階函數"></a>高階函數</h1><p>符合以下兩者條件之一稱為之 :</p>
<ol>
<li>該函數的參數之一是接收函數</li>
<li>該函數的返回值是一個函數</li>
</ol>
<p>而柯里化 (Currying) 就是通過函數調用，返回一個函數後又被調用，經過一連串的調用與參數接收後，最後統一處理結果，如下代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由 React 頁面初始化時呼叫一次並返回函數，當輸入框變化時又呼叫返回函數，並且進行統一處理呼叫過程中接收的參數．</p>
<h1 id="不用柯里化"><a href="#不用柯里化" class="headerlink" title="不用柯里化"></a>不用柯里化</h1><p>直接給 onChange 一個函數，該函數主體中會再呼另一個函數處理資料，代碼如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType, event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;, event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;, event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>用與不用柯里化都沒什麼差別，都是有人在使用的．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Currying</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 019 組件的生命週期(舊)-掛載</title>
    <url>/2021/10/23/frontend-react-019-mount-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-019-mount-life-cycle/01.png" class="" title="life cycle">
<p>首先先演示第一種當組件掛載到頁面時的生命週期</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要掛載前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-019-mount-life-cycle/02.png" class="" title="mount life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 020 組件的生命週期(舊)-狀態更新</title>
    <url>/2021/10/23/frontend-react-020-state-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-020-state-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第二種，當組件的狀態有更新時的生命週期，當按下計數增加的按鈕後會觸發<code>setState()</code>進行組件更新。</p>
<span id="more"></span>
<p><font color="#FF0000">注意 :</font><code>shouldComponentUpdate()</code>用來檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</span></span><br><span class="line">        <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - shouldComponentUpdate&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>強制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-020-state-update-life-cycle/02.png" class="" title="state update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 021 組件的生命週期(舊)-父組件 render 更新</title>
    <url>/2021/10/23/frontend-react-021-parent-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-021-parent-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第三種，當父組件更新時會呼叫<code>render()</code>，而子組件也會一併進行更新，在此觀察子組件的更新生命週期，當按下父組件的換CPU按鈕時，會觸發<code>setState()</code>更改狀態，進而進行更新，並且也會使得子組件接收到新的 props，也會呼叫更新．</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">cpu</span>:<span class="string">&#x27;AMD&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">        changeCpu = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">cpu</span>:<span class="string">&#x27;Intel&#x27;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>電腦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCpu&#125;</span>&gt;</span>換CPU<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Cpu</span> <span class="attr">cpu</span>=<span class="string">&#123;this.state.cpu&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Cpu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 接收到新的 props 時</span></span><br><span class="line">        <span class="function"><span class="title">componentWillReceiveProps</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentWillReceiveProps&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</span></span><br><span class="line">        <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - shouldComponentUpdate&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>CPU: &#123;this.props.cpu&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Computer</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>```</p>
<img src="/2021/10/23/frontend-react-021-parent-update-life-cycle/02.png" class="" title="parent update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 023 新版組件生命週期簡介</title>
    <url>/2021/10/24/frontend-react-023-new-life-cycle1/</url>
    <content><![CDATA[<p>自從 React 17.0 版本之後將要逐漸廢除底下三個 API :</p>
<ol>
<li>componentWillMount</li>
<li>componentWillReceiveProps</li>
<li>componentWillUpdate<img src="/2021/10/24/frontend-react-023-new-life-cycle1/01.png" class="" title="deprecated">
<span id="more"></span>
若是使用的話會出現底下警告 :<img src="/2021/10/24/frontend-react-023-new-life-cycle1/02.png" class="" title="warning">
新版的生命週期如下 :<img src="/2021/10/24/frontend-react-023-new-life-cycle1/03.png" class="" title="new life cycle">
新增了兩個 API :</li>
</ol>
<ul>
<li>getDerivedStateFromProps</li>
<li>getSnapshotBeforeUpdate</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 022 組件的生命週期(舊)-強制更新</title>
    <url>/2021/10/23/frontend-react-022-force-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-022-force-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第四種，當按下強制更新按鈕時就會直接呼叫<code>forceUpdate()</code>進行更新。</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        force = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.forceUpdate()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>強制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-022-force-update-life-cycle/02.png" class="" title="force update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 024 新版組件生命週期-getDerivedStateFromProps</title>
    <url>/2021/10/24/frontend-react-024-new-life-cycle2/</url>
    <content><![CDATA[<p>新版本組件生命週期 :</p>
<img src="/2021/10/24/frontend-react-024-new-life-cycle2/01.png" class="" title="new life cycle">
<p>本篇文章將會介紹新的 API : <code>getDerivedStateFromProps()</code></p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 極為罕用，只有當 state 的值總是取決於 props 時才使用，</span></span><br><span class="line">        <span class="comment">// 一經使用後，就無法使用 state 進行更新</span></span><br><span class="line">        <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromProps</span>(<span class="params">props, state</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - getDerivedStateFromProps&#x27;</span>, props, state)</span><br><span class="line">            <span class="keyword">return</span> props</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">count</span>=<span class="string">&#123;199&#125;/</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>此 API 極為罕用，只有當 state 的值總是取決於 props 時才使用，<font color="#FF0000">一經使用後，就無法使用 state 進行更新</font>，所以一掛載組件後就直接被設為 props 的值，而且後續按計數增加按鈕也不會更新計數</p>
<img src="/2021/10/24/frontend-react-024-new-life-cycle2/02.png" class="" title="result">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 025 新版組件生命週期-getSnapshotBeforeUpdate</title>
    <url>/2021/10/24/frontend-react-025-new-life-cycle3/</url>
    <content><![CDATA[<p>新版本組件生命週期 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/01.png" class="" title="new life cycle">
<p>本篇文章將會介紹新的 API : <code>getSnapshotBeforeUpdate()</code></p>
<span id="more"></span>
<p>假設場景是要寫一個可閱讀推播訊息的應用，該應用的推播訊息會一直發送(假設每秒發送一則)，而最新的消息要放在清單最上面．<br>客戶可以透過訊息列表一一查看訊息，一次只可見五條訊息，其餘的訊息則需透過捲軸瀏覽，但是客戶如果不滾動捲軸的話則當前看到的訊息不會滾動．<br>就是沒有使用<code>getSnapshotBeforeUpdate()</code>時的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MessageList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">messageArr</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 獲取元狀態</span></span><br><span class="line">                <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                <span class="comment">// 模擬取得一條訊息</span></span><br><span class="line">                <span class="keyword">const</span> message = <span class="string">&#x27;訊息&#x27;</span> + (messageArr.length + <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 更新狀態</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;<span class="attr">messageArr</span>:[message, ...messageArr]&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.messageArr.map((message, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MessageList</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>比如說這一秒使用者看到[訊息9]，下一秒[訊息10]進來，若使用者沒有捲動時，應該要維持[訊息9]在最頂．<br>這一秒使用者看到[訊息9] :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/02.png" class="" title="message 9">
<p>下一秒[訊息10]進來 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/03.png" class="" title="message 10">

<p>所以要達到這樣維持不變的話，就必須在新訊息進來後，在更新訊息清單之前先記錄一下目前捲軸的高度，在更新完清單後，調整捲軸頂部位置，所以我們可以在<code>getSnapshotBeforeUpdate()</code>紀錄(快照)一下<code>scrollHeight</code>，而在<code>componentDidUpdate()</code>取出快照後調整<code>scrollTop</code><br>完整代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MessageList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">messageArr</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 獲取元狀態</span></span><br><span class="line">                <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                <span class="comment">// 模擬取得一條訊息</span></span><br><span class="line">                <span class="keyword">const</span> message = <span class="string">&#x27;訊息&#x27;</span> + (messageArr.length + <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 更新狀態</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;<span class="attr">messageArr</span>:[message, ...messageArr]&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可建立快照供 componentDidUpdate() 使用</span></span><br><span class="line">        <span class="function"><span class="title">getSnapshotBeforeUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.refs.list.scrollHeight</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可由第三個參數取得快照資訊</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState, height</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.refs.list.scrollTop += <span class="built_in">this</span>.refs.list.scrollHeight - height</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.messageArr.map((message, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MessageList</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注意 :<br><code>componentDidUpdate(prevProps, prevState, snapshot)</code>此 API 可以傳入三個參數，<br>第一個<code>prevProps</code>是前次的 props 值<br>第二個<code>prevState</code>是前次的 state 值<br>第三個<code>snapshot</code>是<code>getSnapshotBeforeUpdate()</code>的返回值<br>這一秒使用者看到[訊息9] :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/02.png" class="" title="message 9">
<p>之後新訊息進來，還是維持[訊息9]在頂部 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/04.png" class="" title="new message">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 026 Diffing 演算法與 key 的作用</title>
    <url>/2021/10/24/frontend-react-026-diffing-key/</url>
    <content><![CDATA[<p>Diffing 演算法是 React 用來比較新舊虛擬 DOM 之間是否有差異，而 React 只會針對有不同的標籤進行頁面更新．而比較的方式就是透過標籤上的 key 屬性進行第一次比對，若是相等則繼續看其內容是否也一樣，否則當作不一樣．<br>詳細說明一下動作流程 :<br>&emsp;&emsp;當 state 中的數據發生改變時，React 會根據新的 state 產生『新虛擬 DOM』，隨後透過 Diffing 演算法進行『新虛擬 DOM』和『舊虛擬 DOM』的比較．<br>比較的規則如下 :<br>&emsp;&emsp;依序拿『新虛擬 DOM』的標籤中的 key 值，到『舊虛擬 DOM』中尋找是否有相同的 key 值:<br>&emsp;&emsp;&emsp;&emsp;(1) 若有找到相同者 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;進行虛擬 DOM 內容比較 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;(1) 若相同，直接使用之前的真實 DOM<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;(2) 不相同，生成新的真實 DOM 替換掉之前的<br>&emsp;&emsp;&emsp;&emsp;(2) 沒有者到相同者 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;生成新的真實 DOM<br>因為標籤是有套嵌的，所以要一直遞迴地往下比較．</p>
<span id="more"></span>
<p>分析一下底下代碼，一個是以 index 作為 key，另一個是以 id 作為 key :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;steven&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;amy&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.name.value)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.age.value)</span><br><span class="line">            <span class="keyword">const</span> &#123;persons&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">const</span> person = &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="built_in">this</span>.refs.name.value, <span class="attr">age</span>:<span class="built_in">this</span>.refs.age.value&#125;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">persons</span>:[person, ...persons]&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    新增人員: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    年齡: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人員列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 index 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 id 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/24/frontend-react-026-diffing-key/01.png" class="">
<p>此時若新增人員後會變成</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/02.png" class="">
<p>中間兩者發生哪些動作？</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/03.png" class="">
<p>由上圖的分析結果發現，<br>使用 index 作為 key 的會生成 3 次新的真實 DOM，<br>而使用 id 作為 key 的只會生成 1 次新的真實 DOM．<br>所以資料若採用逆序添加、逆序刪除等會破壞原本順序的操作時，<br>以 index 作為 key 的就需要新生成較多的真實 DOM，進而影響效能．</p>
<h1 id="另一個議題"><a href="#另一個議題" class="headerlink" title="另一個議題"></a>另一個議題</h1><p>另外當展示結構中有輸入類時，考慮底下的代碼，每筆展示資料後面都有一個輸入框 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;steven&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;amy&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.name.value)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.age.value)</span><br><span class="line">            <span class="keyword">const</span> &#123;persons&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">const</span> person = &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="built_in">this</span>.refs.name.value, <span class="attr">age</span>:<span class="built_in">this</span>.refs.age.value&#125;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">persons</span>:[person, ...persons]&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    新增人員: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    年齡: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人員列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 index 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 id 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>顯示結果 :</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/04.png" class="">
<p>此時若先在輸入框中輸入一些訊息後，在新增人員時．發現以 index 作為 key 的會發生錯亂</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/05.png" class="">
<p>分析姐果如下，最主要的原因就是新舊混用錯位 :</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/06.png" class="">

<p>所以用 index 作為 key 時可能有以下的問題 :</p>
<ol>
<li>若有破壞順序的操作時，會產生效能低下問題</li>
<li>若結構中有輸入類時，會導致產生錯誤的 DOM，頁面顯示出問題．<br>所以一般以 index 作為 key，只用於資料不變更的展示用</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Diffing</tag>
        <tag>Key</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 027 使用 create-react-app 搭建 React 與目錄說明</title>
    <url>/2021/10/29/frontend-react-027-create-react-app/</url>
    <content><![CDATA[<h1 id="使用-create-react-app-搭建專案"><a href="#使用-create-react-app-搭建專案" class="headerlink" title="使用 create-react-app 搭建專案"></a>使用 create-react-app 搭建專案</h1><ul>
<li>使用 npm 安裝 create-react-app :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g create-react-app</span><br></pre></td></tr></table></figure>
<img src="/2021/10/29/frontend-react-027-create-react-app/01.png" class="">
<span id="more"></span></li>
<li>建立專案<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ create-react-app hello_react</span><br></pre></td></tr></table></figure>
當出現以下訊息時，則表示創建成功 :<img src="/2021/10/29/frontend-react-027-create-react-app/02.png" class=""></li>
<li>啟動專案<br>使用以下命令啟動 react :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hello_react</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure>
等到底下訊息出現時，會在 port 3000 起一個伺服器 :<img src="/2021/10/29/frontend-react-027-create-react-app/03.png" class="">
然後會自動幫你打開瀏覽器，顯示一個頁面如下 :<img src="/2021/10/29/frontend-react-027-create-react-app/04.png" class=""></li>
</ul>
<h1 id="檔案及目錄說明"><a href="#檔案及目錄說明" class="headerlink" title="檔案及目錄說明"></a>檔案及目錄說明</h1><img src="/2021/10/29/frontend-react-027-create-react-app/05.png" class="">
<ul>
<li>public : 靜態資源文件目錄<br>&emsp;&emsp;favicon.icon : 網站頁籤圖示<br>&emsp;&emsp;index.html : 主頁面, react 默認檔名不可以變更<br>&emsp;&emsp;logo192.png : logo 圖示, app 使用<br>&emsp;&emsp;logo512.png : logo 圖示, app 使用<br>&emsp;&emsp;manifest.json : 應用加殼的配置文件, app 使用<br>&emsp;&emsp;robots.txt : 爬蟲協議文件</li>
<li>scr : 代碼目錄<br>&emsp;&emsp;App.css : App 組件樣式檔<br>&emsp;&emsp;App.js : App 組件檔<br>&emsp;&emsp;App.test.js : 用於 App 組件測試用<br>&emsp;&emsp;index.css : 主頁面樣式檔<br>&emsp;&emsp;index.js : 入口文件<br>&emsp;&emsp;logo.svg : 主頁面中間的 logo 圖<br>&emsp;&emsp;reportWebVitals.js : 頁面性能分析文件, 需搭配 web-vitals 庫</li>
</ul>
<h1 id="一個最簡單的範例"><a href="#一個最簡單的範例" class="headerlink" title="一個最簡單的範例"></a>一個最簡單的範例</h1><p>將一些開發手機端才需要用到的東西刪除，則會只剩下 :</p>
<img src="/2021/10/29/frontend-react-027-create-react-app/06.png" class="">
<ul>
<li>index.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>App.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                Hello, react!</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure></li>
<li>index.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 react 核心庫</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入 react-dom 庫</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App 組件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 App 到頁面上</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="最後調整優化"><a href="#最後調整優化" class="headerlink" title="最後調整優化"></a>最後調整優化</h1><img src="/2021/10/29/frontend-react-027-create-react-app/07.png" class="">
<p>建立一個 components 目錄，用來收納組件，將 App.js 中的 <code>Hello, react!</code> 提取為一個 Component 放在 components 下的 Hello 目錄中，並且寫一個樣式檔 Hello.css<br>Hello.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Hello.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>Hello, react!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;./components/Hello/Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而關於組件的副檔名 js 也都改成副檔名為 jsx，所以原本應該取名為 Hello.js 的組件，改取名為 Hello.jsx</p>
<h1 id="另一種目錄結構"><a href="#另一種目錄結構" class="headerlink" title="另一種目錄結構"></a>另一種目錄結構</h1>
<p>將是將 Hello 組件內原本命名為 Hello.jsx 改為 index.jsx，Hello.css 改為 index.css，這樣的話，原本在 App.jsx 中的<code>import Hello from &#39;./components/Hello/Hello&#39;</code>就只會變成<code>import Hello from &#39;./components/Hello&#39;</code>，看起來相對清爽．</p>
<ul>
<li>scr/App.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;./components/Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>src/components/Hello/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>Hello, react!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li>
<li>src/components/Hello/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="vs-code-套件"><a href="#vs-code-套件" class="headerlink" title="vs code 套件"></a>vs code 套件</h1><img src="/2021/10/29/frontend-react-027-create-react-app/09.png" class="">
<p><code>ES7 React/Redux/GraphQL/React-Native snippets</code> 是一個 vs code 的延伸套件，只要在新增檔案中輸入<code>rcc</code>或<code>rfc</code>後按下 Enter 就會自動生成代碼模塊，還有一些實用的代碼提示．</p>
<img src="/2021/10/29/frontend-react-027-create-react-app/10.png" class="">
<img src="/2021/10/29/frontend-react-027-create-react-app/11.png" class="">
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>create-react-app</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - axios 學習 - 001 Promise based 的 HTTP 請求工具</title>
    <url>/2021/11/08/frontend-axios-001-basic-usage/</url>
    <content><![CDATA[<p>axios 是一個輕量級的 ajax 請求工具，是基於 Promise 開發而成的。在一些非 JQuery 的框架中，如 : React、VUE … 等，是一個非常好的工具。</p>
<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>因為需要與後端伺服器互動，所以我們先需要準備一個模擬伺服器，讓我們傳送 hTTP 請求時，可以傳回一些假資料讓我們互動測試，所以我們使用 Json Server。<br><a href="https://github.com/typicode/json-server">Json Server</a></p>
<span id="more"></span>
<ul>
<li>安裝方式<br>在一個工作目錄中，輸入底下命令安裝 :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g json-server</span><br></pre></td></tr></table></figure>
<img src="/2021/11/08/frontend-axios-001-basic-usage/01.png" class=""></li>
<li>建立模擬資料<br>在該工作目錄中，建立一個 db.json 其內容如下 :<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;posts&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;json-server&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;typicode&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;comments&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;some comment&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;postId&quot;</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;profile&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;typicode&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>啟動 json server<br>在該工作目錄下，輸入底下命令啟動 :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server --watch db.json</span><br></pre></td></tr></table></figure>
<img src="/2021/11/08/frontend-axios-001-basic-usage/02.png" class=""></li>
<li>驗證<br>在瀏覽器中輸入 <a href="http://localhost:3000/posts">http://localhost:3000/posts</a><img src="/2021/11/08/frontend-axios-001-basic-usage/03.png" class=""></li>
</ul>
<h1 id="axios-基本用法介紹"><a href="#axios-基本用法介紹" class="headerlink" title="axios 基本用法介紹"></a>axios 基本用法介紹</h1><ul>
<li>安裝方式<br>如果是在項目中使用的話，建議用安裝的方式 :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure>
現在我們只是要試玩，所以用 CDN 方式是最方便的，其方式在 html 中嵌入底下程式嗎 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
另外準備一個網頁上有四個按鈕分別發送 GET、POST、PUT 及 DELETE 請求，以供我們測試 axios。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>axios 基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>基本使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送 GET 請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送 POST 請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送 PUT 請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送 DELETE 請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
網頁呈現如下 :<img src="/2021/11/08/frontend-axios-001-basic-usage/04.png" class=""></li>
</ul>
<ol>
<li>使用方式一 - 使用 axios()<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 獲取全部按鈕</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 GET 請求</span></span><br><span class="line">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,  <span class="comment">// 請求類型</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>,  <span class="comment">// 請求路徑</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 POST 請求</span></span><br><span class="line">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,  <span class="comment">// 請求類型</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,  <span class="comment">// 請求路徑</span></span><br><span class="line">            <span class="comment">// 設置請求體</span></span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;Axios 基本請求使用&quot;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&quot;Steven&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 PUT 請求</span></span><br><span class="line">    btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,  <span class="comment">// 請求類型</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,  <span class="comment">// 請求路徑</span></span><br><span class="line">            <span class="comment">// 設置請求體</span></span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;基本資料處理&quot;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&quot;Amy&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 DELETE 請求</span></span><br><span class="line">    btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,  <span class="comment">// 請求類型</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,  <span class="comment">// 請求路徑</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li>使用方式二 - aliases<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 獲取全部按鈕</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 GET 請求</span></span><br><span class="line">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios.get(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span></span><br><span class="line">            ).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123; </span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 POST 請求</span></span><br><span class="line">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios.post(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>, </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;Axios 基本請求使用&quot;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&quot;Steven&quot;</span></span><br><span class="line">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 PUT 請求</span></span><br><span class="line">    btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios.put(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;基本資料處理&quot;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&quot;Amy&quot;</span></span><br><span class="line">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 發送 DELETE 請求</span></span><br><span class="line">    btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        axios.delete(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span></span><br><span class="line">            ).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li>使用方式三 - 創建實例對象<br>適用場景會是在需要對兩個不同請求位置發送 AJAX 請求。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="comment">// 第一個 axios 實例</span></span><br><span class="line">    <span class="keyword">const</span> axiosObj = axios.create(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 第二個 axios 實例，設定對另一個路徑發送請求</span></span><br><span class="line">    <span class="keyword">const</span> otherObj = axios.create(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:3000&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 呼叫方式一</span></span><br><span class="line">    axiosObj(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/comments/1&#x27;</span>,</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 呼叫方式二</span></span><br><span class="line">    otherObj.get(<span class="string">&#x27;/posts/1&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>Request Config<br>一些重要的配置項，詳細的請參考<a href="https://github.com/axios/axios#request-config">axios</a><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: &#x27;/posts/<span class="number">1</span>&#x27;,  <span class="comment">// 請求路徑，常用</span></span><br><span class="line">  method: &#x27;get&#x27;,  <span class="comment">// 請求類型，常用</span></span><br><span class="line">  baseURL: &#x27;http:<span class="comment">//localhost:3000&#x27;,  // 請求的基礎路徑，常用</span></span><br><span class="line">  transformRequest: [function (data, headers) &#123;  <span class="comment">// 先對請求的數據做處理，處理後再對服務器發送</span></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line">  transformResponse: [function (data) &#123;  <span class="comment">// 對響應的結果做處理，處理完再用自定義的回調函數處理</span></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line">  headers: &#123;&#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;&#125;,  <span class="comment">// 對請求頭訊息進行配置，常用</span></span><br><span class="line">  params: &#123;  <span class="comment">// 設定 URL 上的參數, ex: http://localhost/posts?ID=12345，常用</span></span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line">  paramsSerializer: function (params) &#123;  </span><br><span class="line">    <span class="comment">// 對請求的參數定義序列化字串，ex: http://localhost/posts?ID=12345 可自定義改成 http://localhost/posts/ID/12345</span></span><br><span class="line">    return Qs.stringify(params, &#123;arrayFormat: &#x27;brackets&#x27;&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;  <span class="comment">// 將參數放置在請求體(request body)中，常用</span></span><br><span class="line">    firstName: &#x27;Fred&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;,  <span class="comment">// 將參數放在 URL 上進行傳送，常用</span></span><br><span class="line">  timeout: <span class="number">1000</span>, <span class="comment">// 設定請求超時，常用</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// 設定跨域請求時是否攜帶 cookie</span></span><br><span class="line">  responseType: &#x27;json&#x27;, <span class="comment">// 設定響應資料格式</span></span><br><span class="line">  responseEncoding: &#x27;utf8&#x27;, <span class="comment">// 設定響應資料編碼格式</span></span><br><span class="line">  xsrfCookieName: &#x27;XSRF-TOKEN&#x27;, <span class="comment">// 跨域時的 cookie 名稱</span></span><br><span class="line">  xsrfHeaderName: &#x27;X-XSRF-TOKEN&#x27;, <span class="comment">// 跨域時的頭訊息名稱</span></span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;  <span class="comment">// 上傳時進行回調</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;  <span class="comment">// 下載時進行回調</span></span><br><span class="line">  &#125;,</span><br><span class="line">  validateStatus: function (status) &#123;  <span class="comment">// 設定響應成功的條件</span></span><br><span class="line">    return status &gt;= 200 &amp;&amp; status &lt; 300;</span><br><span class="line">  &#125;,</span><br><span class="line">  httpAgent: new http.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),  <span class="comment">// keepAlive 設定 </span></span><br><span class="line">  httpsAgent: new https.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),  <span class="comment">// keepAlive 設定 </span></span><br><span class="line">  cancelToken: new CancelToken(function (cancel) &#123;  <span class="comment">// 設定取消請求</span></span><br><span class="line">  &#125;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>改變預設值的方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    axios.defaults.method = <span class="string">&#x27;GET&#x27;</span>;  <span class="comment">//設置預設請求類型為 GET</span></span><br><span class="line">    axios.defaults.baseURL = <span class="string">&#x27;http://localhost:3000&#x27;</span>; <span class="comment">// 設置預設基礎 URL</span></span><br><span class="line">    axios.defaults.timeout = <span class="number">3000</span>;  <span class="comment">// 設置超時時間</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>Axios</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 028 To Do List</title>
    <url>/2021/10/30/frontend-react-028-to-do-list/</url>
    <content><![CDATA[<h1 id="步驟一-靜態頁面-html"><a href="#步驟一-靜態頁面-html" class="headerlink" title="步驟一 - 靜態頁面 html"></a>步驟一 - 靜態頁面 html</h1><p>如果是初學者或是由舊有的項目轉成 react 時，先不要管組件的拆分，先把原先項目的 html 標籤都集中放在 App.jsx 中．<br>假設原先項目的 index.html 如下 :</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>To Do List App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total 2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>clear done task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就把標籤<code>&lt;body&gt;</code>下的<code>&lt;div id=&quot;root&quot;&gt;</code>內的內容全部複製到<code>App.jsx</code>中，即底下部分 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total 2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>clear done task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>進行標籤修改 : 可參考<code>前端 - React 學習 - 002 Jsx 的一些規則</code><br>&emsp;&emsp;1. 將 class 改為 className，如將<code>&lt;div class=&quot;todo-container&quot;&gt;</code>改成<code>&lt;div className=&quot;todo-container&quot;&gt;</code>．<br>&emsp;&emsp;2. 將 style 進行調整, 如將<code>&lt;button ... style=&quot;display:none&quot;&gt;</code>改成<code>&lt;button ... style=&#123;&#123;display:'none'&#125;&#125;&gt;</code>．<br>&emsp;&emsp;3. 檢查標籤閉合與否．</p>
<p>完整的 App.jsx 如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total 2</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>clear done task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>其他部分不需要複製到 index.html 中，使用原先<code>create-react-app</code>產生的 index.html．<br>靜態頁面呈現如下 :</p>
<img src="/2021/10/30/frontend-react-028-to-do-list/01.png" class="">

<h1 id="步驟二-靜態頁面樣式-css"><a href="#步驟二-靜態頁面樣式-css" class="headerlink" title="步驟二 - 靜態頁面樣式 css"></a>步驟二 - 靜態頁面樣式 css</h1><p>一樣先不拆樣式，將原先的樣式 index.css 的內容全部複製到 App.css 中．</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*base*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#da4f49</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-container</span> <span class="selector-class">.todo-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*header*/</span></span><br><span class="line"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">560px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.075</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*main*/</span></span><br><span class="line"><span class="selector-class">.todo-main</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-empty</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*item*/</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">label</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>:before &#123;</span><br><span class="line">  content: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*footer*/</span></span><br><span class="line"><span class="selector-class">.todo-footer</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>記得要在 App.jsx 中引入才有效果，<code>import &#39;./App.css&#39;</code><br>靜態頁面呈現 :</p>
<img src="/2021/10/30/frontend-react-028-to-do-list/02.png" class="">

<h1 id="步驟三-拆分組件"><a href="#步驟三-拆分組件" class="headerlink" title="步驟三 - 拆分組件"></a>步驟三 - 拆分組件</h1><p>拆分組件並沒有一定規則，只有拆得好與不好，完全吃經驗法則．<br>一般依據畫面呈現的樣子，以方形將頁面區分成一塊一塊的，區塊大小需要取適中大小．另外若是在為組件命名時，很難去定義一個清楚明確的組件名時，通常表示還可以將該組件往下拆．<br>所以我將 App.jsx 內拆分成三個區塊，所以建立三個組件<code>Header</code>、<code>List</code>及<code>Footer</code>．</p>
<ul>
<li>Header<br>src/components/Header/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure></li>
<li>List<br>src/components/List/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure></li>
<li>Footer<br>src/components/Footer/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total 2</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>clear done task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure>
最後不要忘記修改 App.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;./components/List&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&#x27;./components/Footer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
在拆分的過程中，組件 List 中的內容可以看出重複性的代碼很高，所以我把他在拆分出另一個組件 Item</li>
<li>Item<br>src/components/Item/index.jsx<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure>
<h1 id="步驟三-拆分-CSS"><a href="#步驟三-拆分-CSS" class="headerlink" title="步驟三 - 拆分 CSS"></a>步驟三 - 拆分 CSS</h1>如果是由舊有項目拆分，則原先的 css 有比較好的分塊，則比較好拆，若是東一塊西一塊地，則必須辛苦地把他們收集在一起．<br>index.ccs 本身寫的比較結構化，依照組件拆分</li>
<li>App<br>src/App.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*base*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#da4f49</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-container</span> <span class="selector-class">.todo-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Header<br>src/components/Header/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">560px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.075</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>List<br>src/components/List/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todo-main</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-empty</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Item<br>src/components/Item/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">label</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>:before &#123;</span><br><span class="line">    content: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Footer<br>src/components/Footer/index.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todo-footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-footer</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="步驟四-規劃動態組件狀態"><a href="#步驟四-規劃動態組件狀態" class="headerlink" title="步驟四 - 規劃動態組件狀態"></a>步驟四 - 規劃動態組件狀態</h1><ol>
<li><p>處理 List 中的顯示數據<br>規畫一些需要動態展示的數據結構，如 List 中的 Item 每一個都有自己的任務名、完成勾選框及 id，這些數據有可能是由後端傳送過來的．<br>考量要在哪個組件的 state 綁定這些數據，如果是在 List 組件中綁定的話，則在 Header 中輸入新任務時，就要把數據往 List 組件中傳遞，這是兄弟組件之間的數據傳送；另一種就是綁定在父組件 App 中，其他子組件只需要跟父組件傳遞數據即可，這是父子組件之間的數據傳送．<br>父組件傳遞給子組件可以透過 props 傳遞．而子組件可透過函數呼叫方式傳遞數據給父組件．<br>所以我們在 App 組件中定義並初始化一個 state，其結構如下，並把該數據結構透過 props 傳給 List : </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;./components/List&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&#x27;./components/Footer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;eat&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;sleep&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;play&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>而 List 組件透過 props 取得數據，並將單一個數據傳入 Item 組件中作展示．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&#x27;../Item&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    todos.map((todo)=&gt;&#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> &#123;<span class="attr">...todo</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">此處用了<code>&#123;...todo&#125;</code>相當於<code>id=&#123;todo.id&#125; name=&#123;todo.name&#125; done=&#123;todo.done&#125;</code></font></p>
<img src="/2021/10/30/frontend-react-028-to-do-list/03.png" class=""></li>
<li><p>處理 Header 中的新增任務<br>接下來處理 Header 組件的新增任務功能，在<code>&lt;input&gt;</code>中設定 KeyUp 事件回調函數，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleKeyUp = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;keyCode, target&#125; = event</span><br><span class="line">        <span class="keyword">if</span> (keyCode !== <span class="number">13</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (target.value.trim() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;輸入不可為空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(target.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyUp</span>=<span class="string">&#123;this.handleKeyUp&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input task name&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為要將子組件取得的數據傳送給父組件，所以需要在父組件 App 中定義一個回調函數<code>addToDo()</code>，然後透過 props 傳給子組件 Header 呼叫．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    addToDo = <span class="function">(<span class="params">toDoObj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 獲取原數據</span></span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="comment">// 在原數據之前添加一筆數據</span></span><br><span class="line">        <span class="keyword">const</span> newToDos = [toDoObj, ...todos]</span><br><span class="line">        <span class="comment">// 更新狀態</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>:newToDos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Header</span> <span class="attr">addToDo</span>=<span class="string">&#123;this.addToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著在子組件 Header 中呼叫回調函數將新增數據傳遞出去．<br>注意 : 此處使用<code>nanoid</code>庫幫助我們產生唯一的 id，是一種 uuid 的庫，但相對於 uuid 庫要小，但是需要手動安裝一下．</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install nanoid</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleKeyUp = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;keyCode, target&#125; = event</span><br><span class="line">        <span class="keyword">if</span> (keyCode !== <span class="number">13</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (target.value.trim() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;輸入不可為空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 準備好一個 toDoObj</span></span><br><span class="line">        <span class="keyword">const</span> toDoObj = &#123;<span class="attr">id</span>:nanoid(), <span class="attr">name</span>:target.value, <span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        <span class="comment">// 將 toDoObj 傳遞給 App 組件</span></span><br><span class="line">        <span class="built_in">this</span>.props.addToDo(toDoObj)</span><br><span class="line">        <span class="comment">// 清空輸入</span></span><br><span class="line">        target.value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>處理鼠標移入/移出 Item<br>每當鼠標移動到 Item 上時會顯示高亮，移出後則高亮消失，所以我們必須監聽 Item 鼠標移入<code>onMouseEnter</code>/移出<code>onMouseLeave</code>，並且記錄現在是移出還是移入．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleMouse = <span class="function">(<span class="params">flag</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(flag)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, done&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">onMouseEnter</span>=<span class="string">&#123;this.handleMouse(true)&#125;</span> <span class="attr">onMouseLeave</span>=<span class="string">&#123;this.handleMouse(false)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;done&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是這樣寫，則在一啟動時 react 就會呼叫<code>handleMouse</code>，如下所示 :</p>
<img src="/2021/10/30/frontend-react-028-to-do-list/04.png" class="">
<p>因為 react 一啓動發現是一個函數，就幫你呼叫函數後將返回值設給<code>onMouseEnter</code>，所以我們必須在<code>handleMouse</code>返回一個函數．詳細說明可參考<code>前端 - React 學習 - 017 高階函數與柯里化</code><br>改寫<code>handleMouse</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleMouse = <span class="function">(<span class="params">flag</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(flag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/05.png" class="">
<p>接著紀錄狀態，並依據狀態設置高亮</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    state = &#123;<span class="attr">mouse</span>:<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    handleMouse = <span class="function">(<span class="params">flag</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">mouse</span>:flag&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, done&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">const</span> &#123;mouse&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundColor:</span> <span class="attr">mouse</span>?&#x27;#<span class="attr">ddd</span>&#x27;<span class="attr">:</span>&#x27;<span class="attr">white</span>&#x27;&#125;&#125; <span class="attr">onMouseEnter</span>=<span class="string">&#123;this.handleMouse(true)&#125;</span> <span class="attr">onMouseLeave</span>=<span class="string">&#123;this.handleMouse(false)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;done&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span>&#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/06.png" class="">
<p>還有當鼠標移入時，<code>Delete</code>按鈕要顯示，移出後則消失，所以也需要依據鼠標狀態設定一下樣式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button className=<span class="string">&quot;btn btn-danger&quot;</span> style=&#123;&#123;<span class="attr">display</span>: mouse?<span class="string">&#x27;block&#x27;</span>:<span class="string">&#x27;none&#x27;</span>&#125;&#125;&gt;Delete&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/07.png" class=""></li>
<li><p>處理 Item 勾選狀態<br>當使用者在該 Item 打勾時，要將數據傳送到父組件 List，再透過組件 List 傳送給父組件 App 完成更新．<br>在 App.jsx 中撰寫更新狀態回調函數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 用來更新一個 todo 對象</span></span><br><span class="line">    updateToDo = <span class="function">(<span class="params">id, done</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">const</span> newTodos = todos.map(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(todoObj.id === id) &#123;</span><br><span class="line">                todoObj.done = done</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> todoObj</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>: newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Header</span> <span class="attr">addToDo</span>=<span class="string">&#123;this.addToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">updateToDo</span>=<span class="string">&#123;this.updateToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一種寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">updateToDo = <span class="function">(<span class="params">id, done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> newTodos = todos.map(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(todoObj.id === id) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;...todoObj, done&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> todoObj</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>: newTodos&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 List 組件中由 props 中接收到回調函數後往 Item 傳遞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos, updateToDo&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    todos.map((todo)=&gt;&#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> &#123;<span class="attr">...todo</span>&#125; <span class="attr">updateToDo</span>=<span class="string">&#123;updateToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最後在 Item 中，當使用者勾選完成後，呼叫回調函數將數據傳回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    handleCheck = <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.props.updateToDo(id, event.target.checked)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            ...</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> defaultChecked=&#123;done&#125; onChange=&#123;<span class="built_in">this</span>.handleCheck(id)&#125;/&gt;</span><br><span class="line">            ...</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/08.png" class=""></li>
</ol>
<ul>
<li>限制與檢查 props<br>因為我們要用<code>prop-types</code>庫進行檢查，但是<code>create-react-app</code>預設並沒有幫我們安裝這個包，所以需要手動安裝一下，可參考<code>前端 - React 學習 - 010 對組件的標籤屬性進行檢查與限制</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install prop-types</span><br></pre></td></tr></table></figure>
編寫限制 :<br>Header 組件 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 對接收的 props 進行類型與必要性的限制</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        <span class="attr">addToDo</span>: PropTypes.func.isRequired</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
List 組件 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 對接收的 props 進行類型與必要性的限制</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        <span class="attr">todos</span>: PropTypes.array.isRequired,</span><br><span class="line">        <span class="attr">updateToDo</span>: PropTypes.func.isRequired</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
此時若在 App 組件中，對 List 組件的 updateToDo 傳遞一個數值時，會出現以下錯誤 :<img src="/2021/10/30/frontend-react-028-to-do-list/09.png" class=""></li>
</ul>
<ol start="5">
<li><p>處理 Item 的刪除按鈕<br>類似處理 Item 勾選的流程，在 App.jsx 中撰寫刪除 todo 對象的回調函數，並把他傳給 List 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刪除一個 todo 對象</span></span><br><span class="line">deleteToDo = <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> newToDos = todos.filter(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> todoObj.id !== id</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>:newToDos&#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        ...</span><br><span class="line">        &lt;List todos=&#123;todos&#125; updateToDo=&#123;<span class="built_in">this</span>.updateToDo&#125; deleteToDo=&#123;<span class="built_in">this</span>.deleteToDo&#125;/&gt;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>而在 List 組件中也將他傳給 Item 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos, updateToDo, deleteToDo&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    todos.map((todo)=&gt;&#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> &#123;<span class="attr">...todo</span>&#125; <span class="attr">updateToDo</span>=<span class="string">&#123;updateToDo&#125;</span> <span class="attr">deleteToDo</span>=<span class="string">&#123;deleteToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在 Item 組件中的刪除按鈕上榜定 onClick 事件的回調函數<code>handleDelete</code>並且在觸發事件時回調<code>deleteToDo</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    handleDelete = <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 注意這邊不可以只寫 confirm()</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">&quot;確定篩除嗎?&quot;</span>)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.props.deleteToDo(id)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id, name, done&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">const</span> &#123;mouse&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            ...</span><br><span class="line">                &lt;button onClick=&#123;<span class="built_in">this</span>.handleDelete(id)&#125; className=<span class="string">&quot;btn btn-danger&quot;</span> style=&#123;&#123;<span class="attr">display</span>: mouse?<span class="string">&#x27;block&#x27;</span>:<span class="string">&#x27;none&#x27;</span>&#125;&#125;&gt;Delete&lt;/button&gt;</span><br><span class="line">            ...</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>處理 Footer 的任務數與全選/全不選按鈕<br>先把 App 組件的 todos 資料傳給 Footer 組件做為計算已完成任務數與總數．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;eat&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;sleep&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;play&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Footer 組件中計算任務總數與已完成任務數．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="comment">// 以完成的任務數</span></span><br><span class="line">        <span class="keyword">const</span> doneCount = todos.reduce(<span class="function">(<span class="params">pre, todo</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> pre + (todo.done?<span class="number">1</span>:<span class="number">0</span>)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 任務總數</span></span><br><span class="line">        <span class="keyword">const</span> total = todos.length</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Done &#123;doneCount&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / Total &#123;total&#125;</span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著在處理全選/全不選按鈕，需要在 App 組件中提供一個改變 todos 的 done 狀態的回調函數，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//將所有的 task 打勾</span></span><br><span class="line">checkAllToDo = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> newToDos = todos.map(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123; </span><br><span class="line">        <span class="comment">//return &#123;...todoObj, done: done&#125;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;...todoObj, done&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>:newToDos&#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">checkAllToDo</span>=<span class="string">&#123;this.checkAllToDo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            ...</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在按鈕上綁定<code>onChange</code>的回調函數，與設定 checked 值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    handleCheckAll = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.checkAllToDo(event.target.checked)</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="comment">// 以完成的任務數</span></span><br><span class="line">        <span class="keyword">const</span> doneCount = todos.reduce(<span class="function">(<span class="params">pre, todo</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> pre + (todo.done?<span class="number">1</span>:<span class="number">0</span>)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 任務總數</span></span><br><span class="line">        <span class="keyword">const</span> total = todos.length</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleCheckAll&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;doneCount</span> === <span class="string">total</span> &amp;&amp; <span class="attr">total</span> !== <span class="string">0?true:false&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意</font> : 檢查在 Item 組件中是否還有使用<code>defaultChecked</code>因為這個只會在組件被渲染時有用，之後當有狀態改變時並不會再被呼叫，所以頁面沒有變化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> defaultChecked=&#123;done&#125; onChange=&#123;<span class="built_in">this</span>.handleCheck(id)&#125;/&gt;</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> checked=&#123;done&#125; onChange=&#123;<span class="built_in">this</span>.handleCheck(id)&#125;/&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/30/frontend-react-028-to-do-list/10.png" class=""></li>
<li><p>處理 Footer 的清除已完成任務按鈕<br>在 App 組件中提供一個回調函數<code>clearAllDone</code>供 Footer 用以清除已完成任務．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    clearAllDone = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">const</span> newToDos = todos.filter(<span class="function">(<span class="params">todo</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !todo.done</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">todos</span>: newToDos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    &lt;Footer todos=&#123;todos&#125; checkAllToDo=&#123;<span class="built_in">this</span>.checkAllToDo&#125; clearAllDone=&#123;<span class="built_in">this</span>.clearAllDone&#125;/&gt;</span><br></pre></td></tr></table></figure>
<p>在 Footer 組件的清除已完成任務按鈕上綁定事件並回調<code>clearAllDone</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    handleClearAllDone = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.props.clearAllDone()</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    &lt;button onClick=&#123;<span class="built_in">this</span>.handleClearAllDone&#125; className=<span class="string">&quot;btn btn-danger&quot;</span>&gt;clear done task&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>前端 - axios 學習 - 002 取消請求和攔截器的使用</title>
    <url>/2021/11/09/frontend-axios-002-request-cancel-interceptor/</url>
    <content><![CDATA[<h1 id="取消請求"><a href="#取消請求" class="headerlink" title="取消請求"></a>取消請求</h1><p>首先使用<code>new axios.CancelToken()</code>讓一個全局變數<code>cancel</code>接收取消函數，並將其返回值設定給<code>axios()</code>中的<code>cancelToken</code>屬性。<br>當需要取消請求時，可以藉由全局變數<code>cancel</code>取消。</p>
<span id="more"></span>
<p>底下為完整的程式碼:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>axios 請求取消<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>axios 請求取消<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>發送請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>取消請求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 聲明一個全局變量用來放取消請求的回調函數</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 發送請求</span></span></span><br><span class="line"><span class="javascript">            btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 檢查上次發送的請求是否已經響應完成</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(cancel !== <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 取消上次的請求</span></span></span><br><span class="line"><span class="javascript">                    cancel();</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 創建 cancelToken，讓 axios 調用設定取消函數給 cancel</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> cancelToken = <span class="keyword">new</span> axios.CancelToken(</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        cancel = c;</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                axios(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 添加配置對象的 cancelToken 屬性</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">cancelToken</span>: cancelToken</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 響應完成後將 cancel 全局變數設為 null，以便讓我們辨別是否可以調用取消</span></span></span><br><span class="line"><span class="javascript">                    cancel = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 發送取消請求</span></span></span><br><span class="line"><span class="javascript">            btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                cancel();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="攔截器"><a href="#攔截器" class="headerlink" title="攔截器"></a>攔截器</h1><p>分為兩大類 : </p>
<ol>
<li>請求攔截器 : 用來在發送前對資料做檢查，如果檢查不過就不發送請求。使用<code>axios.interceptors.request.use()</code>設定。</li>
<li>響應攔截器 : 用來對響應數據做檢查，如果檢查不過就不回調使用者定義的處理函數。<code>axios.interceptors.response.use()</code>設定。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>攔截器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 設置請求攔截器</span></span></span><br><span class="line"><span class="javascript">            axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;1號 - 請求攔截器_請求訊息檢驗成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 模擬檢驗失敗</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> <span class="string">&#x27;參數異常&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> config;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;1號 - 請求攔截器_請求訊息檢驗失敗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;2號 - 請求攔截器_請求訊息檢驗成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> config;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;2號 - 請求攔截器_請求訊息檢驗失敗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 設置響應攔截器</span></span></span><br><span class="line"><span class="javascript">            axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;1號 - 響應攔截器_請求訊息檢驗成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> response;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;1號 - 響應攔截器_請求訊息檢驗失敗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;2號 - 響應攔截器_請求訊息檢驗成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> response;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;2號 - 響應攔截器_請求訊息檢驗失敗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 發送請求</span></span></span><br><span class="line"><span class="javascript">            axios(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
控制台輸出結果如下 :<img src="/2021/11/09/frontend-axios-002-request-cancel-interceptor/01.png" class="">
<font color="#FF0000">注意 :</font> 請求攔截器的書寫順序與執行順序相反。</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>Axios</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Tip - Java Annotation processing is not supported for module cycles.</title>
    <url>/2021/11/11/tip-maven-module-cycles/</url>
    <content><![CDATA[<h1 id="Java-Annotation-processing-is-not-supported-for-module-cycles"><a href="#Java-Annotation-processing-is-not-supported-for-module-cycles" class="headerlink" title="Java: Annotation processing is not supported for module cycles."></a>Java: Annotation processing is not supported for module cycles.</h1><p>這是因為 Maven Module 中出現依賴循環問題，可以用以下方式檢查並解決。</p>
<h1 id="檢查方式"><a href="#檢查方式" class="headerlink" title="檢查方式"></a>檢查方式</h1><p>點選【Analyze】下的【Module Dependencies…】打開模組相依視窗。</p>
<span id="more"></span>
<img src="/2021/11/11/tip-maven-module-cycles/01.png" class="" title="01.png">
<p>依據需求挑選要檢驗的範圍。</p>
<img src="/2021/11/11/tip-maven-module-cycles/02.png" class="" title="02.png">
<p>之後可以在右上角的地方看到每個模組各是相依那些模組，此時可以看到兩個紅色的模組，這兩個模組就是有問題的地方。</p>
<img src="/2021/11/11/tip-maven-module-cycles/03.png" class="" title="03.png">
<p>我們將他們展開來看一下，就可以知道互為依賴。</p>
<img src="/2021/11/11/tip-maven-module-cycles/04.png" class="" title="04.png">

<h1 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h1><p>在專案上按下滑鼠右鍵後選擇【Open Module Settings】</p>
<img src="/2021/11/11/tip-maven-module-cycles/05.png" class="" title="05.png">
<p>此時會打開 Project Structure 視窗</p>
<img src="/2021/11/11/tip-maven-module-cycles/06.png" class="" title="06.png">
<p>選擇第一個模組<code>abstract_factory</code>，在右邊視窗可以看到他相依第二個模組<code>builder</code>。</p>
<img src="/2021/11/11/tip-maven-module-cycles/07.png" class="" title="07.png">
<p>而選擇第二個模組<code>builder</code>，在右邊視窗可以看到他相依第一個模組<code>abstract_factory</code>。</p>
<img src="/2021/11/11/tip-maven-module-cycles/08.png" class="" title="08.png">
<p>這邊就是他們循環相依的問題所在。<br>我們選擇第一個模組<code>abstract_factory</code>，將他相依的模組<code>builder</code>移除。</p>
<img src="/2021/11/11/tip-maven-module-cycles/09.png" class="" title="09.png">
<p>同理，選擇第二個模組<code>builder</code>，將他相依的模組<code>abstract_factory</code>移除。</p>
<img src="/2021/11/11/tip-maven-module-cycles/10.png" class="" title="10.png">
<p>此時就沒有循環相依問題，就可以順利執行程式。</p>
]]></content>
      <categories>
        <category>Tip</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Intellij</tag>
      </tags>
  </entry>
  <entry>
    <title>Tip - &#39;react-scripts&#39; 不是內部或外部命令、可執行的程式或批次檔。</title>
    <url>/2021/11/11/tip-react-scripts-is-not-a-Command/</url>
    <content><![CDATA[<p>當我們由 Git 庫下載 React 源碼後，第一次啟動<code>npm start</code>會發現以下錯誤 :</p>
<img src="/2021/11/11/tip-react-scripts-is-not-a-Command/01.png" class="">
<span id="more"></span>
<p>這是因為一般上傳 React 專案時，是不會連該專案所安裝的模組 (下圖黃色框部分) 都上傳，而只是上傳該專案所用的模組設定檔(<code>package.json</code>下圖紅色框部分)，所以我們需要在重新安裝一下。</p>
<img src="/2021/11/11/tip-react-scripts-is-not-a-Command/02.png" class="">
<p>解決方式 : 在終端機上輸入<code>npm install</code>進行安裝。</p>
<img src="/2021/11/11/tip-react-scripts-is-not-a-Command/03.png" class="">
]]></content>
      <categories>
        <category>Tip</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 029 Github Search</title>
    <url>/2021/11/14/frontend-react-029-github-search/</url>
    <content><![CDATA[<h1 id="使用-axios-對-GitHib-發起-Ajax-請求"><a href="#使用-axios-對-GitHib-發起-Ajax-請求" class="headerlink" title="使用 axios 對 GitHib 發起 Ajax 請求"></a>使用 axios 對 GitHib 發起 Ajax 請求</h1><p>若不熟悉者，請參考前篇文章【前端 - React 學習 - 028 To Do List】的實作步驟．這邊有引入<code>bootstrap.css</code>，一般這種第三方 CSS，最好的方式就是在 public 下建立一個 css 目錄統一擺放，然後在<code>index.html</code>引入．</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Github Search<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&quot;./components/Search&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>components/Search/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron-heading&quot;</span>&gt;</span>Search Github Users<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;enter the name you search&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>components/List/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/reactjs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>components/List/index.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.album</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">50rem</span>; <span class="comment">/* Can be removed; just added for demo purposes */</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.333%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">75rem</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.card</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">75rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.card-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">85%</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<ul>
<li><p>設定 Search 按鈕回調函數<br>components/Search/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 獲取用戶的輸入</span></span><br><span class="line">        <span class="comment">//const &#123;value&#125; = this.keyWordElement</span></span><br><span class="line">        <span class="comment">//const &#123;keyWordElement:&#123;value&#125;&#125; = this  // 連續解構賦值</span></span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;<span class="attr">value</span>:keyWord&#125;&#125; = <span class="built_in">this</span>  <span class="comment">// 連續解構賦值並重命名為 keyWord</span></span><br><span class="line">        <span class="built_in">console</span>.log(keyWord)</span><br><span class="line">        <span class="comment">// 發送網路請求</span></span><br><span class="line">        axios.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).then(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>, response.data)&#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;失敗&#x27;</span>, error)&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron-heading&quot;</span>&gt;</span>Search Github Users<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.keyWordElement = c&#125; type=&quot;text&quot; placeholder=&quot;enter the name you search&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.search&#125;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>將搜索出的資料透過父組件 App 傳遞給子組件 List<br>在 App.jsx 中初始化狀態，設定回呼函數給 Search 組件更新狀態，並透過 props 傳遞給 List 組件．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&quot;./components/Search&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">users</span>:[]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveUsers = <span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;users&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;users&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Search</span> <span class="attr">saveUsers</span>=<span class="string">&#123;this.saveUsers&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">users</span>=<span class="string">&#123;users&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Search 組件中取得 GitHub 資料後進行呼叫<code>saveUsers()</code>將資料儲存到 App 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        axios.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).then(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>, response.data)</span><br><span class="line">                <span class="built_in">this</span>.props.saveUsers(response.data.items)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;失敗&#x27;</span>, error)&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最後將資料傳遞給 List 組件做展示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    this.props.users.map((userObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return (</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;userObj.id&#125;</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&#123;userObj.html_url&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&#123;userObj.avatar_url&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        )</span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>結果呈現 ：</p>
<img src="/2021/11/14/frontend-react-029-github-search/01.png" class="" title="01.png"></li>
<li><p>完善List 組件<br>List 組件除了要顯示查詢出的使用者之外，還要在不同的情況下顯示提示訊息，如 : 初次進入的提示訊息、查詢中的提示及錯誤提示…等．所以我們在 App.jsx 的<code>state</code>中新增加<code>isFirst</code>欄位用於記錄是否是初次進入，<code>isLoading</code>欄位用於識別是否處於加載中，而<code>err</code>用於記錄錯誤訊息．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">users</span>:[],  <span class="comment">// 儲存查詢出的使用者資訊</span></span><br><span class="line">    <span class="attr">isFirst</span>: <span class="literal">true</span>,  <span class="comment">// 是否第一次進入</span></span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span>,  <span class="comment">// 識別是否處於加載中</span></span><br><span class="line">    <span class="attr">err</span>: <span class="string">&#x27;&#x27;</span>  <span class="comment">// 紀錄請求錯誤訊息</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateAppState = <span class="function">(<span class="params">stateObj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(stateObj)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Search</span> <span class="attr">updateAppState</span>=<span class="string">&#123;this.updateAppState&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> &#123;<span class="attr">...this.state</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意:</font> 使用批量傳入方式(<code>&lt;List &#123;...this.state&#125;/&gt;</code>)將狀態傳給 Ｌist 組件</p>
</li>
</ul>
<p>修改 Search 組件，處理各種情境下的狀態，並使用新的回調函數<code>updateAppState</code>更新 App 的 state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 獲取用戶的輸入</span></span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;<span class="attr">value</span>:keyWord&#125;&#125; = <span class="built_in">this</span>  <span class="comment">// 連續解構賦值並重命名為 keyWord</span></span><br><span class="line">        <span class="comment">// 發送請求前更新 App 狀態</span></span><br><span class="line">        <span class="built_in">this</span>.props.updateAppState(&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>, <span class="attr">isLoading</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="comment">// 發送網路請求</span></span><br><span class="line">        axios.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).then(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 請求成功後更新 App 狀態</span></span><br><span class="line">                <span class="built_in">this</span>.props.updateAppState(&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="attr">users</span>:response.data.items&#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 請求成功後更新 App 狀態</span></span><br><span class="line">                <span class="built_in">this</span>.props.updateAppState(&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="attr">err</span>:error.message&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意:</font>在錯誤時必須是儲存 error 的 message 資訊，否則在錯誤時會出現底下畫面 :</p>
<img src="/2021/11/14/frontend-react-029-github-search/02.png" class="" title="02.png">
<p>我們想要的結果如下 :</p>
<img src="/2021/11/14/frontend-react-029-github-search/03.png" class="" title="03.png">
<p>接著依據不同情境在 List 組件顯示出不一樣的結果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;users, isFirst, isLoading, err&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    isFirst ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Enter user name to search<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="xml">                    isLoading ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="xml">                    err ? <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span>&#123;err&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="xml">                    users.map((userObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return (</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;userObj.id&#125;</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&#123;userObj.html_url&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&#123;userObj.avatar_url&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        )</span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意:</font>因為在 JSX 中不可以寫 JS 語句，只可以寫表達式，所以要用 if 語句時，就要使用三元表達式代替．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 030 使用 PubSubJS 在兄弟間傳遞訊息</title>
    <url>/2021/11/15/frontend-react-030-pass-message-use-pubsubjs/</url>
    <content><![CDATA[<h1 id="兄弟間傳遞消息"><a href="#兄弟間傳遞消息" class="headerlink" title="兄弟間傳遞消息"></a>兄弟間傳遞消息</h1><p>之前要在兄弟間傳遞訊息，都需要透過父組件幫忙傳遞，現在我們引入一個簡單的消息訂閱機制<a href="https://github.com/mroderick/PubSubJS">PubSubJS</a>來幫助我們達成兄弟間訊息的傳遞。<br>我們延續前一篇文章的專案，並引入 PubSubJS 取代之前透過父組件 App 傳送訊息。<br>安裝 PubSubJS :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install pubsub-js</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ol>
<li><p>將 App 中的 state 資訊移到真正需求的組件 List<br>App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&quot;./components/Search&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Search</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>將 state 資訊移入組件 List 並訂閱消息<br>建立訂閱時間 : 在 Component 一掛載 (<code>componentDidMount()</code>) 就訂閱消息<br>解除訂閱時間 : 在 Component 一卸載 (<code>componentWillUnmount()</code>) 就解除訂閱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">users</span>:[],  <span class="comment">// 儲存查詢出的使用者資訊</span></span><br><span class="line">        <span class="attr">isFirst</span>: <span class="literal">true</span>,  <span class="comment">// 是否第一次進入</span></span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,  <span class="comment">// 識別是否處於加載中</span></span><br><span class="line">        <span class="attr">err</span>: <span class="string">&#x27;&#x27;</span>  <span class="comment">// 紀錄請求錯誤訊息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 之後要利用此 token 解除訂閱</span></span><br><span class="line">        <span class="built_in">this</span>.token = PubSub.subscribe(<span class="string">&#x27;github_search&#x27;</span>, <span class="function">(<span class="params">msg, stateObj</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(stateObj)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 當元件卸載後就取消訂閱</span></span><br><span class="line">        PubSub.unsubscribe(<span class="built_in">this</span>.token)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;users, isFirst, isLoading, err&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            ...</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改 Search 組件，向組件 List 發送消息更新 state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    search = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 獲取用戶的輸入</span></span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;<span class="attr">value</span>:keyWord&#125;&#125; = <span class="built_in">this</span>  <span class="comment">// 連續解構賦值並重命名為 keyWord</span></span><br><span class="line">        <span class="comment">// 發送請求前更新 App 狀態</span></span><br><span class="line">        PubSub.publish(<span class="string">&#x27;github_search&#x27;</span>, &#123;<span class="attr">isFirst</span>:<span class="literal">false</span>, <span class="attr">isLoading</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="comment">// 發送網路請求</span></span><br><span class="line">        axios.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).then(</span><br><span class="line">            <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 請求成功後更新 App 狀態</span></span><br><span class="line">                PubSub.publish(<span class="string">&#x27;github_search&#x27;</span>, &#123;<span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="attr">users</span>:response.data.items&#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 請求成功後更新 App 狀態</span></span><br><span class="line">                PubSub.publish(<span class="string">&#x27;github_search&#x27;</span>, &#123;<span class="attr">isLoading</span>:<span class="literal">false</span>, <span class="attr">err</span>:error.message&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>PubSubJS</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Hexo 增添流量追蹤</title>
    <url>/2021/11/15/tools-blog-hexo-next-google-analytics/</url>
    <content><![CDATA[<p>首先到<a href="https://analytics.google.com/">Google Analytics</a>申請量測，申請過程蠻簡單的就不詳述。</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/01.png" class="" title="01.png">
<span id="more"></span>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/02.png" class="" title="02.png">
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/03.png" class="" title="03.png">
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/04.png" class="" title="04.png">
<p>因為是網頁部落格應用，所以點選 Web</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/05.png" class="" title="05.png">
<p>記下評估 ID，並設定到</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/06.png" class="" title="06.png">
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/09.png" class="" title="09.png">
<p>並點選展開在底下【全域網站代碼】</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/07.png" class="" title="07.png">
<p>將此代碼複製</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/08.png" class="" title="08.png">
<p>將剛剛複製的代碼貼到 themes\next\layout_partials\head\head.swig 內的最後一行處</p>
<img src="/2021/11/15/tools-blog-hexo-next-google-analytics/10.png" class="" title="10.png">]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>GoogleAnalytics</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 031 使用 react-router-dom 當 React 路由</title>
    <url>/2021/11/16/frontend-react-031-react-router/</url>
    <content><![CDATA[<h1 id="安裝-react-router-dom"><a href="#安裝-react-router-dom" class="headerlink" title="安裝 react-router-dom"></a>安裝 react-router-dom</h1><p><font color="#FF0000">注意:</font>react-route-dom v5.x 版本與 v6.x 版本在用法上有不同，此篇使用 v5.x 版本．<br><a href="https://v5.reactrouter.com/web/guides/quick-start">react-router-dom</a><br>使用底下命令安裝 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install react-router-dom@5.2.1</span><br></pre></td></tr></table></figure>
<ul>
<li>整個路由運作流程</li>
</ul>
<ol>
<li>改變瀏覽器中 URL 的值</li>
<li>React 監聽到 URL 值的改變，渲染對應的組件</li>
</ol>
<span id="more"></span>

<h1 id="代碼實作"><a href="#代碼實作" class="headerlink" title="代碼實作"></a>代碼實作</h1><p>先將靜態頁面整個放到 App.jsx，此頁面會有一個 header 區，左側有一個導航條，分成有兩個 item，右邊是顯示 item 內容．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./item1.html&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./item2.html&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Item 2 内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>頁面呈現如下 :</p>
<img src="/2021/11/16/frontend-react-031-react-router/01.png" class="" title="01.png">
<p>將須根據路徑不同而有不同內容的頁面，分別寫成組件 Item1 和 Item2 :<br>Item1 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Item1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Item1 內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Item2 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Item2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Item2 內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改有超連結的部分，改用 react-router-dom 的 <code>&lt;Link&gt;</code> 取代</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;list-group-item&quot;</span> href=<span class="string">&quot;./item1.html&quot;</span>&gt;Item <span class="number">1</span>&lt;/a&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./item2.html&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>修改如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123;Link&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是此時會出現以下錯誤 :</p>
<img src="/2021/11/16/frontend-react-031-react-router/02.png" class="" title="02.png">
<p>這是 <code>&lt;Link&gt;</code> 必須被 <code>&lt;BrowserRouter&gt;</code> 或 <code>&lt;HashRouter&gt;</code> 包裹，源碼更改如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Link, BrowserRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目前完成第一步，點擊導航條可以讓瀏覽器的 URL 改變．</p>
<img src="/2021/11/16/frontend-react-031-react-router/03.png" class="" title="03.png">
<p>接著設定監聽 URL 改變然後渲染相對應的組件．將頁面展示區域<code>&lt;h3&gt;Item 1 内容&lt;/h3&gt;</code>改依據路徑不同渲染不同的組件 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item1&#x27;</span> component=&#123;Item1&#125;&gt;&lt;/Route&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>此時若執行會出現以下錯誤 :</p>
<img src="/2021/11/16/frontend-react-031-react-router/04.png" class="" title="04.png">
<p>這是 <code>&lt;Route&gt;</code> 必須被 <code>&lt;BrowserRouter&gt;</code> 或 <code>&lt;HashRouter&gt;</code> 包裹，源碼更改如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>
<p>此時我們發現雖然 URL 會變動，但是頁面卻沒有切換．</p>
<img src="/2021/11/16/frontend-react-031-react-router/05.png" class="" title="05.png">
<p>這是因為我們這邊使用了兩個 <code>&lt;BrowserRouter&gt;</code>，這兩個 <code>&lt;BrowserRouter&gt;</code> 是互相獨立運作的．所以我們統一在 index.js 內將 <code>&lt;App /&gt;</code> 用同一個 <code>&lt;BrowserRouter&gt;</code> 包裹．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>若是使用 <code>&lt;HashRouter&gt;</code> 則在 URL 中會有個 <code>#</code> 號出現 :</p>
<img src="/2021/11/16/frontend-react-031-react-router/06.png" class="" title="06.png">
<p>Item1 和 Item2 為路由組件與一般組件不同，通常不會放在 components 目錄中，而是放在 pages 目錄中．</p>
<img src="/2021/11/16/frontend-react-031-react-router/07.png" class="" title="07.png">

<h1 id="增加高亮效果"><a href="#增加高亮效果" class="headerlink" title="增加高亮效果"></a>增加高亮效果</h1><p>使用 <code>&lt;NavLink&gt;</code> 代替 <code>&lt;Link&gt;</code>． </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;NavLink className=<span class="string">&quot;list-group-item&quot;</span> to=<span class="string">&#x27;/item1&#x27;</span>&gt;Item <span class="number">1</span>&lt;/NavLink&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>在被點擊到時，會預設將類名加上```active```，而剛好 bootstrap 樣式一致，所以就會顯示成高亮．</span></figcaption><table><tr><td class="code"><pre><span class="line">若我們使用別的套件或是想要客製化，則 ```&lt;NavLink&gt;``` 可以透過屬性```activeClassName```設定被點擊到時要加的類名．</span><br><span class="line">```js</span><br><span class="line">&lt;NavLink activeClassName=&#x27;my_active&#x27; className=&quot;list-group-item&quot; to=&#x27;/item1&#x27;&gt;Item 1&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink activeClassName=&#x27;my_active&#x27; className=&quot;list-group-item&quot; to=&#x27;/item2&#x27;&gt;Item 2&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure>
<p>此時會發現在點擊導航條時雖有作用，但是有問題．這是因為我們有引入 bootstrap 所造成的干擾，我們提高客製化樣式就可以解決．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .my_active &#123;</span><br><span class="line">    background-color: palegreen !important;</span><br><span class="line">    color: black !important;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>觀察底下資訊，就可以知道 <code>&lt;NavLink&gt;</code> 的確有幫我們自動加上類名</p>
<img src="/2021/11/16/frontend-react-031-react-router/08.png" class="" title="08.png">

<h1 id="對-NavLink-作封裝"><a href="#對-NavLink-作封裝" class="headerlink" title="對 NavLink 作封裝"></a>對 NavLink 作封裝</h1><p>將 <code>&lt;NavLink&gt;</code> 進行封裝到 <code>&lt;MyNavLink&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NavLink&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNavLink</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;my_active&#x27;</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> &#123;<span class="attr">...this.props</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;list-group&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意 :</font> React 會將標籤體內容(<code>&lt;MyNavLink to=&#39;/item1&#39;&gt;Item 1&lt;/MyNavLink&gt;</code> 中的 Item 1)設定到屬性名為<code>children</code></p>
<h1 id="使用-Switch"><a href="#使用-Switch" class="headerlink" title="使用 Switch"></a>使用 Switch</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item1&#x27;</span> component=&#123;Item1&#125; /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>上述代碼，若沒有使用 <code>&lt;Switch&gt;</code> 包裹的情況下，則會從頭到尾尋找出匹配的 path 進行組件選染，結果如下圖所示，路徑<code>/item2</code>會顯示出兩個網頁內容．</p>
<img src="/2021/11/16/frontend-react-031-react-router/09.png" class="" title="09.png">
<p>而使用 <code>&lt;Switch&gt;</code> 包裹的情況下，只會匹配一個路徑就不會繼續往下匹配了，效率較高．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/16/frontend-react-031-react-router/10.png" class="" title="10.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 032 React 多層路徑路由的樣式丟失</title>
    <url>/2021/11/18/frontend-react-032-react-router-loss-css/</url>
    <content><![CDATA[<p>延續上篇的文章，現在有個情境是需要在原本的<code>/item1</code>路徑前面加上版本號，變成<code>/v1/item1</code>．<br>所以我們把 App.jsx 檔案修改成 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    &lt;div className=<span class="string">&quot;list-group&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/v1/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/v1/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">    &lt;div className=<span class="string">&quot;panel-body&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/v1/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/v1/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>先點擊一下導航條的<code>Item 1</code>，畫面呈現如下 :</p>
<img src="/2021/11/18/frontend-react-032-react-router-loss-css/01.png" class="" title="01.png">
<p>此時在 Reload 頁面，就會發現頁面亂了．</p>
<img src="/2021/11/18/frontend-react-032-react-router-loss-css/02.png" class="" title="02.png">
<p>這是因為 CSS 的請求路徑錯誤了，而 react 只要找不到，就會返回 index.html．所以畫面就只顯示沒有樣式的 index.html．</p>
<img src="/2021/11/18/frontend-react-032-react-router-loss-css/03.png" class="" title="03.png">
<img src="/2021/11/18/frontend-react-032-react-router-loss-css/04.png" class="" title="04.png">
<p>要解決這個問題有三個方式 :</p>
<ol>
<li>index.html 中引入樣式時不寫成 ./ 只寫 /<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/bootstrap.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>index.html 中引入樣式時用 %PUBLIC_URL% 方式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/css/bootstrap.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用 HashRouter<br>推薦使用 1 &gt; 2 &gt; 3 的方式．</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 033 React 路徑匹配</title>
    <url>/2021/11/19/frontend-react-033-route-path-match/</url>
    <content><![CDATA[<h1 id="模糊匹配與嚴格匹配"><a href="#模糊匹配與嚴格匹配" class="headerlink" title="模糊匹配與嚴格匹配"></a>模糊匹配與嚴格匹配</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>將上面的源碼中的<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>修改成<code>&lt;Route path=&#39;/item2/message/new&#39; component=&#123;Item2&#125; /&gt;</code></p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/new&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>這樣還可以匹配上嗎? 答案是匹配不上。</p>
<img src="/2021/11/19/frontend-react-033-route-path-match/01.png" class="" title="01.png">
<p>但是我們將<code>&lt;MyNavLink to=&#39;/item2&#39;&gt;Item 2&lt;/MyNavLink&gt;</code>修改成<code>&lt;MyNavLink to=&#39;/item2/message/new&#39;&gt;Item 2&lt;/MyNavLink&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/message/new&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>這樣可匹配上嗎? 答案是可匹配的。</p>
<img src="/2021/11/19/frontend-react-033-route-path-match/02.png" class="" title="02.png">
<p>如果是將<code>&lt;MyNavLink to=&#39;/item2&#39;&gt;Item 2&lt;/MyNavLink&gt;</code>修改成<code>&lt;MyNavLink to=&#39;/message/item2/new&#39;&gt;Item 2&lt;/MyNavLink&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/message/item2/new&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>這樣又匹配不上。</p>
<img src="/2021/11/19/frontend-react-033-route-path-match/03.png" class="" title="03.png">
<p>結論就是 React 會將<code>&lt;MyNavLink to=&#39;/message/item2/new&#39;&gt;Item 2&lt;/MyNavLink&gt;</code>依序取出<code>message</code>、<code>item2</code>及<code>new</code>進行對<code>&lt;Route path=&#39;/item1&#39; component=&#123;Item1&#125; /&gt;</code>和<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>進行匹配，當第一次取出<code>message</code>時就匹配不到一個，所以就停止後面的匹配動作。<br>而<code>&lt;MyNavLink to=&#39;/item2/message/new&#39;&gt;Item 2&lt;/MyNavLink&gt;</code>這個順序，在第一次匹配時就會匹配到<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>就算後續的都沒匹配到也會傳回這個結果，這就是模糊匹配。<br>可以透過屬性 exact 讓 react 進行嚴格匹配，即路徑必須完成一模一樣才算匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item1&#x27;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/message/new&#x27;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>上面源碼如果沒有加上<code>exact=&#123;true&#125;</code>是可以匹配到的，但是加上後就匹配不到了。</p>
<img src="/2021/11/19/frontend-react-033-route-path-match/04.png" class="" title="04.png">
<p><font color="#FF0000">注意 : 嚴格匹配不要隨便開起，否則會引發無法繼續批配多級路由，開啟時間為使用模糊匹配已經解決不了才開啟。</font></p>
<h1 id="Redirect-的使用"><a href="#Redirect-的使用" class="headerlink" title="Redirect 的使用"></a>Redirect 的使用</h1><p>其作用可以用來指定預設的匹配路徑，也可以說當沒有一條規格匹配上時，就會指明要去哪邊。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">&#x27;/item1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item1&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span>=<span class="string">&#123;true&#125;</span> <span class="attr">path</span>=<span class="string">&#x27;/item2&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Item2&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/item2&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>
<p><font color="#FF000">注意 : <code>&lt;Redirect to=&quot;/item2&quot; /&gt;</code> 要寫在最下方。</font><br>此時在瀏覽器輸入 <a href="http://localhost:3000/">http://localhost:3000</a> 後按下 Enter 後就會跳轉到 <a href="http://localhost:3000/item2">http://localhost:3000/item2</a></p>
<img src="/2021/11/19/frontend-react-033-route-path-match/05.png" class="" title="05.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
        <tag>Match</tag>
      </tags>
  </entry>
  <entry>
    <title>Tip - create-react-app 沒有生成相關檔案</title>
    <url>/2021/11/19/tip-create-react-app-not-working/</url>
    <content><![CDATA[<p>某一天要創建 react 專案，發現建立好的專案並沒有 index.html、App.js … 等。上網找了好久都沒有找到明確的說明，看到某一篇文章說他是因為輸入了 <code>npm update -g</code>之後，npm 才開始有問題的，我想了一下，前幾天因為命令提示我的版本太舊需要更新時也有輸入過，看了其他幾篇文章說這是因為新舊版本問題，我的 node.js 安裝到現在也超過三年了，所以我想應該是這個原因，所以我就重新安裝後就恢復正常了，底下是我的處理步驟 :</p>
<span id="more"></span>
<ol>
<li>卸載 node.js<br>在【控制台】中點擊【程式與功能】進入後，選擇 node.js 後按下解除安裝。<img src="/2021/11/19/tip-create-react-app-not-working/01.png" class="" title="01.png">
<img src="/2021/11/19/tip-create-react-app-not-working/02.png" class="" title="02.png"></li>
<li>移除 cache 資料<br>在 C:\Users\Steven\AppData\Roaming 中如果有資料夾【npm】和【npm-cache】將其刪除。<img src="/2021/11/19/tip-create-react-app-not-working/03.png" class="" title="03.png"></li>
<li>安裝 node.js<br>下載網址 : <a href="https://nodejs.org/zh-tw/download/">Nodejs</a><br>下載完後就是無腦 next</li>
<li>安裝相關套件<br>因為是重砍掉了，所以一些 npm 套件都要重新安裝回來，如 : <code>npm install -g hexo-cli</code></li>
</ol>
]]></content>
      <categories>
        <category>Tip</category>
      </categories>
      <tags>
        <tag>create-react-app</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 034 嵌套路由</title>
    <url>/2021/11/19/frontend-react-034-nested-routes/</url>
    <content><![CDATA[<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>延續之前的範例，只不過現在將 Item2 頁面變成不單單只有顯示一行文字，而是具有一個導航條與內容區．畫面如下 :</p>
<img src="/2021/11/19/frontend-react-034-nested-routes/01.png" class="" title="01.png">
<span id="more"></span>
<p>在組件 Item2 下，新增兩個路由組件 News 和 Message<br>In /pages/Item2/News/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">News</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>news001<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>news002<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>news003<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In /pages/Item2/Message/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message1&quot;</span>&gt;</span>message001<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message2&quot;</span>&gt;</span>message002<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message/3&quot;</span>&gt;</span>message003<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 /pages/Item2/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Switch, Route&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MyNavLink <span class="keyword">from</span> <span class="string">&#x27;../../components/MyNavLink&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;./News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Item2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Item2 內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此時點選 Item2 的<code>&lt;MyNavLink to=&#39;/news&#39;&gt;News&lt;/MyNavLink&gt;</code>，就會將<code>/news</code>拿出來依照路由註冊順序開始匹配，即先比對 App.jsx <code>&lt;Route path=&#39;/item1&#39; component=&#123;Item1&#125; /&gt;</code>，後比對<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>，都沒有匹配到<code>/news</code>就會使用<code>&lt;Redirect to=&quot;/item1&quot; /&gt;</code>跳轉．</p>
<img src="/2021/11/19/frontend-react-034-nested-routes/02.png" class="" title="02.png">
<img src="/2021/11/19/frontend-react-034-nested-routes/03.png" class="" title="03.png">
<p>所以我們設定時要帶上父組件路徑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;Item2 內容&lt;/h2&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<img src="/2021/11/19/frontend-react-034-nested-routes/04.png" class="" title="04.png">
<p>繼續補上註冊路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Switch, Route&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MyNavLink <span class="keyword">from</span> <span class="string">&#x27;../../components/MyNavLink&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;./News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Item2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Item2 內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/news&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此時點擊 Item2 組件的 News 時，會將 <code>&lt;MyNavLink to=&#39;/item2/news&#39;&gt;News&lt;/MyNavLink&gt;</code>抽出 item2 及 news 進行匹配動作，首先檢查 App.jsx 中的<code>&lt;Route path=&#39;/item1&#39; component=&#123;Item1&#125; /&gt;</code>並不匹配，接著檢查<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>模糊匹配成功，就是因為此模糊匹配成功，所以讓組件 Item2 的頁面沒有被清掉而被渲染，所以組件中的 <code>&lt;Route path=&#39;/item2/news&#39; component=&#123;News&#125; /&gt;</code>和<code>&lt;Route path=&#39;/item2/message&#39; component=&#123;Message&#125; /&gt;</code>被註冊到路由中，且會拿 item2 及 news 繼續進行匹配動作，此時就會完全匹配到<code>&lt;Route path=&#39;/item2/news&#39; component=&#123;News&#125; /&gt;</code>而做 News 組件的掛載．</p>
<ul>
<li>嚴格匹配的問題<br>此時若是將<code>&lt;Route path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>開啟嚴格匹配<code>&lt;Route exact path=&#39;/item2&#39; component=&#123;Item2&#125; /&gt;</code>則原本因為模糊匹配成功進而掛載組件 Item2 讓比對可以進行下去的機制被破壞掉了．</li>
</ul>
<p>最後將預設路由設定上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/news&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#x27;/item2/news&#x27;</span> /&gt;</span></span></span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Nested Route</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 035 傳遞資料給路由組件</title>
    <url>/2021/11/19/frontend-react-035-pass-message-to-route-component/</url>
    <content><![CDATA[<h1 id="透過-params-傳遞數據給路由組件"><a href="#透過-params-傳遞數據給路由組件" class="headerlink" title="透過 params 傳遞數據給路由組件"></a>透過 params 傳遞數據給路由組件</h1><p>延續上篇文章的範例，修改 Message 組件，讓他可以點下超連接就顯示一個新的 Detail 組件．<br>首先先建立 state 儲存 message 資料，並且使用 map 方式自動建立出超連結．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">messageArr</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message1&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message2&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message3&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        messageArr.map((messageObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return (</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;messageObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/message1&quot;</span>&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            )</span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>新增 Detail 組件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DeatilData = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 2&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 3&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:??<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Title:??<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Content:??<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為不需要點選時有高亮效果，所以將<code>&lt;a&gt;</code>改成<code>&lt;Link&gt;</code>即可，並使用 parameter 方式傳數據並註冊路由．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Link, Route&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">&#x27;./Detail&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">messageArr</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message01&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message02&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;message03&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        messageArr.map((messageObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return (</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;messageObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    &#123;/* 向路由組件傳遞 params 參數 */&#125;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">item2</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">messageObj.id</span>&#125;/$&#123;<span class="attr">messageObj.title</span>&#125;`&#125;&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            )</span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 向路由組件傳遞 params 參數 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/detail/:id/:title&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將傳入 Detail 組件的數據取出並展示，React 會將 params 放在<code>this.props.match.params</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DeatilData = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 2&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;content 3&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id, title&#125; = <span class="built_in">this</span>.props.match.params</span><br><span class="line">        <span class="keyword">const</span> findResult = DeatilData.find(<span class="function">(<span class="params">detailObj</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> detailObj.id === id</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Title:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Content:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最終畫面呈現 :</p>
<img src="/2021/11/19/frontend-react-035-pass-message-to-route-component/01.png" class="" title="01.png">

<h1 id="透過-search-傳遞數據給路由組件"><a href="#透過-search-傳遞數據給路由組件" class="headerlink" title="透過 search 傳遞數據給路由組件"></a>透過 search 傳遞數據給路由組件</h1><ol>
<li>先設定向路由組件傳遞參數<br>將<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;<span class="string">`/item2/message/detail/<span class="subst">$&#123;messageObj.id&#125;</span>/<span class="subst">$&#123;messageObj.title&#125;</span>`</span>&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure>
改為<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;<span class="string">`/item2/message/detail/?id=<span class="subst">$&#123;messageObj.id&#125;</span>&amp;title=<span class="subst">$&#123;messageObj.title&#125;</span>`</span>&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure></li>
<li>聲明接收參數<br>將<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item2/message/detail/:id/:title&#x27;</span> component=&#123;Detail&#125; /&gt;</span><br></pre></td></tr></table></figure>
因為此方式無需聲明，所以改成<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item2/message/detail&#x27;</span> component=&#123;Detail&#125; /&gt;</span><br></pre></td></tr></table></figure></li>
<li>接收參數<br>在接收數據的組件 Detail.jsx 中，已經不能由<code>props.match.params</code>取得數據，所以底下這行必須刪除<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;id, title&#125; = <span class="built_in">this</span>.props.match.params</span><br></pre></td></tr></table></figure>
而使用此方式傳遞數據，react 會將數據放在<code>props.location</code>且並沒有幫我們整理，格式像<code>?id=01&amp;title=message01</code>所以我們需要借助 querystring 套件幫忙剖析．<img src="/2021/11/19/frontend-react-035-pass-message-to-route-component/02.png" class="" title="02.png"></li>
</ol>
<ul>
<li>querystring 套件<br>如果是使用 create-react-app 方式建立專案，則預設就已經安裝好了，所以直接引入使用即可．<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;querystring&#x27;</span></span><br></pre></td></tr></table></figure>
他提供兩個有用的方法 :</li>
</ul>
<ol>
<li>parse() : 將 urlencode 字串轉成 key-value 對象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;id=1&amp;name=steven&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(qs.parse(str))</span><br></pre></td></tr></table></figure>
輸出一個對象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">id</span>:<span class="string">&quot;1&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;steven&quot;</span> &#125;</span><br></pre></td></tr></table></figure></li>
<li>stringify() : 將 key-value 對象轉成 urlencode 字串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;stevven&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(qs.stringify(obj))</span><br></pre></td></tr></table></figure>
輸出一個 urlencode 字串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;id=1&amp;name=steven&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>所以在 Detail.jsx 中原本接收方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;id, title&#125; = <span class="built_in">this</span>.props.match.params</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;search&#125; = <span class="built_in">this</span>.props.location</span><br><span class="line"><span class="keyword">const</span> &#123;id, title&#125; = qu.parse(search.slice(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意:</font><code>props.location</code>的值，前面有一個問號，如 : <code>?id=01&amp;title=message01</code>，記得要把他去除．</p>
<h1 id="透過-state-傳遞數據給路由組件"><a href="#透過-state-傳遞數據給路由組件" class="headerlink" title="# 透過 state 傳遞數據給路由組件"></a># 透過 state 傳遞數據給路由組件</h1><ol>
<li>先設定向路由組件傳遞參數<br>將<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;<span class="string">`/item2/message/detail/?id=<span class="subst">$&#123;messageObj.id&#125;</span>&amp;title=<span class="subst">$&#123;messageObj.title&#125;</span>`</span>&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure>
改為<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;&#123;<span class="attr">pathname</span>: <span class="string">&#x27;/item2/message/detail&#x27;</span>, <span class="attr">state</span>:&#123;<span class="attr">id</span>:messageObj.id,<span class="attr">title</span>:messageObj.title&#125;&#125;&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure></li>
<li>聲明接收參數<br>跟用 search 方式一樣，無需聲明<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/item2/message/detail&#x27;</span> component=&#123;Detail&#125; /&gt;</span><br></pre></td></tr></table></figure></li>
<li>接收參數<br>使用此方式傳遞數據，react 會將數據放在<code>props.location.state</code><img src="/2021/11/19/frontend-react-035-pass-message-to-route-component/03.png" class="" title="03.png">
所以需更改在 Detail.jsx 的接收方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收 state 參數</span></span><br><span class="line"><span class="keyword">const</span> &#123;id, title&#125; = <span class="built_in">this</span>.props.location.state</span><br></pre></td></tr></table></figure>
<font color="#FF0000">注意 : </font><br>因為使用此方法沒有在瀏覽器的 URL 中有紀錄參數，所以當使用者複製 URL 路徑後在瀏覽器的新視窗開啟，會出現以下錯誤訊息 :<img src="/2021/11/19/frontend-react-035-pass-message-to-route-component/04.png" class="" title="04.png">
這是因為新視窗中並沒有<code>props.location.state</code>資料是 undefined<br>所以我們可針對這些錯誤進行改善，增加使用者體驗，底下就是一個最簡單的方式，讓所有的值都有定義 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onst &#123;id, title&#125; = <span class="built_in">this</span>.props.location.state || &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findResult = DeatilData.find(<span class="function">(<span class="params">detailObj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> detailObj.id === id</span><br><span class="line">&#125;) || &#123;&#125;</span><br></pre></td></tr></table></figure>
<code>onst &#123;id, title&#125; = this.props.location.state || &#123;&#125;</code>這種寫法是當<code>this.props.location.state</code>是 undefined 時就拿後面的<code>&#123;&#125;</code>進行取值．</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 036 push 和 replace 和編程路徑</title>
    <url>/2021/11/20/frontend-react-036-program-route/</url>
    <content><![CDATA[<p>一般使用<code>&lt;Link&gt;</code>預設都是 push 模式，即會路由 push 到堆棧中，以便使用者按下後退鈕時可以回到上一次的頁面．<br>而使用<code>&lt;Link replace&gt;</code>方式，則是將路徑覆蓋掉最上層的，所以使用者是沒有辦法透過按下後退鈕返回上一頁．</p>
<h1 id="編程路由"><a href="#編程路由" class="headerlink" title="編程路由"></a>編程路由</h1><p>在某些情況下不是透過<code>&lt;Link&gt;</code>跳轉，而是透過像是<code>&lt;button&gt;</code>觸發跳轉，此時就需要編程路由，而使用<code>react-router-dom</code>會將這些基本控制 hstory 的 API 封裝到<code>props.history</code>下．</p>
<span id="more"></span>
<img src="/2021/11/20/frontend-react-036-program-route/01.png" class="" title="01.png">
<ol>
<li>push(path, state) : 一般路由跳轉會留下歷史紀錄</li>
<li>replace(path, state) : 跳轉後不會留下歷史紀錄</li>
<li>goBack() : 返回上一頁</li>
<li>goForward() : 往下一頁</li>
<li>go(n) : 若為正數則為往下跳轉 n 頁，若為負數，則往回跳轉 n 頁．<br>而且三種向路由組件傳遞參數的方式也全都可以用編程方式實現．<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  replaceShow = <span class="function">(<span class="params">id, title</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.replace(<span class="string">`/item2/message/detail`</span>, &#123;id, title&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pushShow = <span class="function">(<span class="params">id, title</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.push(<span class="string">`/item2/message/detail`</span>, &#123;id, title&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  back = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.goBack()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  forward = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.goForward()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.history.go(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  &#123;</span></span><br><span class="line"><span class="xml">                      messageArr.map((messageObj) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                          return (</span></span><br><span class="line"><span class="xml">                              <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;messageObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                  &#123;/* 向路由組件傳遞 params 參數 */&#125;</span></span><br><span class="line"><span class="xml">                                  &#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">item2</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">messageObj.id</span>&#125;/$&#123;<span class="attr">messageObj.title</span>&#125;`&#125;&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">                                  &#123;/* 向路由組件傳遞 search 參數 */&#125;</span></span><br><span class="line"><span class="xml">                                  &#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">item2</span>/<span class="attr">message</span>/<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;messageObj.id&#125;&amp;title</span>=<span class="string">$&#123;messageObj.title&#125;</span>`&#125;&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">                                  &#123;/* 向路由組件傳遞 state 參數 */&#125;</span></span><br><span class="line"><span class="xml">                                  <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span> &#x27;/<span class="attr">item2</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;, <span class="attr">state:</span>&#123;<span class="attr">id:messageObj.id</span>,<span class="attr">title:messageObj.title</span>&#125;&#125;&#125;&gt;</span>&#123;messageObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                  <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.pushShow(messageObj.id, messageObj.title)&#125;&gt;push 查看消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                  <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.replaceShow(messageObj.id, messageObj.title)&#125;&gt;replace 查看消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                          )</span></span><br><span class="line"><span class="xml">                      &#125;)</span></span><br><span class="line"><span class="xml">                  &#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">              &#123;/* 聲明接收 params 參數 */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/detail/:id/:title&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* 無需聲明接收 search 參數 */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/detail&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">              &#123;/* 無需聲明接收 state 參數 */&#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/item2/message/detail&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forward&#125;</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>Go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="withRouter-的使用"><a href="#withRouter-的使用" class="headerlink" title="withRouter() 的使用"></a>withRouter() 的使用</h1><p>如果組件是路由組件的話，其預設就有<code>props.history</code>…等對象，而一般組件若是也要操控路由的話，就必須用<code>withRouter()</code>包寡一下組件．<br>假設情境是在 Header 組件要可以操控路由，則必須修改為 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    back = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.history.goBack()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    forward = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.history.goForward()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    go = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.history.go(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forward&#125;</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>Go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(Header)</span><br></pre></td></tr></table></figure>
<img src="/2021/11/20/frontend-react-036-program-route/02.png" class="" title="02.png">


<ul>
<li>後續疑問<br>用<code>&lt;Link to=&#123;&#123;pathname: '/item2/message/detail', state:&#123;id:messageObj.id,title:messageObj.title&#125;&#125;&#125;&gt;&#123;messageObj.title&#125;&lt;/Link&gt;</code>方式，依序點擊 message01 -&gt; message02，然後按下返回鍵，此時點擊 message01 超連結時，是正常的 push 模式<img src="/2021/11/20/frontend-react-036-program-route/03.png" class="" title="03.png">
然後點擊 message02 就變成 replace 模式<img src="/2021/11/20/frontend-react-036-program-route/04.png" class="" title="04.png">
此時點返回，我本以為是會回到 message01，但是卻跳到 message<img src="/2021/11/20/frontend-react-036-program-route/05.png" class="" title="05.png">
跟我想的有點不一樣，但是使用按下 [push 查看訊息] 的方式時，就會 message01 -&gt; message02，然後按下返回時會回到 message01．<img src="/2021/11/20/frontend-react-036-program-route/06.png" class="" title="06.png">
有兩個差異點 :</li>
</ul>
<ol>
<li>往 message02 時，一個是 replace，另一個是 push</li>
<li>按返回時，一個是無打印訊息，另一個是 pop</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Route</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 037 react ui 庫 - Ant-Design</title>
    <url>/2021/11/21/frontend-react-037-react-ui/</url>
    <content><![CDATA[<h1 id="三個較有名的-UI-庫"><a href="#三個較有名的-UI-庫" class="headerlink" title="三個較有名的 UI 庫"></a>三個較有名的 UI 庫</h1><ol>
<li>MUI : <a href="https://mui.com/zh/">https://mui.com/zh/</a><img src="/2021/11/21/frontend-react-037-react-ui/01.png" class="" title="01.png">
<span id="more"></span></li>
<li>Ant-Design : <a href="https://ant.design/index-cn">https://ant.design/index-cn</a><img src="/2021/11/21/frontend-react-037-react-ui/02.png" class="" title="02.png"></li>
<li>Element-React : <a href="https://elemefe.github.io/element-react/#/zh-CN/quick-start">https://elemefe.github.io/element-react/#/zh-CN/quick-start</a><img src="/2021/11/21/frontend-react-037-react-ui/03.png" class="" title="03.png"></li>
</ol>
<h1 id="Ant-Design-的使用"><a href="#Ant-Design-的使用" class="headerlink" title="Ant-Design 的使用"></a>Ant-Design 的使用</h1><p>以 Ant-Design 作為範例使用，其他的 UI 庫也是類似的方法，此種使用 UI 庫的方式，一般都是用於搭建內部使用的系統，快速且又擁有一致性，對於公司對外的項目，就比較不太適合，因為每個品牌都有自己的獨特性．<br>首先要安裝 antd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install antd</span><br></pre></td></tr></table></figure>
<p>比如說我們要加入一個組件，首先先到官網上尋找所需組件，比如說要新增一個按鈕，就先到官網上找</p>
<img src="/2021/11/21/frontend-react-037-react-ui/04.png" class="" title="04.png">
<p>往下就有各式各樣的按鈕範例</p>
<img src="/2021/11/21/frontend-react-037-react-ui/05.png" class="" title="05.png">
<p>按下[顯示代碼]就可以看到是怎樣寫的</p>
<img src="/2021/11/21/frontend-react-037-react-ui/06.png" class="" title="06.png">
<p>將其複製到自己的專案中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>啟動後會發現沒有樣式</p>
<img src="/2021/11/21/frontend-react-037-react-ui/07.png" class="" title="07.png">
<p>加入樣式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/21/frontend-react-037-react-ui/08.png" class="" title="08.png">
<p>在官網的最下面，也會列出該組件可以設定的屬性</p>
<img src="/2021/11/21/frontend-react-037-react-ui/09.png" class="" title="09.png">

<ul>
<li><p>圖標引入與使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;HomeOutlined&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">HomeOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/21/frontend-react-037-react-ui/10.png" class="" title="10.png"></li>
<li><p>DatePicker</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button, DatePicker&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;HomeOutlined&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; RangePicker &#125; = DatePicker;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">HomeOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">RangePicker</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/21/frontend-react-037-react-ui/11.png" class="" title="11.png"></li>
</ul>
<h1 id="按照組件引入-CSS"><a href="#按照組件引入-CSS" class="headerlink" title="按照組件引入 CSS"></a>按照組件引入 CSS</h1><p>因為整個 antd 的樣式檔太大了，約 60 kb，我們只想引入用到的樣式就好．<br><a href="https://3x.ant.design/docs/react/use-with-create-react-app-cn">參考官網</a></p>
<img src="/2021/11/21/frontend-react-037-react-ui/12.png" class="" title="12.png">
<p>首先安裝兩個套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install react-app-rewired customize-cra</span><br></pre></td></tr></table></figure>
<p>將 package.json 中原本用 react-scripts 啟動的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-scripts start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-scripts build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-scripts test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>改成用 react-app-rewired 啟動</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-app-rewired start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-app-rewired build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-app-rewired test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>安裝 babel-plugin-import，他是一個可以讓我們按需加載組件代碼與樣式的 babel 插件．</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install babel-plugin-import</span><br></pre></td></tr></table></figure>
<p>然後在項目的根目錄中建立 config-overrides.js 用於修改預設配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置具體的修改規則</span></span><br><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  fixBabelImports(<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">libraryName</span>: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">    <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">    <span class="attr">style</span>: <span class="string">&#x27;css&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>將之前配置的樣式刪掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button, DatePicker&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;HomeOutlined&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"><span class="comment">//import &#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; RangePicker &#125; = DatePicker;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">HomeOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">RangePicker</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新啟動 npm start<br>若跟之前的頁面一樣的話，則表示按需引入樣式成功</p>
<img src="/2021/11/21/frontend-react-037-react-ui/13.png" class="" title="13.png">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>UI Library</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 038 redux 基本使用</title>
    <url>/2021/11/21/frontend-react-038-redux-basic/</url>
    <content><![CDATA[<img src="/2021/11/21/frontend-react-038-redux-basic/01.png" class="" title="01.png">
<p>[React Components] 發送一個事件請求給 [Action Creators]，[Action Creators] 就該事件請求包裝成一個 action，內有類型 (type) 和 資料 (data)，然後透過 dispatch(action) 轉發給 [Store]，而 [Store] 就將前次狀態 (previosState) 和 action 交給適當的 [Reducers] 進行處理，並將處理結果 (newState) 返回給 [Store]，而有需要的組件則透過 getState() 取得資訊．</p>
<span id="more"></span>
<h1 id="三個核心概念"><a href="#三個核心概念" class="headerlink" title="三個核心概念"></a>三個核心概念</h1><ol>
<li>action<br>為一個動作對象，包含了兩個屬性 :</li>
<li>type : 類別屬性，值為字串，唯一且必要</li>
<li>data : 數據屬性，任意類型資料，非必要</li>
<li>reducer<br>用於初始化狀態或加工裝態，</li>
<li>store<br>將 state、action 及 reducer 聯繫在一起的對象</li>
</ol>
<p>創建好一個 react 專案，新建一個 Count 組件並把他放到 App 組件中<br>/components/Count/index.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    descrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count-value*<span class="number">1</span>&#125;)    </span><br><span class="line">    &#125;</span><br><span class="line">    incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>當前計算結果 : &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.descrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>當前計算結果為奇數時相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>異步相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>App.jsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建外殼組件 App</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">&#x27;./components/Count&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Count</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>結果呈現</p>
<img src="/2021/11/21/frontend-react-038-redux-basic/02.png" class="" title="02.png">

<h1 id="精簡版本"><a href="#精簡版本" class="headerlink" title="精簡版本"></a>精簡版本</h1><p>先沒有使用 [Action Creators] 這部分．</p>
<ul>
<li>安裝 redux<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install redux</span><br></pre></td></tr></table></figure>
建立 redux 目錄將 store.js 和相關 reducer，如 count_reducer.js 放在一起<img src="/2021/11/21/frontend-react-038-redux-basic/03.png" class="" title="03.png">
在 store.js 中使用 createStore() 創建 store<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本文件專門用於提供 store 對象，且整個應用只會有一個 store</span></span><br><span class="line"><span class="comment">// 引入創建 store 的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReducer)</span><br></pre></td></tr></table></figure>
創建 count_reducer.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用於創建一個為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> preState + data</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> preState = data</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
引入 redux 修改組件 Count<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 檢測 redux 中狀態變化，如果有變化則調用 render</span></span><br><span class="line">        store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="comment">// store 只負責狀態更新，不負責頁面更新</span></span><br><span class="line">        store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    descrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;decrement&#x27;</span>, <span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="keyword">const</span> count = store.getState()</span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>當前計算結果 : &#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.descrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>當前計算結果為奇數時相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>異步相加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
另一個偵測 store 變化的方式不是在 Count.jsx 中用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 檢測 redux 中狀態變化，如果有變化則調用 render</span></span><br><span class="line">    store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
而是在根目錄的 index.js 中<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="完整版本"><a href="#完整版本" class="headerlink" title="完整版本"></a>完整版本</h1><p>使用 [Action Creators]<br>為了避免手誤，通常會將 action 對象中的 type 類型定義為常數，所以在 redux 目錄下，新增 constant.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用於定義 action 對象中的 type 類型的常數，已避免拼錯字串</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">&#x27;decrement&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在 redux 目錄中建立 count_action.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 為 Count 組件生成 action 對象</span></span><br><span class="line"><span class="comment">/*function createIncrementAction(data) &#123;</span></span><br><span class="line"><span class="comment">    return &#123;type:&#x27;increment&#x27;, data&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可精簡為下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:INCREMENT, data&#125;)</span><br><span class="line"><span class="comment">/*function createDecrementAction(data) &#123;</span></span><br><span class="line"><span class="comment">    return &#123;type:&#x27;decrement&#x27;, data&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">// 可精簡為下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:DECREMENT, data&#125;)</span><br></pre></td></tr></table></figure>
<p>另外修改 count_reducer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用於創建一個為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> INCREMENT:</span><br><span class="line">            <span class="keyword">return</span> preState + data</span><br><span class="line">        <span class="keyword">case</span> DECREMENT:</span><br><span class="line">            <span class="keyword">return</span> preState - data</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 039 redux 進階使用</title>
    <url>/2021/11/21/frontend-react-039-redux-advanced/</url>
    <content><![CDATA[<p>目標將原本的異步相加，改成用異步 action 方式．<br>修改 Count 組件，直接調用一個 [Action Creators] (createIncrementAsyncAction(data, time))</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line"><span class="comment">//        setTimeout(()=&gt;&#123;</span></span><br><span class="line">            store.dispatch(createIncrementAsyncAction(value*<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line"><span class="comment">//        &#125;, 1000)</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在 count_action.js 中新增 createIncrementAsyncAction(data, time)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data, time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            store.dispatch(createIncrementAction(data))</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>此時點選異步相加，則會出現錯誤</p>
<img src="/2021/11/21/frontend-react-039-redux-advanced/01.png" class="" title="01.png">
<p>因為 store 一般只接收 Object 對象，如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">type</span>:<span class="string">&#x27;decrement&#x27;</span>, data&#125;</span><br></pre></td></tr></table></figure>
<p>而異步 action 返回的是一個函數，所以需要借助 <code>redux-thunk</code><br>先安裝 <code>redux-thunk</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install redux-thunk</span><br></pre></td></tr></table></figure>
<p>在 store.js 中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本文件專門用於提供 store 對象，且整個應用只會有一個 store</span></span><br><span class="line"><span class="comment">// 引入創建 store 的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入為 Count 組件服務的 reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="comment">// 引入 redux-thunk 用於處理異步 action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReducer, applyMiddleware(thunk))</span><br></pre></td></tr></table></figure>
<p>以上代碼已經可以成功運行異步 action，但是我們可以精簡 count_action.js </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 為 Count 組件生成 action 對象</span></span><br><span class="line"><span class="comment">/*function createIncrementAction(data) &#123;</span></span><br><span class="line"><span class="comment">    return &#123;type:&#x27;increment&#x27;, data&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; DECREMENT, INCREMENT &#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span></span><br><span class="line"><span class="comment">//import store from &quot;./store&quot;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/*export const createIncrementAsyncAction = (data, time) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    return ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">            store.dispatch(createIncrementAction(data))</span></span><br><span class="line"><span class="comment">        &#125;, time)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">// 因為在異步 action 中，store 在調用時自動就會把 dispatch() 當作參數傳入，所以可以改成</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data, time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            dispatch(createIncrementAction(data))</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>外鍵更新規則</title>
    <url>/2021/11/23/database-foreign-key-updated-rule/</url>
    <content><![CDATA[<p>一般外鍵更新的規則有以下四種 :</p>
<ol>
<li>CASCADE<br>只要被參考的欄位被刪除或更新，則對應的外鍵欄位也要一併被刪除或更新。                                    </li>
<li>RESTRICT<br>只要有被參考到，則禁止刪除或更新。</li>
<li>NO ACTION<br>被參考的欄位被更新或刪除，當作外鍵的欄位不做任何動作，直到根據外鍵做參考時才會發現錯誤。</li>
<li>SET NULL<br>被參考的欄位被更新或刪除，則被當作外鍵的欄位將被設定為NULL，而外鍵欄位必需要被允許為空。</li>
</ol>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Foreign Key</tag>
      </tags>
  </entry>
</search>
