<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>個人部落格工具 - Hexo</title>
    <url>/2021/10/10/tools-blog-hexo-install/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為之前都是使用 Word 或 Power Point 方式整理筆記，但是隨著筆記越來越多，當又出現之前踩到的雷時，想要去找到之前的筆記變得越來越困難，雖然中間嘗試著用目錄進行筆記分類，但是有些筆記內容是屬於多個分類的，導致在分類上難以進行一個很明確的分類．<br>再者因為硬碟的損毀導致部份筆記遺失，所以一直想要將筆記放在網路上，一方面做為備份，另一方面也可以隨時隨地查閱筆記．<br>今天在 Youtube 看教學時，Youtube 突然推薦了一個關於 Ｈexo 搭配 Github 建立一個 blog 的影片引起我的注意，看完之後雖然不完全是我心目中記錄筆記的方式，但是也相去不遠了，所以才有這篇文章的產生．</p>
<span id="more"></span>
<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><h2 id="安裝-Nodej"><a href="#安裝-Nodej" class="headerlink" title="安裝 Nodej"></a>安裝 Nodej</h2><img src="/2021/10/10/tools-blog-hexo-install/download_nodejs.png" class="" title="download_nodejs">
<p>下載網址 : <a href="https://nodejs.org/zh-tw/download/">Nodejs</a><br>安裝方式 : 無腦安裝法</p>
<ol>
<li>點擊下載的 nodejs<img src="/2021/10/10/tools-blog-hexo-install/double_click_nodejs.png" class="" title="double_click_nodejs"></li>
<li>進行安裝<img src="/2021/10/10/tools-blog-hexo-install/install_nodejs.png" class="" title="install_nodejs"></li>
<li>完成安裝<img src="/2021/10/10/tools-blog-hexo-install/install_nodejs_done.png" class="" title="install_nodejs_done"></li>
</ol>
<h2 id="安裝-Git"><a href="#安裝-Git" class="headerlink" title="安裝 Git"></a>安裝 Git</h2><img src="/2021/10/10/tools-blog-hexo-install/download_git.png" class="" title="download_git">
<p>下載網址 : <a href="https://git-scm.com/downloads">Git</a><br>安裝方式 : 無腦安裝法</p>
<ol>
<li>點擊下載的 git<img src="/2021/10/10/tools-blog-hexo-install/double_click_git.png" class="" title="double_click_git"></li>
<li>進行安裝<img src="/2021/10/10/tools-blog-hexo-install/install_git.png" class="" title="install_git"></li>
<li>完成安裝<img src="/2021/10/10/tools-blog-hexo-install/install_git_done.png" class="" title="install_git_done"></li>
</ol>
<h1 id="安裝-Hexo-CLI"><a href="#安裝-Hexo-CLI" class="headerlink" title="安裝 Hexo CLI"></a>安裝 Hexo CLI</h1><p>輸入底下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<h1 id="建立-Blog-目錄並初始化"><a href="#建立-Blog-目錄並初始化" class="headerlink" title="建立 Blog 目錄並初始化"></a>建立 Blog 目錄並初始化</h1><p>建立一個目錄放置 blog<br>我是建立一個 Blog 目錄，進入 Blog 目錄中，並進行初始化．<br>命令如下 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir Blog</span><br><span class="line">$ <span class="built_in">cd</span> Blog</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<ul>
<li>建立 Blog 目錄<img src="/2021/10/10/tools-blog-hexo-install/create_blog.png" class="" title="create_blog"></li>
<li>初始化<img src="/2021/10/10/tools-blog-hexo-install/init_hexo.png" class="" title="init_hexo"></li>
</ul>
<h1 id="將-Blog-目錄下的東西上傳到-GitHub-Optional"><a href="#將-Blog-目錄下的東西上傳到-GitHub-Optional" class="headerlink" title="將 Blog 目錄下的東西上傳到 GitHub (Optional)"></a>將 Blog 目錄下的東西上傳到 GitHub (Optional)</h1><p>因為 Hexo 在部署上會先自動產生文章相關的網頁並進行部署，但是對於外掛套件、主題安裝和修改設定檔是不會一起部署到 GitHub 的，對於曾經因為沒有版本控制而吃上大虧的我，對於在沒版控的情況下進行修改，著實讓我感到不安．<br>這部分進行的步驟跟一般專案將程式碼上 GitHub 一樣，所以我就不詳述了．</p>
<ol>
<li>在 GitHub 上建立一個 Repository</li>
<li>將 Blog 目錄下的東西全部上傳到 GitHub</li>
</ol>
<h1 id="安裝部署套件"><a href="#安裝部署套件" class="headerlink" title="安裝部署套件"></a>安裝部署套件</h1><p>此套件是用來將產生的 blog 靜態網頁部署到 GitHub 上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/10/tools-blog-hexo-install/install_hexo_git_package.png" class="" title="install_hexo_git_package">

<h1 id="部署網頁空間"><a href="#部署網頁空間" class="headerlink" title="部署網頁空間"></a>部署網頁空間</h1><p>GitHub 提供了一個網頁空間，因為免費的，所以我就拿它來當 blog 使用<br>網路上有許多教學，這邊就不再詳述，可以參考底下網站的教學 :<br><a href="https://pages.github.com/">GitHub Pages</a></p>
<h1 id="部署設定"><a href="#部署設定" class="headerlink" title="部署設定"></a>部署設定</h1><p>修改 _config.yml 檔案中的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: your_repository (ex: https://github.com/username/username.github.io.git，其中 username 需要替換成自己的)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h1 id="進行部署"><a href="#進行部署" class="headerlink" title="進行部署"></a>進行部署</h1><p>使用以下命令進行部署 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Theme</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加關鍵字搜尋</title>
    <url>/2021/10/16/tools-blog-hexo-next-search/</url>
    <content><![CDATA[<h1 id="安裝-hexo-generator-searchdb"><a href="#安裝-hexo-generator-searchdb" class="headerlink" title="安裝 hexo-generator-searchdb"></a>安裝 hexo-generator-searchdb</h1><p>在終端機上輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-search/01.png" class="" title="install hexo-generator-searchdb">
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes/next/_config.yml<br>將 local_search 的 enable 設為 true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-search/02.png" class="" title="enable local_search">

<h1 id="效果呈現"><a href="#效果呈現" class="headerlink" title="效果呈現"></a>效果呈現</h1><img src="/2021/10/16/tools-blog-hexo-next-search/03.png" class="" title="result">]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加字數與閱讀時間統計</title>
    <url>/2021/10/16/tools-blog-hexo-next-symbol-count/</url>
    <content><![CDATA[<h1 id="安裝-hexo-symbols-count-time"><a href="#安裝-hexo-symbols-count-time" class="headerlink" title="安裝 hexo-symbols-count-time"></a>安裝 hexo-symbols-count-time</h1><p>在終端機上輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-symbol-count/01.png" class="" title="install hexo-symbols-count-time">
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes/next/_config.yml<br>將 item_text_total 設為 true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/16/tools-blog-hexo-next-symbol-count/02.png" class="" title="enable item_text_total">

<h1 id="效果呈現"><a href="#效果呈現" class="headerlink" title="效果呈現"></a>效果呈現</h1><img src="/2021/10/16/tools-blog-hexo-next-symbol-count/03.png" class="" title="result">]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 001 Hello React</title>
    <url>/2021/10/17/frontend-react-001-hello-react/</url>
    <content><![CDATA[<h1 id="使用-VS-Code-建立一個專案"><a href="#使用-VS-Code-建立一個專案" class="headerlink" title="使用 VS Code 建立一個專案"></a>使用 VS Code 建立一個專案</h1><p>打開 VS Code 並點選 Open Folder…</p>
<img src="/2021/10/17/frontend-react-001-hello-react/01.png" class="" title="click Open-Folder">
<span id="more"></span>
<p>建立一個工作目錄 React</p>
<img src="/2021/10/17/frontend-react-001-hello-react/02.png" class="" title="create a folder React">
<p>建立完成</p>
<img src="/2021/10/17/frontend-react-001-hello-react/03.png" class="" title="create a React project">

<h1 id="建立一個實驗目錄並建立一個-html-檔案"><a href="#建立一個實驗目錄並建立一個-html-檔案" class="headerlink" title="建立一個實驗目錄並建立一個 html 檔案"></a>建立一個實驗目錄並建立一個 html 檔案</h1><p>在 React 目錄中按下滑鼠右鍵，點選 New Folder 並建立 React 01 目錄</p>
<img src="/2021/10/17/frontend-react-001-hello-react/04.png" class="" title="create a folder for experiment 1">
<p>在 React 01 上按下滑鼠右鍵，點選 New File 建立 hello_react.html</p>
<img src="/2021/10/17/frontend-react-001-hello-react/05.png" class="" title="create a file">
<p>最終目錄結構如下:</p>
<img src="/2021/10/17/frontend-react-001-hello-react/06.png" class="" title="folder and file result">

<h1 id="引入相關設定並展示結果"><a href="#引入相關設定並展示結果" class="headerlink" title="引入相關設定並展示結果"></a>引入相關設定並展示結果</h1><p>編輯 hello_react.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_reactjs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 準備好一個容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react 核心庫 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 react-dom，用於 react 操作 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 babel，用於將 jsx 轉為 js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        此處 type 一定要設為 text/babel</span></span><br><span class="line"><span class="comment">        這樣 babel 才知道要將此處的 jsx 編譯成 js</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>  <span class="comment">// 此處一定不要寫引號，因為不是字串</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">        ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意 : </p>
<ol>
<li>三個 js 包的引入順序</li>
<li>在使用 jsx 時，一定用宣告成 <code>&lt;script type=&quot;text/babel&quot;&gt;&lt;/script&gt;</code></li>
<li>此為開始學習 Ract 的最簡單方式，之後還會介紹比較正式複雜的方式</li>
</ol>
<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><p>首先在 VS Code 中需安裝延伸套件 Live Server</p>
<img src="/2021/10/17/frontend-react-001-hello-react/07.png" class="" title="install Live Server">
<p>在該檔案上按下滑鼠右鍵點選 Open with Live Server</p>
<img src="/2021/10/17/frontend-react-001-hello-react/08.png" class="" title="Open with Live Server">
<p>最終在瀏覽器上呈現出以下畫面:</p>
<img src="/2021/10/17/frontend-react-001-hello-react/09.png" class="" title="result in browser">

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://reactjs.org/docs/add-react-to-a-website.html">https://reactjs.org/docs/add-react-to-a-website.html</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 002 Jsx 的一些規則</title>
    <url>/2021/10/19/frontend-react-002-jsx-rule/</url>
    <content><![CDATA[<ol>
<li><p>定義虛擬 DOM 時，不要有引號<br>創建虛擬 DOM 時，注意不會將標籤內容加上引號<br>即不需要將下圖黃色區塊額外加上引號</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/01.png" class="" title="create virtual DOM NG">
<p>正確的方式是可以用 <code>&#123; &#125;</code> 將標籤框住</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/02.png" class="" title="create virtual DOM OK">
<span id="more"></span></li>
<li><p>標籤中混入 js 表達式時，要用 <code>&#123; &#125;</code><br>比如說在 <code>&lt;h1&gt;&lt;/h1&gt;</code>內容要由變數 myData 中取得，<br>則需要寫成底下圖片中的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/03.png" class="" title="js"></li>
<li><p>樣式的類名指定不要用 class，要用 className<br>錯誤的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/04.png" class="" title="class"></li>
</ol>
<p>正確的方式 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/05.png" class="" title="className">

<ol start="4">
<li><p>內聯樣式要用 <code>style=&#123;&#123;key:value&#125;&#125;</code> 形式書寫<br>如下所示 :</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/06.png" class="" title="style"></li>
<li><p>虛擬 DOM 必須只有一個根標籤<br>不能存在兩個根標籤</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/07.png" class="" title="two roots"></li>
</ol>
<p>可以用 <code>&lt;div&gt;&lt;/div&gt;</code> 包裹住</p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/08.png" class="" title="the root">

<ol start="6">
<li><p>標籤必須閉合<br>即像在 html 中 <code>&lt;input type=&quot;text&quot;&gt;</code> 的寫法是可以的，<br>但是在 jsx 中必須要有結束標籤 <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code> 或 <code>&lt;input type=&quot;text&quot;/&gt;</code></p>
<img src="/2021/10/19/frontend-react-002-jsx-rule/09.png" class="" title="the close"></li>
<li><p>標籤首字母的意義<br>(1) 若小寫字母開頭，則將改標籤轉為 html 同名元素．若 html 中無該標籤對應的同名元素則報錯．<br>(2) 若大寫字母開頭，React 就會去渲染對應的組件，若組件沒有定義則會報錯．</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 003 jsx 中只能混入 js 表達式</title>
    <url>/2021/10/19/frontend-react-003-jsx-tag/</url>
    <content><![CDATA[<p>考量底下的代碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若我們想用一個模擬數據 <code>[&#39;Angular&#39;, &#39;React&#39;, &#39;Vue&#39;]</code><br>用來替換掉代碼中寫死的部分，將代碼修改成 :</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#123;data&#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>則在頁面呈現的結果如下 : </p>
<img src="/2021/10/19/frontend-react-003-jsx-tag/01.png" class="" title="wrong">
<p>會發現 React 會把 <code>[&#39;Angular&#39;, &#39;React&#39;, &#39;Vue&#39;]</code> 數據一個一個讀出<br>此時若能在裡面寫一個 for 語句將所有的資料一個一個讀出來，如下所示 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                for (var i = 0; i &lt; data.length; i++) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>data[i]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面結果會出現語法錯誤，因為此處只能寫 js 表達式，不可以寫 js 語句(代碼)</p>
<ol>
<li>表達式 :<br> (1) 變數 a<br> (2) a+b<br> (3) demo(1)<br> (4) arr.map()<br> (5) function test() {}</li>
<li>語句<br> (1) if 語句<br> (2) for 語句<br> (3) switch 語句</li>
</ol>
<p>所以用另一個方法 : 使用 arr.map()</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模擬數據</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建虛擬 DOM</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端 js 框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                data.map((item, index)=&gt;&#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    )  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染虛擬 DOM 到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最後結果如下圖所示 :</p>
<img src="/2021/10/19/frontend-react-003-jsx-tag/02.png" class="" title="correct">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 004 使用函數建立組件</title>
    <url>/2021/10/19/frontend-react-004-create-component-by-function/</url>
    <content><![CDATA[<ol>
<li><p>創建一個函數<br>底下是錯誤的寫法 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color=#FF0000>注意</font> : 首字母必須大寫，否則在標籤引用時會出錯，<br>因為 React 對小寫開頭的標籤會直接對應去找 html 語法中有提供的標籤．</p>
<span id="more"></span>
<p>正確的寫法如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>渲染到頁面上<br>錯誤的寫法 1 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(Demo, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>錯誤的寫法 2 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(&lt;Demo&gt;, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color=#FF0000>注意</font> : 要使用標籤形式，且必須是要閉合的<br>正確的寫法如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建函數式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函數定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><img src="/2021/10/19/frontend-react-004-create-component-by-function/01.png" class="" title="result">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Next 主題添加訪客與訪問量統計</title>
    <url>/2021/10/19/tools-blog-hexo-next-statistics-visitor/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在網路上找了一下有關於為 Hexo 添加訪客與訪問量統計，發現蠻混亂的，<br>一下子說 busuanzi 有問題不可以用，也有人說要修改一些東西，結果我修改完也沒有效果，<br>所以我這一篇就是來記錄一下我最後找到並是成功的方法。<br>我是參考這篇<a href="https://www.lcd1024.xyz/2020/05/31/busuanzi/">文章</a></p>
<span id="more"></span>
<h1 id="修改設定檔"><a href="#修改設定檔" class="headerlink" title="修改設定檔"></a>修改設定檔</h1><p>打開 themes\next_config.yml，確認底下的設定是有關閉的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>設定 valine</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>

<h1 id="在頁腳添加統計"><a href="#在頁腳添加統計" class="headerlink" title="在頁腳添加統計"></a>在頁腳添加統計</h1><p>打開 themes\next\layout_partials\footer.swig，<br>在 <code>&#123;%- endif %&#125;</code> 和 <code>&#123;&#123;- next_inject('footer') &#125;&#125;</code> 之間添加底下代碼 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>總訪客：&amp;nbsp<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>總訪問量：&amp;nbsp<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/01.png" class="" title="modify footer.swig">

<h1 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h1><p>若是在本地端上看到的會是底下情況 :</p>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/02.png" class="" title="local">

<p>放到 GitHub 後才會有作用 :</p>
<img src="/2021/10/19/tools-blog-hexo-next-statistics-visitor/03.png" class="" title="server">

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.lcd1024.xyz/2020/05/31/busuanzi/">Lcd1024|上善若水</a></p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 005 使用類別建立組件</title>
    <url>/2021/10/20/frontend-react-005-create-component-by-class/</url>
    <content><![CDATA[<h1 id="創建一個類別繼承-React-Component"><a href="#創建一個類別繼承-React-Component" class="headerlink" title="創建一個類別繼承 React.Component"></a>創建一個類別繼承 React.Component</h1><p><font color=#FF0000>注意 :</font></p>
<ol>
<li>組件類別必須繼承 React.Component</li>
<li>必須定義 render() </li>
<li>render() 必須有返回值</li>
</ol>
<p>底下是一個簡單的示例 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建類式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用類定義的組件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 006 初始化並使用 state</title>
    <url>/2021/10/20/frontend-react-006-use-state/</url>
    <content><![CDATA[<h1 id="組件的三大屬性-state"><a href="#組件的三大屬性-state" class="headerlink" title="組件的三大屬性 - state"></a>組件的三大屬性 - state</h1><p>React 透過 state 屬性的資訊，改變頁面呈現結果<br>首先寫一個簡單的類別組件如下 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 創建類式組件</span></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣炎熱<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 渲染組件到頁面上</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>觀察一下 Console 輸出 :</p>
<img src="/2021/10/20/frontend-react-006-use-state/01.png" class="" title="console1">
<p>可以發現 React 已經有建立好 state 屬性了</p>
<span id="more"></span>

<h1 id="state-賦值"><a href="#state-賦值" class="headerlink" title="state 賦值"></a>state 賦值</h1><p>一般自己寫的 js 類別可以利用以下方式達到讓繼承的類別，<br>可以在創建時將值賦給新的屬性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;steven&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>
<p>但是在 React 中新增物件是由 React 所控制的，即是由 React 調用 new 方法創建物件<br>所以無法由外部傳值給 state，但是可以通過創建方法 constructor() 對 state 賦值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;this.state.isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>賦值成功</p>
<img src="/2021/10/20/frontend-react-006-use-state/02.png" class="" title="console2">

<p>另一種寫法取值 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 007 原生事件綁定</title>
    <url>/2021/10/21/frontend-react-007-binding-evvent/</url>
    <content><![CDATA[<p>推薦在標籤上進行原生事件綁定，代碼如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;標題被點擊了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000">注意 :</font></p>
<ol>
<li>一般 js 在標籤中設定點擊事件是使用 onclick，但是 React 中需使用 onClick</li>
<li>在設定 onClick 時，必須要用這樣的格式 :<br>&emsp;onClick={function}<br>底下的寫法都是有問題的 :<br>&emsp;onClick=function<br>&emsp;onClick={function()}</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 008 透過事件改變 state</title>
    <url>/2021/10/21/frontend-react-008-change-state-by-event/</url>
    <content><![CDATA[<p>要如何透過點擊事件達到改 state 的值，讓瀏覽器重新渲染畫面？<br>考慮底下代碼，在點擊事件 myClick() 中讀取 state :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在事件中取得 state</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/01.png" class="" title="error1">
<p>這是因為 myClick() 在 Weather 類別之外，所以根本讀不到 state，<br>而此處的 this，在嚴格模式下是 undefine，正常模式下指向 window，所以會出錯誤</p>
<p>將 myClick() 移到 Weather 類別內，如下代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// myClick() 放在 Weather 原型對象上(只有一份)，以提供實例使用</span></span><br><span class="line">            <span class="comment">// 必須通過 Weather 實例去調用 myClick() 時，myClick() 內的 this 才是 Weather 實例</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/02.png" class="" title="error2">
<p>因為在<code>&lt;h2 onClick=&#123;myClick&#125;&gt;</code>，只有 Weather 實例才可以調用 myClick()<br>所以將<code>&lt;h2 onClick=&#123;myClick&#125;&gt;</code>改成<code>&lt;h2 onClick=&#123;this.myClick&#125;&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// myClick() 放在 Weather 原型對象上(只有一份)，以提供實例使用</span></span><br><span class="line">            <span class="comment">// 必須通過 Weather 實例去調用 myClick() 時，myClick() 內的 this 才是 Weather 實例</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>運行結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/03.png" class="" title="error3">
<p>一開始可以顯示正常，但是一點擊後就出現錯誤了．<br>因為<code>&lt;h2 onClick=&#123;this.myClick&#125;&gt;</code>只是賦值給 onClick，<br>等到點擊 h2 標籤時，是直接調用被賦值的方法 myClick()，<br>可以想做是 window 調用 myClick() 方法，而此方法的本體是指向 Weather 的 myClick()，<br>所以在 myClick() 中的 this 其實是 window，而 window 中並沒有 state 屬性</p>
<h1 id="可以正確地在回調函數中取得-state-的寫法"><a href="#可以正確地在回調函數中取得-state-的寫法" class="headerlink" title="可以正確地在回調函數中取得 state 的寫法"></a>可以正確地在回調函數中取得 state 的寫法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1. 創建類式組件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="comment">// 狀態初始化</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">            <span class="built_in">this</span>.changeWeather = <span class="built_in">this</span>.myClick.bind(<span class="built_in">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">// 讀取狀態</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 2. 渲染組件到頁面上</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>輸出結果 :</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/04.png" class="" title="correct">

<h1 id="進行-state-內容的更改"><a href="#進行-state-內容的更改" class="headerlink" title="進行 state 內容的更改"></a>進行 state 內容的更改</h1><p>直接在 myClick() 中更改 state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">    <span class="built_in">this</span>.state.isHot = !isHot</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.isHot)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可是輸出結果，console 中有改變，但是頁面卻沒有變化</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/05.png" class="" title="change state 1">
<p>這是因為 React 並不允許直接更改 state 的值．<br>打開 react devlopment tool 可以發現，不管怎樣點擊<code>&lt;h2&gt;</code>標籤，<br>在開發者工具中的 state 都不會改變</p>
<img src="/2021/10/21/frontend-react-008-change-state-by-event/06.png" class="" title="devlopment tool">
<h2 id="注意"><a href="#注意" class="headerlink" title="注意 :"></a><font color="#FF000">注意 :</font></h2><p>狀態必須透過 setState() 進行更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="最後精簡總結"><a href="#最後精簡總結" class="headerlink" title="最後精簡總結"></a>最後精簡總結</h1><ol>
<li>更改 state 初始方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
改成<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="comment">//this.state = &#123;isHot:false&#125;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改事件回調方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">this</span>.changeWeather = <span class="built_in">this</span>.myClick.bind(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">myClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
改成<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//this.changeWeather = this.myClick.bind(this)</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*myClick() &#123;</span></span><br><span class="line"><span class="comment">        const isHot = this.state.isHot</span></span><br><span class="line"><span class="comment">        this.setState(&#123;isHot:!isHot&#125;)</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font color="#FF0000">注意 :</font><br>一定要用匿名函數的方式對回調函數做設定</li>
</ol>
<h2 id="最終的代碼"><a href="#最終的代碼" class="headerlink" title="最終的代碼"></a>最終的代碼</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 初始化 state</span></span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 重新編寫</span></span><br><span class="line">        changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 009 props 基礎使用</title>
    <url>/2021/10/21/frontend-react-009-props-basic/</url>
    <content><![CDATA[<p>主要的目的是讓我們可以在建構實例時，由外部傳遞一些資訊給該實例使用，而且是唯讀的</p>
<h1 id="一般傳遞方式"><a href="#一般傳遞方式" class="headerlink" title="一般傳遞方式"></a>一般傳遞方式</h1><p>就是在<code>&lt;People/&gt;</code>內改成<code>&lt;People name=&quot;Steven&quot; sex=&quot;Man&quot; age=&quot;18&quot;/&gt;</code>，之後在實例中就可以透過 props 取的，如以下的寫法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;this.props.sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> <span class="attr">name</span>=<span class="string">&quot;Steven&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;Man&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>呈現畫面</p>
<img src="/2021/10/21/frontend-react-009-props-basic/01.png" class="" title="result">
<span id="more"></span>

<h1 id="批量傳遞方式"><a href="#批量傳遞方式" class="headerlink" title="批量傳遞方式"></a>批量傳遞方式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;Steven&quot;</span>, <span class="attr">sex</span>:<span class="string">&quot;Man&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 010 對組件的標籤屬性進行檢查與限制</title>
    <url>/2021/10/21/frontend-react-010-check-props/</url>
    <content><![CDATA[<p>首先引入 prop-types.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.0/prop-types.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>編寫限制條件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    People.propTypes = &#123;</span><br><span class="line">        <span class="attr">name</span>: PropTypes.string</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="number">12</span>, <span class="attr">sex</span>:<span class="string">&quot;Man&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>因為上述代碼會將檢查<code>name</code>必須是字串，所以當傳入數值時會發出警告</p>
<img src="/2021/10/21/frontend-react-010-check-props/01.png" class="" title="warning">

<p>若要限制不為空，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/02.png" class="" title="check null">

<p>若要設定預設值，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">&#125;</span><br><span class="line">People.defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/03.png" class="" title="default value">

<p>若要設定 age 為數值，則</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">    <span class="attr">age</span>: PropTypes.number</span><br><span class="line">&#125;</span><br><span class="line">People.defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="string">&quot;18&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/04.png" class="" title="check number">

<p>若要限制傳入的為函數，注意要用<code>func</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">People.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">    <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">    <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">    <span class="attr">say</span>: PropTypes.func</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/21/frontend-react-010-check-props/05.png" class="" title="check function">

<h1 id="精簡代碼"><a href="#精簡代碼" class="headerlink" title="精簡代碼"></a>精簡代碼</h1><p>將 propTypes 和 defaultProps 都放置於類中<br><font color="#FF000">注意 :</font><br>不需要用 <code>People.propTypes</code> 方式，則是用 <code>static propTypes</code><br><font color="#FF000">static 必須要寫</font>，否則就會變成對實例添加一個屬性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">            <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">            <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">            <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">            <span class="attr">say</span>: PropTypes.func</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;name, sex, age&#125; = <span class="built_in">this</span>.props</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">say</span>:<span class="string">&quot;hello&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 011 函數式組件使用 props</title>
    <url>/2021/10/21/frontend-react-011-functional-component-use-props/</url>
    <content><![CDATA[<p>透過函數可以傳參數的特性，React 也會將標籤屬性包成 props 傳給函數．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name, sex, age&#125; = props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>性別: &#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>年齡: &#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    People.propTypes = &#123;</span><br><span class="line">        <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">        <span class="attr">sex</span>: PropTypes.string,</span><br><span class="line">        <span class="attr">age</span>: PropTypes.number,</span><br><span class="line">        <span class="attr">say</span>: PropTypes.func</span><br><span class="line">    &#125;</span><br><span class="line">    People.defaultProps = &#123;</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&quot;不詳&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">say</span>:<span class="string">&quot;hello&quot;</span>&#125; <span class="comment">// 模擬由後端傳回的數據</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">People</span> &#123;<span class="attr">...data</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 012 字串 ref 的使用</title>
    <url>/2021/10/22/frontend-react-012-string-ref-use/</url>
    <content><![CDATA[<p>官方不推薦使用，因為有其效率問題且未來版本會移除．考慮以前要從<code>&lt;input&gt;</code>中取得資料，會類似底下的寫法 : </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;input id=<span class="string">&quot;input1&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> value = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input1&quot;</span>).value;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>寫 React 雖然也可以用這樣的方式取得數據，但是提供另一種方式取數據，如底下的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span>.refs</span><br><span class="line">            alert(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.refs.input2.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>利用標籤上的屬性<code>ref</code> React 會幫我把這些元素，以鍵值對的方式收集到```refs``中</p>
<img src="/2021/10/22/frontend-react-012-string-ref-use/01.png" class="" title="refs">
<p>然後就可以在實例中使用<code>this.refs.input1.value</code>方式取值</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 013 回調函數形式 ref 的使用</title>
    <url>/2021/10/22/frontend-react-013-callback-ref-use/</url>
    <content><![CDATA[<h1 id="內聯方式回調函數"><a href="#內聯方式回調函數" class="headerlink" title="內聯方式回調函數"></a>內聯方式回調函數</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;console.log(input1Element);&#125;&#125; type=&quot;text&quot; value=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>如果在標籤上的<code>ref</code>設定一個回調函數，則傳入的參數就是元素自身．</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/01.png" class="" title="test callback ref">

<p>所以我們可以透過將自身元素<code>input1Element</code>設給實例中的一個屬性<code>input1</code>，接著在回調函數<code>myClick()</code>中，透過屬性<code>input1</code>就可以取得給該元素．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;this.input1=input1Element;&#125;&#125; type=&quot;text&quot; defaultValue=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/02.png" class="" title="get value by callback ref">

<p>精簡代碼</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function">(<span class="params">input1Element</span>) =&gt;</span> &#123;<span class="built_in">this</span>.input1=input1Element;&#125;&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>因為函數參數只有一個，且函數主體代碼只有一個，所以括號可省落寫成 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function"><span class="params">input1Element</span> =&gt;</span> <span class="built_in">this</span>.input1=input1Element&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>因為<code>input1Element</code>幾乎不會用到，可以再省略 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">this</span>.input1=c&#125; type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;test callback&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="每次更新時會呼叫兩次"><a href="#每次更新時會呼叫兩次" class="headerlink" title="每次更新時會呼叫兩次"></a>每次更新時會呼叫兩次</h2><p>以底下的例子說明 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        changeWeather = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(input1Element)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                        this.input1=input1Element;</span></span><br><span class="line"><span class="xml">                        console.log(&quot;@&quot;, input1Element);</span></span><br><span class="line"><span class="xml">                    &#125;&#125; type=&quot;text&quot; defaultValue=&quot;test callback&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>Change Weather<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>一開始只會印出一行</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/03.png" class="" title="first time">
<p>當按下 Change Weather 按鈕後，會更新頁面，<br>就會看到印出兩行，第一行是用來清空之前的數據，第二行是重新設定數據</p>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/04.png" class="" title="update">

<h1 id="類方式回調函數"><a href="#類方式回調函數" class="headerlink" title="類方式回調函數"></a>類方式回調函數</h1><p>就是將回調函數寫在類中，如底下代碼所示 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;input1&#125; = <span class="built_in">this</span></span><br><span class="line">            <span class="built_in">console</span>.log(input1.value)</span><br><span class="line">        &#125;</span><br><span class="line">        changeWeather = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        saveInput = <span class="function">(<span class="params">input1Element</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.input1 = input1Element;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;@&quot;</span>, input1Element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;isHot&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天氣&#123;isHot?&#x27;炎熱&#x27;:&#x27;涼爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;test callback&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>Change Weather<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/22/frontend-react-013-callback-ref-use/05.png" class="" title="class callback">
<p>這樣的話就算頁面更新也不會呼叫</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>因為官方說兩者差異不大，所以一般大多數還是使用內聯方式居多．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 014 createRef 函數</title>
    <url>/2021/10/22/frontend-react-014-create-ref/</url>
    <content><![CDATA[<p>目前官方最推薦的方式，步驟如下 :</p>
<ol>
<li>使用<code>React.createRef()</code>建立所需的 ref 容器，如 : <code>ref1 = React.createRef()</code></li>
<li>原本使用字串或回調函數設定的地方，都改設成 ref 容器，如 : <code>&lt;input ref=&#123;this.ref1&#125; type=&quot;text&quot;/&gt;</code></li>
<li>取值方式，如 : <code>alert(this.ref1.current.value)</code><br>完整代碼如下 :<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        ref1 = React.createRef()</span><br><span class="line">        ref2 = React.createRef()</span><br><span class="line">        myClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.ref1.current.value)</span><br><span class="line">        &#125;</span><br><span class="line">        showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.ref2.current.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref1&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.myClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref2&#125;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Refs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 015 非受控組件</title>
    <url>/2021/10/22/frontend-react-015-uncontrolled-component/</url>
    <content><![CDATA[<p>簡單地說就是當要取用數值時，才從輸入元素<code>&lt;input&gt;</code>中取用，代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span></span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username.value&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password.value&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上面登入資料的取用，是等到按下登入按鈕時，才會觸發<code>handleSubmit()</code>回調函數，而在回調函數中才從元素中去取值出來．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 016 受控組件</title>
    <url>/2021/10/22/frontend-react-016-controlled-component/</url>
    <content><![CDATA[<p>簡單地說就是把數值放在 state 中，當要使用數值時，直接由 state 中取用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveUsername = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">username</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        savePassword = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">password</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>如上代碼會在每次輸入框有改變時，會透過回調函數將輸入值儲存到 state 中，等到要提交時，就直接由 state 中取用</p>
<img src="/2021/10/22/frontend-react-016-controlled-component/01.png" class="" title="controlled component">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 017 高階函數與柯里化</title>
    <url>/2021/10/22/frontend-react-017-currying/</url>
    <content><![CDATA[<p>考慮前一篇的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveUsername = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">username</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        savePassword = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">password</span>:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>此時表單只有兩個輸入框，所以僅需要兩個回調函數即可，萬一表單有幾十個輸入框，那不是就要寫幾十個回調函數．<br>再者，每個回調函數都大同小異，那是不是可以用一個函數透過傳參數的方式就好了?</p>
<span id="more"></span>
<p>修改代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(dataType)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>結果呈現</p>
<img src="/2021/10/22/frontend-react-017-currying/01.png" class="" title="wrong">
<p>可以看出當頁面載入時，React 就會呼叫<code>this.saveFormData(&#39;username&#39;)</code>和<code>this.saveFormData(&#39;password&#39;)</code>分別在 console 輸出字串 username 和 password．<br>當有用戶名輸入框有改變時，因為 onChange 被設為函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值，該返回值就是 undefine，所以 React 根本不會去呼叫，則 console 就不會有任何輸出．<br>所以想法就是如果函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值也是函數，這樣當輸入框有變化時，React 不就可以呼叫了嗎? 依據此想法修改了代碼如下 :<br><font color="#FF0000">注意 :</font><br>當要取用變數值當成 key 值時，變數要用 [ ] 包含，如 : <code>&#123;[dataType]:event.target.value&#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>我們將 onChange 設為函數<code>this.saveFormData(&#39;username&#39;)</code>的返回值，該返回值是一個函數，其代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(event) =&gt; &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以當輸入框有變化時，React 就會呼叫上面這個函數並把 event 放到參數中，後續就可以取值<br>輸出結果 :</p>
<img src="/2021/10/22/frontend-react-017-currying/02.png" class="" title="correct">

<h1 id="高階函數"><a href="#高階函數" class="headerlink" title="高階函數"></a>高階函數</h1><p>符合以下兩者條件之一稱為之 :</p>
<ol>
<li>該函數的參數之一是接收函數</li>
<li>該函數的返回值是一個函數</li>
</ol>
<p>而柯里化 (Currying) 就是通過函數調用，返回一個函數後又被調用，經過一連串的調用與參數接收後，最後統一處理結果，如下代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由 React 頁面初始化時呼叫一次並返回函數，當輸入框變化時又呼叫返回函數，並且進行統一處理呼叫過程中接收的參數．</p>
<h1 id="不用柯里化"><a href="#不用柯里化" class="headerlink" title="不用柯里化"></a>不用柯里化</h1><p>直接給 onChange 一個函數，該函數主體中會再呼另一個函數處理資料，代碼如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        saveFormData = <span class="function">(<span class="params">dataType, event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.preventDefault() <span class="comment">// 阻止表單提交</span></span><br><span class="line">            <span class="keyword">const</span> &#123;username, password&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            alert(<span class="string">`你輸入的用戶名是:<span class="subst">$&#123;username&#125;</span>, 你輸入的密碼是:<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://google.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用戶: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;, event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    密碼: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;, event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>用與不用柯里化都沒什麼差別，都是有人在使用的．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Currying</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 018 為什麼需要組件生命週期</title>
    <url>/2021/10/23/frontend-react-018-why-need-life-cycle/</url>
    <content><![CDATA[<p>考慮一個場景就是要在頁面上顯示一個計數器的數值，當頁面顯示在瀏覽器時，計數器就以每秒加一的方式開始計數，還有一個移除按鈕會將該計數器停止並把頁面上所有元件移除。<br>首先先完成頁面元件的顯示，代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>頁面顯示如下 :</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/01.png" class="" title="init">
<span id="more"></span>
<p>接著先考慮如何移除計數器，ReactDom 提供了一個 API <code>unmountComponentAtNode()</code>用來卸載組件，<br>代碼如下 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">    ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後寫一個定時器<code>setInterval()</code>每隔一秒就累加一，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><code>this.setState(&#123;count:count&#125;)</code>當 key 的名稱與變數名稱相同時，可以簡寫為<code>this.setState(&#123;count&#125;)</code><br>結果會看到計數器的值不會是每秒累加一，這是因為每次呼叫 <code>setState()</code>後就會呼叫一次<code>render()</code>，而呼叫一次<code>render()</code>就會創建一個定時器，所以到最後創建多個定時器同時對 state 進行更新。</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/02.png" class="" title="begin">
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/03.png" class="" title="next">

<p>所以希望 React 可以在一個時間點，即在頁面掛載時，調用一次設定定時器的函數。<br>React 提供一個回調函數<code>componentDidMount()</code>，在頁面掛載完成後進行呼叫．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Remove&quot;</span>)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/04.png" class="" title="ok">
<p>一切如設計的，定時器只會被呼叫一次，每一秒累加一，但是當我們按下移除按鈕時，出現錯誤如下 :</p>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/05.png" class="" title="when click button">
<p>這是因為組件被移除了，但是定時器卻沒有關閉，所以我們在按下移除按鈕時要把定時器給關了．</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-018-why-need-life-cycle/06.png" class="" title="done">

<p>另外 React 也提供另一個時間點，就是當頁面將要被移除前會先調用該函數<code>componentWillUnmount()</code><br>所以代碼可以寫成 : </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>這兩種寫法都是可以的．</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 019 組件的生命週期(舊)-掛載</title>
    <url>/2021/10/23/frontend-react-019-mount-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-019-mount-life-cycle/01.png" class="" title="life cycle">
<p>首先先演示第一種當組件掛載到頁面時的生命週期</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要掛載前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-019-mount-life-cycle/02.png" class="" title="mount life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 020 組件的生命週期(舊)-狀態更新</title>
    <url>/2021/10/23/frontend-react-020-state-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-020-state-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第二種，當組件的狀態有更新時的生命週期，當按下計數增加的按鈕後會觸發<code>setState()</code>進行組件更新。</p>
<span id="more"></span>
<p><font color="#FF0000">注意 :</font><code>shouldComponentUpdate()</code>用來檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</span></span><br><span class="line">        <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - shouldComponentUpdate&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>強制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-020-state-update-life-cycle/02.png" class="" title="state update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 021 組件的生命週期(舊)-父組件 render 更新</title>
    <url>/2021/10/23/frontend-react-021-parent-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-021-parent-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第三種，當父組件更新時會呼叫<code>render()</code>，而子組件也會一併進行更新，在此觀察子組件的更新生命週期，當按下父組件的換CPU按鈕時，會觸發<code>setState()</code>更改狀態，進而進行更新，並且也會使得子組件接收到新的 props，也會呼叫更新．</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        state = &#123;<span class="attr">cpu</span>:<span class="string">&#x27;AMD&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">        changeCpu = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">cpu</span>:<span class="string">&#x27;Intel&#x27;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>電腦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCpu&#125;</span>&gt;</span>換CPU<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Cpu</span> <span class="attr">cpu</span>=<span class="string">&#123;this.state.cpu&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Cpu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 接收到新的 props 時</span></span><br><span class="line">        <span class="function"><span class="title">componentWillReceiveProps</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentWillReceiveProps&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 檢驗是摟需要更新頁面，若為 true 則會調用 render()，否則不調用</span></span><br><span class="line">        <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - shouldComponentUpdate&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>CPU: &#123;this.props.cpu&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Cpu - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Computer</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>```</p>
<img src="/2021/10/23/frontend-react-021-parent-update-life-cycle/02.png" class="" title="parent update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 022 組件的生命週期(舊)-強制更新</title>
    <url>/2021/10/23/frontend-react-022-force-update-life-cycle/</url>
    <content><![CDATA[<p>組件的生命週期圖</p>
<img src="/2021/10/23/frontend-react-022-force-update-life-cycle/01.png" class="" title="life cycle">
<p>演示第四種，當按下強制更新按鈕時就會直接呼叫<code>forceUpdate()</code>進行更新。</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        force = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.forceUpdate()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要更新前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>強制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件更新完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/23/frontend-react-022-force-update-life-cycle/02.png" class="" title="force update life cycle">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 024 新版組件生命週期-getDerivedStateFromProps</title>
    <url>/2021/10/24/frontend-react-024-new-life-cycle2/</url>
    <content><![CDATA[<p>新版本組件生命週期 :</p>
<img src="/2021/10/24/frontend-react-024-new-life-cycle2/01.png" class="" title="new life cycle">
<p>本篇文章將會介紹新的 API : <code>getDerivedStateFromProps()</code></p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - constructor&#x27;</span>)</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;count&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 極為罕用，只有當 state 的值總是取決於 props 時才使用，</span></span><br><span class="line">        <span class="comment">// 一經使用後，就無法使用 state 進行更新</span></span><br><span class="line">        <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromProps</span>(<span class="params">props, state</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - getDerivedStateFromProps&#x27;</span>, props, state)</span><br><span class="line">            <span class="keyword">return</span> props</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化渲染與狀態更新之後</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - render&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;count&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>計數器 : &#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>計數增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>卸載<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件掛載完畢時</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentDidMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 組件將要被移除前</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Counter - componentWillUnmount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">count</span>=<span class="string">&#123;199&#125;/</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>此 API 極為罕用，只有當 state 的值總是取決於 props 時才使用，<font color="#FF0000">一經使用後，就無法使用 state 進行更新</font>，所以一掛載組件後就直接被設為 props 的值，而且後續按計數增加按鈕也不會更新計數</p>
<img src="/2021/10/24/frontend-react-024-new-life-cycle2/02.png" class="" title="result">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 023 新版組件生命週期簡介</title>
    <url>/2021/10/24/frontend-react-023-new-life-cycle1/</url>
    <content><![CDATA[<p>自從 React 17.0 版本之後將要逐漸廢除底下三個 API :</p>
<ol>
<li>componentWillMount</li>
<li>componentWillReceiveProps</li>
<li>componentWillUpdate<img src="/2021/10/24/frontend-react-023-new-life-cycle1/01.png" class="" title="deprecated">
<span id="more"></span>
若是使用的話會出現底下警告 :<img src="/2021/10/24/frontend-react-023-new-life-cycle1/02.png" class="" title="warning">
新版的生命週期如下 :<img src="/2021/10/24/frontend-react-023-new-life-cycle1/03.png" class="" title="new life cycle">
新增了兩個 API :</li>
</ol>
<ul>
<li>getDerivedStateFromProps</li>
<li>getSnapshotBeforeUpdate</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 025 新版組件生命週期-getSnapshotBeforeUpdate</title>
    <url>/2021/10/24/frontend-react-025-new-life-cycle3/</url>
    <content><![CDATA[<p>新版本組件生命週期 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/01.png" class="" title="new life cycle">
<p>本篇文章將會介紹新的 API : <code>getSnapshotBeforeUpdate()</code></p>
<span id="more"></span>
<p>假設場景是要寫一個可閱讀推播訊息的應用，該應用的推播訊息會一直發送(假設每秒發送一則)，而最新的消息要放在清單最上面．<br>客戶可以透過訊息列表一一查看訊息，一次只可見五條訊息，其餘的訊息則需透過捲軸瀏覽，但是客戶如果不滾動捲軸的話則當前看到的訊息不會滾動．<br>就是沒有使用<code>getSnapshotBeforeUpdate()</code>時的代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MessageList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">messageArr</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 獲取元狀態</span></span><br><span class="line">                <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                <span class="comment">// 模擬取得一條訊息</span></span><br><span class="line">                <span class="keyword">const</span> message = <span class="string">&#x27;訊息&#x27;</span> + (messageArr.length + <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 更新狀態</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;<span class="attr">messageArr</span>:[message, ...messageArr]&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.messageArr.map((message, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MessageList</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>比如說這一秒使用者看到[訊息9]，下一秒[訊息10]進來，若使用者沒有捲動時，應該要維持[訊息9]在最頂．<br>這一秒使用者看到[訊息9] :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/02.png" class="" title="message 9">
<p>下一秒[訊息10]進來 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/03.png" class="" title="message 10">

<p>所以要達到這樣維持不變的話，就必須在新訊息進來後，在更新訊息清單之前先記錄一下目前捲軸的高度，在更新完清單後，調整捲軸頂部位置，所以我們可以在<code>getSnapshotBeforeUpdate()</code>紀錄(快照)一下<code>scrollHeight</code>，而在<code>componentDidUpdate()</code>取出快照後調整<code>scrollTop</code><br>完整代碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MessageList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">messageArr</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 獲取元狀態</span></span><br><span class="line">                <span class="keyword">const</span> &#123;messageArr&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                <span class="comment">// 模擬取得一條訊息</span></span><br><span class="line">                <span class="keyword">const</span> message = <span class="string">&#x27;訊息&#x27;</span> + (messageArr.length + <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 更新狀態</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;<span class="attr">messageArr</span>:[message, ...messageArr]&#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可建立快照供 componentDidUpdate() 使用</span></span><br><span class="line">        <span class="function"><span class="title">getSnapshotBeforeUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.refs.list.scrollHeight</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可由第三個參數取得快照資訊</span></span><br><span class="line">        <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState, height</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.refs.list.scrollTop += <span class="built_in">this</span>.refs.list.scrollHeight - height</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.messageArr.map((message, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MessageList</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注意 :<br><code>componentDidUpdate(prevProps, prevState, snapshot)</code>此 API 可以傳入三個參數，<br>第一個<code>prevProps</code>是前次的 props 值<br>第二個<code>prevState</code>是前次的 state 值<br>第三個<code>snapshot</code>是<code>getSnapshotBeforeUpdate()</code>的返回值<br>這一秒使用者看到[訊息9] :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/02.png" class="" title="message 9">
<p>之後新訊息進來，還是維持[訊息9]在頂部 :</p>
<img src="/2021/10/24/frontend-react-025-new-life-cycle3/04.png" class="" title="new message">]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Life Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 - React 學習 - 026 Diffing 演算法與 key 的作用</title>
    <url>/2021/10/24/frontend-react-026-diffing-key/</url>
    <content><![CDATA[<p>Diffing 演算法是 React 用來比較新舊虛擬 DOM 之間是否有差異，而 React 只會針對有不同的標籤進行頁面更新．而比較的方式就是透過標籤上的 key 屬性進行第一次比對，若是相等則繼續看其內容是否也一樣，否則當作不一樣．<br>詳細說明一下動作流程 :<br>&emsp;&emsp;當 state 中的數據發生改變時，React 會根據新的 state 產生『新虛擬 DOM』，隨後透過 Diffing 演算法進行『新虛擬 DOM』和『舊虛擬 DOM』的比較．<br>比較的規則如下 :<br>&emsp;&emsp;依序拿『新虛擬 DOM』的標籤中的 key 值，到『舊虛擬 DOM』中尋找是否有相同的 key 值:<br>&emsp;&emsp;&emsp;&emsp;(1) 若有找到相同者 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;進行虛擬 DOM 內容比較 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;(1) 若相同，直接使用之前的真實 DOM<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;(2) 不相同，生成新的真實 DOM 替換掉之前的<br>&emsp;&emsp;&emsp;&emsp;(2) 沒有者到相同者 :<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;生成新的真實 DOM<br>因為標籤是有套嵌的，所以要一直遞迴地往下比較．</p>
<span id="more"></span>
<p>分析一下底下代碼，一個是以 index 作為 key，另一個是以 id 作為 key :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;steven&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;amy&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.name.value)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.age.value)</span><br><span class="line">            <span class="keyword">const</span> &#123;persons&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">const</span> person = &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="built_in">this</span>.refs.name.value, <span class="attr">age</span>:<span class="built_in">this</span>.refs.age.value&#125;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">persons</span>:[person, ...persons]&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    新增人員: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    年齡: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人員列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 index 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 id 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2021/10/24/frontend-react-026-diffing-key/01.png" class="">
<p>此時若新增人員後會變成</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/02.png" class="">
<p>中間兩者發生哪些動作？</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/03.png" class="">
<p>由上圖的分析結果發現，<br>使用 index 作為 key 的會生成 3 次新的真實 DOM，<br>而使用 id 作為 key 的只會生成 1 次新的真實 DOM．<br>所以資料若採用逆序添加、逆序刪除等會破壞原本順序的操作時，<br>以 index 作為 key 的就需要新生成較多的真實 DOM，進而影響效能．</p>
<h1 id="另一個議題"><a href="#另一個議題" class="headerlink" title="另一個議題"></a>另一個議題</h1><p>另外當展示結構中有輸入類時，考慮底下的代碼，每筆展示資料後面都有一個輸入框 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        state = &#123;<span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;steven&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;amy&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line"></span><br><span class="line">        add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.name.value)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.age.value)</span><br><span class="line">            <span class="keyword">const</span> &#123;persons&#125; = <span class="built_in">this</span>.state</span><br><span class="line">            <span class="keyword">const</span> person = &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="built_in">this</span>.refs.name.value, <span class="attr">age</span>:<span class="built_in">this</span>.refs.age.value&#125;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">persons</span>:[person, ...persons]&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    新增人員: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    年齡: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人員列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 index 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 id 作為 key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.persons.map((person) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span>&#123;person.name&#125; - &#123;person.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>顯示結果 :</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/04.png" class="">
<p>此時若先在輸入框中輸入一些訊息後，在新增人員時．發現以 index 作為 key 的會發生錯亂</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/05.png" class="">
<p>分析姐果如下，最主要的原因就是新舊混用錯位 :</p>
<img src="/2021/10/24/frontend-react-026-diffing-key/06.png" class="">

<p>所以用 index 作為 key 時可能有以下的問題 :</p>
<ol>
<li>若有破壞順序的操作時，會產生效能低下問題</li>
<li>若結構中有輸入類時，會導致產生錯誤的 DOM，頁面顯示出問題．<br>所以一般以 index 作為 key，只用於資料不變更的展示用</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Diffing</tag>
        <tag>Key</tag>
      </tags>
  </entry>
</search>
